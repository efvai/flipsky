
fesc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  08010880  08010880  00020880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116e8  080116e8  000304b8  2**0
                  CONTENTS
  4 .ARM          00000008  080116e8  080116e8  000216e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116f0  080116f0  000304b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116f0  080116f0  000216f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116f4  080116f4  000216f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b8  20000000  080116f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304b8  2**0
                  CONTENTS
 10 .bss          00004e10  200004b8  200004b8  000304b8  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200052c8  200052c8  000304b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000303d1  00000000  00000000  000304e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006406  00000000  00000000  000608b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a58  00000000  00000000  00066cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001920  00000000  00000000  00068718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b2a  00000000  00000000  0006a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025324  00000000  00000000  00090b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4983  00000000  00000000  000b5e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018a809  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007750  00000000  00000000  0018a85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004b8 	.word	0x200004b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010864 	.word	0x08010864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004bc 	.word	0x200004bc
 80001cc:	08010864 	.word	0x08010864

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
 8000d78:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	2304      	movs	r3, #4
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d002      	beq.n	8000dbe <OD_getIndex+0x14>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	e000      	b.n	8000dc0 <OD_getIndex+0x16>
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <OD_extension_init+0x14>
 8000ddc:	2305      	movs	r3, #5
 8000dde:	e003      	b.n	8000de8 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	460b      	mov	r3, r1
 8000e02:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000e04:	7af9      	ldrb	r1, [r7, #11]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f001 fb56 	bl	80024c0 <OD_get_value>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00c      	beq.n	8000e4c <OD_read_1014_default+0x2e>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	7c5b      	ldrb	r3, [r3, #17]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d108      	bne.n	8000e4c <OD_read_1014_default+0x2e>
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d902      	bls.n	8000e4c <OD_read_1014_default+0x2e>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8000e4c:	2309      	movs	r3, #9
 8000e4e:	e01b      	b.n	8000e88 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <OD_read_1014_default+0x44>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e001      	b.n	8000e66 <OD_read_1014_default+0x48>
 8000e62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e66:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e6e:	3380      	adds	r3, #128	; 0x80
 8000e70:	461a      	mov	r2, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 8000e78:	6939      	ldr	r1, [r7, #16]
 8000e7a:	68b8      	ldr	r0, [r7, #8]
 8000e7c:	f7ff ff86 	bl	8000d8c <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2204      	movs	r2, #4
 8000e84:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00f      	beq.n	8000ec4 <OD_read_1003+0x34>
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00c      	beq.n	8000ec4 <OD_read_1003+0x34>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d009      	beq.n	8000ec4 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d803      	bhi.n	8000ebe <OD_read_1003+0x2e>
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	7c5b      	ldrb	r3, [r3, #17]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <OD_read_1003+0x34>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	e04d      	b.n	8000f64 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	7f1b      	ldrb	r3, [r3, #28]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d801      	bhi.n	8000eda <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000ed6:	2309      	movs	r3, #9
 8000ed8:	e044      	b.n	8000f64 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	7c5b      	ldrb	r3, [r3, #17]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10b      	bne.n	8000efa <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	68b8      	ldr	r0, [r7, #8]
 8000eec:	f7ff ff3e 	bl	8000d6c <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e034      	b.n	8000f64 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	7c5a      	ldrb	r2, [r3, #17]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d82c      	bhi.n	8000f62 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	7f5b      	ldrb	r3, [r3, #29]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	7c5b      	ldrb	r3, [r3, #17]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8000f1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da07      	bge.n	8000f32 <OD_read_1003+0xa2>
            index += em->fifoSize;
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	7f1b      	ldrb	r3, [r3, #28]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	82fb      	strh	r3, [r7, #22]
 8000f30:	e007      	b.n	8000f42 <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 8000f32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	7f12      	ldrb	r2, [r2, #28]
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	db01      	blt.n	8000f42 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 8000f3e:	2309      	movs	r3, #9
 8000f40:	e010      	b.n	8000f64 <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	699a      	ldr	r2, [r3, #24]
 8000f46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	68b8      	ldr	r0, [r7, #8]
 8000f54:	f7ff ff1a 	bl	8000d8c <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 8000f62:	2319      	movs	r3, #25
    }
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00c      	beq.n	8000f9a <OD_write_1003+0x2e>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	7c5b      	ldrb	r3, [r3, #17]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d108      	bne.n	8000f9a <OD_write_1003+0x2e>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <OD_write_1003+0x2e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d102      	bne.n	8000f9a <OD_write_1003+0x2e>
        || countWritten == NULL)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	e012      	b.n	8000fc4 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 8000f9e:	68b8      	ldr	r0, [r7, #8]
 8000fa0:	f7ff fed6 	bl	8000d50 <CO_getUint8>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8000faa:	230f      	movs	r3, #15
 8000fac:	e00a      	b.n	8000fc4 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d01a      	beq.n	800101a <CO_EM_init+0x4e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d017      	beq.n	800101a <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d103      	bne.n	8000ff8 <CO_EM_init+0x2c>
 8000ff0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d810      	bhi.n	800101a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00d      	beq.n	800101a <CO_EM_init+0x4e>
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00a      	beq.n	800101a <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8001004:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <CO_EM_init+0x4e>
 800100c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001010:	2b00      	cmp	r3, #0
 8001012:	db02      	blt.n	800101a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8001014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e0a7      	b.n	8001170 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8001020:	2250      	movs	r2, #80	; 0x50
 8001022:	2100      	movs	r1, #0
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f00d fd01 	bl	800ea2c <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8001030:	2300      	movs	r3, #0
 8001032:	2201      	movs	r2, #1
 8001034:	2100      	movs	r1, #0
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f001 faa9 	bl	800258e <OD_getPtr>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10c      	bne.n	8001064 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 800104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <CO_EM_init+0x92>
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff feaa 	bl	8000daa <OD_getIndex>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800105e:	f06f 030b 	mvn.w	r3, #11
 8001062:	e085      	b.n	8001170 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001078:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 800107a:	f107 0210 	add.w	r2, r7, #16
 800107e:	2301      	movs	r3, #1
 8001080:	2100      	movs	r1, #0
 8001082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001084:	f7ff feb6 	bl	8000df4 <OD_get_u32>
 8001088:	4603      	mov	r3, r0
 800108a:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 800108c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d104      	bne.n	800109e <CO_EM_init+0xd2>
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <CO_EM_init+0x1ac>)
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d010      	beq.n	80010c0 <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800109e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <CO_EM_init+0xe6>
 80010a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010a6:	f7ff fe80 	bl	8000daa <OD_getIndex>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b0:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 80010b2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80010ba:	f06f 030b 	mvn.w	r3, #11
 80010be:	e057      	b.n	8001170 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 80010c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3380      	adds	r3, #128	; 0x80
 80010c8:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	0fdb      	lsrs	r3, r3, #31
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <CO_EM_init+0x1b0>)
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4a26      	ldr	r2, [pc, #152]	; (8001180 <CO_EM_init+0x1b4>)
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3330      	adds	r3, #48	; 0x30
 80010ee:	4619      	mov	r1, r3
 80010f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010f2:	f7ff fe6b 	bl	8000dcc <OD_extension_init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80010fa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8001102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <CO_EM_init+0x14a>
 8001108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800110a:	f7ff fe4e 	bl	8000daa <OD_getIndex>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001114:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001116:	f06f 030b 	mvn.w	r3, #11
 800111a:	e029      	b.n	8001170 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8001126:	8aba      	ldrh	r2, [r7, #20]
 8001128:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800112a:	2300      	movs	r3, #0
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	2308      	movs	r3, #8
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	68b8      	ldr	r0, [r7, #8]
 8001136:	f007 fb29 	bl	800878c <CO_CANtxBufferInit>
 800113a:	4602      	mov	r2, r0
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	e010      	b.n	8001170 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <CO_EM_init+0x1b8>)
 8001158:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <CO_EM_init+0x1bc>)
 800115e:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3340      	adds	r3, #64	; 0x40
 8001164:	4619      	mov	r1, r3
 8001166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001168:	f7ff fe30 	bl	8000dcc <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 800116c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	7ffff800 	.word	0x7ffff800
 800117c:	08000e1f 	.word	0x08000e1f
 8001180:	080020f5 	.word	0x080020f5
 8001184:	08000e91 	.word	0x08000e91
 8001188:	08000f6d 	.word	0x08000f6d

0800118c <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	8a5b      	ldrh	r3, [r3, #18]
 80011a0:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	8a1b      	ldrh	r3, [r3, #16]
 80011a6:	8aba      	ldrh	r2, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f000 80a2 	beq.w	80012f2 <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8a1a      	ldrh	r2, [r3, #16]
 80011b2:	8abb      	ldrh	r3, [r7, #20]
 80011b4:	4053      	eors	r3, r2
 80011b6:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8aba      	ldrh	r2, [r7, #20]
 80011bc:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 80011be:	8a7a      	ldrh	r2, [r7, #18]
 80011c0:	f240 1301 	movw	r3, #257	; 0x101
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d010      	beq.n	80011ec <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 80011ca:	8aba      	ldrh	r2, [r7, #20]
 80011cc:	f240 1301 	movw	r3, #257	; 0x101
 80011d0:	4013      	ands	r3, r2
            CO_error(em,
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf14      	ite	ne
 80011d6:	2301      	movne	r3, #1
 80011d8:	2300      	moveq	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4619      	mov	r1, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2300      	movs	r3, #0
 80011e4:	2201      	movs	r2, #1
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 f91a 	bl	8001420 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 80011ec:	8a7b      	ldrh	r3, [r7, #18]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d010      	beq.n	8001218 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 80011f6:	8abb      	ldrh	r3, [r7, #20]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	2300      	movs	r3, #0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	f248 1320 	movw	r3, #33056	; 0x8120
 8001210:	2207      	movs	r2, #7
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f904 	bl	8001420 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8001218:	8a7b      	ldrh	r3, [r7, #18]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d010      	beq.n	8001244 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8001222:	8abb      	ldrh	r3, [r7, #20]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	2300      	movs	r3, #0
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	f248 1340 	movw	r3, #33088	; 0x8140
 800123c:	2212      	movs	r2, #18
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f8ee 	bl	8001420 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 8001244:	8a7b      	ldrh	r3, [r7, #18]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d010      	beq.n	8001270 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 800124e:	8abb      	ldrh	r3, [r7, #20]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	bf14      	ite	ne
 8001258:	2301      	movne	r3, #1
 800125a:	2300      	moveq	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	f248 1310 	movw	r3, #33040	; 0x8110
 8001268:	2214      	movs	r2, #20
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f8d8 	bl	8001420 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 8001270:	8a7b      	ldrh	r3, [r7, #18]
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	2b00      	cmp	r3, #0
 8001278:	d010      	beq.n	800129c <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 800127a:	8abb      	ldrh	r3, [r7, #20]
 800127c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4619      	mov	r1, r3
 800128c:	2300      	movs	r3, #0
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001294:	2215      	movs	r2, #21
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f8c2 	bl	8001420 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 800129c:	8a7b      	ldrh	r3, [r7, #18]
 800129e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d010      	beq.n	80012c8 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 80012a6:	8abb      	ldrh	r3, [r7, #20]
 80012a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	f248 1320 	movw	r3, #33056	; 0x8120
 80012c0:	2206      	movs	r2, #6
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 f8ac 	bl	8001420 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 80012c8:	8a7b      	ldrh	r3, [r7, #18]
 80012ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00f      	beq.n	80012f2 <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 80012d2:	8abb      	ldrh	r3, [r7, #20]
 80012d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2300      	movs	r3, #0
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2313      	movs	r3, #19
 80012ea:	2213      	movs	r2, #19
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f000 f897 	bl	8001420 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	795b      	ldrb	r3, [r3, #5]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <CO_EM_process+0x18a>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	78db      	ldrb	r3, [r3, #3]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	7a1b      	ldrb	r3, [r3, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d103      	bne.n	800132e <CO_EM_process+0x1a2>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	7a5b      	ldrb	r3, [r3, #9]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001334:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	7dfa      	ldrb	r2, [r7, #23]
 800133c:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d067      	beq.n	8001414 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	7f1b      	ldrb	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d965      	bls.n	8001418 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	7f9b      	ldrb	r3, [r3, #30]
 8001350:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	7f5b      	ldrb	r3, [r3, #29]
 8001356:	7c7a      	ldrb	r2, [r7, #17]
 8001358:	429a      	cmp	r2, r3
 800135a:	d05d      	beq.n	8001418 <CO_EM_process+0x28c>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d158      	bne.n	8001418 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	7c7b      	ldrb	r3, [r7, #17]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	6819      	ldr	r1, [r3, #0]
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6998      	ldr	r0, [r3, #24]
 800137a:	7c7b      	ldrb	r3, [r7, #17]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4403      	add	r3, r0
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	1d58      	adds	r0, r3, #5
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	7c7b      	ldrb	r3, [r7, #17]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	2208      	movs	r2, #8
 8001396:	4619      	mov	r1, r3
 8001398:	f00d fb20 	bl	800e9dc <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	4619      	mov	r1, r3
 80013a6:	4610      	mov	r0, r2
 80013a8:	f007 fa6a 	bl	8008880 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 80013ac:	7c7b      	ldrb	r3, [r7, #17]
 80013ae:	3301      	adds	r3, #1
 80013b0:	747b      	strb	r3, [r7, #17]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	7f1b      	ldrb	r3, [r3, #28]
 80013b6:	7c7a      	ldrb	r2, [r7, #17]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d201      	bcs.n	80013c0 <CO_EM_process+0x234>
 80013bc:	7c7a      	ldrb	r2, [r7, #17]
 80013be:	e000      	b.n	80013c2 <CO_EM_process+0x236>
 80013c0:	2200      	movs	r2, #0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	7fdb      	ldrb	r3, [r3, #31]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10c      	bne.n	80013e8 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2202      	movs	r2, #2
 80013d2:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 80013d4:	2300      	movs	r3, #0
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	2220      	movs	r2, #32
 80013de:	2101      	movs	r1, #1
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f81d 	bl	8001420 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 80013e6:	e017      	b.n	8001418 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	7fdb      	ldrb	r3, [r3, #31]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d113      	bne.n	8001418 <CO_EM_process+0x28c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	7f9a      	ldrb	r2, [r3, #30]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	7f5b      	ldrb	r3, [r3, #29]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10d      	bne.n	8001418 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	2220      	movs	r2, #32
 800140a:	2100      	movs	r1, #0
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f807 	bl	8001420 <CO_error>
    return;
 8001412:	e001      	b.n	8001418 <CO_EM_process+0x28c>
        return;
 8001414:	bf00      	nop
 8001416:	e000      	b.n	800141a <CO_EM_process+0x28e>
    return;
 8001418:	bf00      	nop
}
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8001420:	b480      	push	{r7}
 8001422:	b08d      	sub	sp, #52	; 0x34
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	460b      	mov	r3, r1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	4613      	mov	r3, r2
 8001434:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a6 	beq.w	800158a <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	2201      	movs	r2, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8001456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800145a:	2b09      	cmp	r3, #9
 800145c:	d90a      	bls.n	8001474 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 800145e:	2305      	movs	r3, #5
 8001460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8001464:	2301      	movs	r3, #1
 8001466:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 800146a:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 800146e:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8001474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001486:	4013      	ands	r3, r2
 8001488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8001492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <CO_error+0x88>
            return;
 800149a:	e079      	b.n	8001590 <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 800149c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d074      	beq.n	800158e <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 80014a4:	2300      	movs	r3, #0
 80014a6:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	061a      	lsls	r2, r3, #24
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 80014b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b4:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014ba:	f3ef 8210 	mrs	r2, PRIMASK
 80014be:	617a      	str	r2, [r7, #20]
  return(result);
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <CO_error+0xc0>
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e00b      	b.n	80014f8 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 80014e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80014ea:	43db      	mvns	r3, r3
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	4013      	ands	r3, r2
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f6:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	7f1b      	ldrb	r3, [r3, #28]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d93c      	bls.n	800157a <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	7f5b      	ldrb	r3, [r3, #29]
 8001504:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8001506:	7efb      	ldrb	r3, [r7, #27]
 8001508:	3301      	adds	r3, #1
 800150a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	7f1b      	ldrb	r3, [r3, #28]
 8001512:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001516:	429a      	cmp	r2, r3
 8001518:	d302      	bcc.n	8001520 <CO_error+0x100>
            fifoWrPtrNext = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	7f9b      	ldrb	r3, [r3, #30]
 8001524:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001528:	429a      	cmp	r2, r3
 800152a:	d103      	bne.n	8001534 <CO_error+0x114>
            em->fifoOverflow = 1;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2201      	movs	r2, #1
 8001530:	77da      	strb	r2, [r3, #31]
 8001532:	e022      	b.n	800157a <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	7efb      	ldrb	r3, [r7, #27]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	6a3a      	ldr	r2, [r7, #32]
 8001540:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	7efb      	ldrb	r3, [r7, #27]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001556:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	7f1b      	ldrb	r3, [r3, #28]
 8001564:	3b01      	subs	r3, #1
 8001566:	429a      	cmp	r2, r3
 8001568:	da07      	bge.n	800157a <CO_error+0x15a>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001570:	3301      	adds	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f383 8810 	msr	PRIMASK, r3
}
 8001588:	e002      	b.n	8001590 <CO_error+0x170>
    if (em == NULL) return;
 800158a:	bf00      	nop
 800158c:	e000      	b.n	8001590 <CO_error+0x170>
            return;
 800158e:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8001590:	3734      	adds	r7, #52	; 0x34
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <OD_getIndex+0x14>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	e000      	b.n	80015cc <OD_getIndex+0x16>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <OD_extension_init>:
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <OD_extension_init+0x14>
 80015e8:	2305      	movs	r3, #5
 80015ea:	e003      	b.n	80015f4 <OD_extension_init+0x1c>
    entry->extension = extension;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <OD_get_u32>:
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af02      	add	r7, sp, #8
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	460b      	mov	r3, r1
 800160e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001610:	7af9      	ldrb	r1, [r7, #11]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2304      	movs	r3, #4
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 ff50 	bl	80024c0 <OD_get_value>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 800162a:	b480      	push	{r7}
 800162c:	b087      	sub	sp, #28
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	791b      	ldrb	r3, [r3, #4]
 800163c:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3305      	adds	r3, #5
 8001642:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8001644:	7cfb      	ldrb	r3, [r7, #19]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b25a      	sxtb	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2201      	movs	r2, #1
 8001658:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b088      	sub	sp, #32
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d012      	beq.n	80016a6 <OD_write_1016+0x40>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00f      	beq.n	80016a6 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	7c5b      	ldrb	r3, [r3, #17]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	7c5a      	ldrb	r2, [r3, #17]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	7a1b      	ldrb	r3, [r3, #8]
 8001696:	429a      	cmp	r2, r3
 8001698:	d805      	bhi.n	80016a6 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d102      	bne.n	80016a6 <OD_write_1016+0x40>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 80016a6:	2309      	movs	r3, #9
 80016a8:	e020      	b.n	80016ec <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 80016aa:	68b8      	ldr	r0, [r7, #8]
 80016ac:	f7ff ff75 	bl	800159a <CO_getUint32>
 80016b0:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	0c1b      	lsrs	r3, r3, #16
 80016b6:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	7c5b      	ldrb	r3, [r3, #17]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b2d9      	uxtb	r1, r3
 80016c4:	8abb      	ldrh	r3, [r7, #20]
 80016c6:	7dfa      	ldrb	r2, [r7, #23]
 80016c8:	69f8      	ldr	r0, [r7, #28]
 80016ca:	f000 f8bf 	bl	800184c <CO_HBconsumer_initEntry>
 80016ce:	4603      	mov	r3, r0
 80016d0:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 80016d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 80016da:	2308      	movs	r3, #8
 80016dc:	e006      	b.n	80016ec <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 fd05 	bl	80020f4 <OD_writeOriginal>
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <CO_HBconsumer_init+0x2c>
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <CO_HBconsumer_init+0x2c>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <CO_HBconsumer_init+0x2c>
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	e08a      	b.n	800183c <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8001726:	2230      	movs	r2, #48	; 0x30
 8001728:	2100      	movs	r1, #0
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f00d f97e 	bl	800ea2c <memset>
    HBcons->em = em;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001746:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	429a      	cmp	r2, r3
 8001750:	d304      	bcc.n	800175c <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8001756:	3b01      	subs	r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e000      	b.n	800175e <CO_HBconsumer_init+0x6a>
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001762:	2300      	movs	r3, #0
 8001764:	77fb      	strb	r3, [r7, #31]
 8001766:	e041      	b.n	80017ec <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8001768:	7ffb      	ldrb	r3, [r7, #31]
 800176a:	3301      	adds	r3, #1
 800176c:	b2d9      	uxtb	r1, r3
 800176e:	f107 0214 	add.w	r2, r7, #20
 8001772:	2301      	movs	r3, #1
 8001774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001776:	f7ff ff43 	bl	8001600 <OD_get_u32>
 800177a:	4603      	mov	r3, r0
 800177c:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 800177e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <CO_HBconsumer_init+0xa6>
 800178c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800178e:	f7ff ff12 	bl	80015b6 <OD_getIndex>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001798:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 800179a:	f06f 030b 	mvn.w	r3, #11
 800179e:	e04d      	b.n	800183c <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	0c1b      	lsrs	r3, r3, #16
 80017a4:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 80017aa:	8b7b      	ldrh	r3, [r7, #26]
 80017ac:	7f7a      	ldrb	r2, [r7, #29]
 80017ae:	7ff9      	ldrb	r1, [r7, #31]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f84b 	bl	800184c <CO_HBconsumer_initEntry>
 80017b6:	4603      	mov	r3, r0
 80017b8:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 80017ba:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d011      	beq.n	80017e6 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 80017c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <CO_HBconsumer_init+0xe2>
 80017c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017ca:	f7ff fef4 	bl	80015b6 <OD_getIndex>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d4:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 80017d6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80017da:	f113 0f0c 	cmn.w	r3, #12
 80017de:	d002      	beq.n	80017e6 <CO_HBconsumer_init+0xf2>
                return ret;
 80017e0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80017e4:	e02a      	b.n	800183c <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	3301      	adds	r3, #1
 80017ea:	77fb      	strb	r3, [r7, #31]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	7a1b      	ldrb	r3, [r3, #8]
 80017f0:	7ffa      	ldrb	r2, [r7, #31]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3b8      	bcc.n	8001768 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <CO_HBconsumer_init+0x150>)
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <CO_HBconsumer_init+0x154>)
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3320      	adds	r3, #32
 800180c:	4619      	mov	r1, r3
 800180e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001810:	f7ff fee2 	bl	80015d8 <OD_extension_init>
 8001814:	4603      	mov	r3, r0
 8001816:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001818:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00c      	beq.n	800183a <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <CO_HBconsumer_init+0x140>
 8001826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001828:	f7ff fec5 	bl	80015b6 <OD_getIndex>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001832:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001834:	f06f 030b 	mvn.w	r3, #11
 8001838:	e000      	b.n	800183c <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	08002045 	.word	0x08002045
 8001848:	08001667 	.word	0x08001667

0800184c <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b08d      	sub	sp, #52	; 0x34
 8001850:	af04      	add	r7, sp, #16
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4603      	mov	r3, r0
 800185c:	70fb      	strb	r3, [r7, #3]
 800185e:	460b      	mov	r3, r1
 8001860:	70bb      	strb	r3, [r7, #2]
 8001862:	4613      	mov	r3, r2
 8001864:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001866:	2300      	movs	r3, #0
 8001868:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <CO_HBconsumer_initEntry+0x2e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7a1b      	ldrb	r3, [r3, #8]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	429a      	cmp	r2, r3
 8001878:	d302      	bcc.n	8001880 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e077      	b.n	8001970 <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8001880:	883b      	ldrh	r3, [r7, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d024      	beq.n	80018d0 <CO_HBconsumer_initEntry+0x84>
 8001886:	78bb      	ldrb	r3, [r7, #2]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d021      	beq.n	80018d0 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800188c:	2300      	movs	r3, #0
 800188e:	77bb      	strb	r3, [r7, #30]
 8001890:	e019      	b.n	80018c6 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	7fbb      	ldrb	r3, [r7, #30]
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	f107 0408 	add.w	r4, r7, #8
 80018a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	7fbb      	ldrb	r3, [r7, #30]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d008      	beq.n	80018c0 <CO_HBconsumer_initEntry+0x74>
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <CO_HBconsumer_initEntry+0x74>
 80018b4:	7a3b      	ldrb	r3, [r7, #8]
 80018b6:	78ba      	ldrb	r2, [r7, #2]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d101      	bne.n	80018c0 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 80018bc:	23f4      	movs	r3, #244	; 0xf4
 80018be:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80018c0:	7fbb      	ldrb	r3, [r7, #30]
 80018c2:	3301      	adds	r3, #1
 80018c4:	77bb      	strb	r3, [r7, #30]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7a1b      	ldrb	r3, [r3, #8]
 80018ca:	7fba      	ldrb	r2, [r7, #30]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d3e0      	bcc.n	8001892 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 80018d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d149      	bne.n	800196c <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	78ba      	ldrb	r2, [r7, #2]
 80018e8:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 80018ea:	883b      	ldrh	r3, [r7, #0]
 80018ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	22ff      	movs	r2, #255	; 0xff
 80018fe:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00d      	beq.n	800192a <CO_HBconsumer_initEntry+0xde>
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001920:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2201      	movs	r2, #1
 8001926:	709a      	strb	r2, [r3, #2]
 8001928:	e007      	b.n	800193a <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2200      	movs	r2, #0
 8001938:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8001954:	8bba      	ldrh	r2, [r7, #28]
 8001956:	4c08      	ldr	r4, [pc, #32]	; (8001978 <CO_HBconsumer_initEntry+0x12c>)
 8001958:	9402      	str	r4, [sp, #8]
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	2300      	movs	r3, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001964:	f006 feb4 	bl	80086d0 <CO_CANrxBufferInit>
 8001968:	4603      	mov	r3, r0
 800196a:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 800196c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3724      	adds	r7, #36	; 0x24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	0800162b 	.word	0x0800162b

0800197c <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	; 0x38
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 800198a:	2301      	movs	r3, #1
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 800198e:	2301      	movs	r3, #1
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d077      	beq.n	8001a88 <CO_HBconsumer_process+0x10c>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d073      	beq.n	8001a88 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019a6:	e068      	b.n	8001a7a <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	789b      	ldrb	r3, [r3, #2]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d055      	beq.n	8001a6e <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d022      	beq.n	8001a10 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d112      	bne.n	80019fa <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	789b      	ldrb	r3, [r3, #2]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d10a      	bne.n	80019f2 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	f248 1330 	movw	r3, #33072	; 0x8130
 80019ea:	221c      	movs	r2, #28
 80019ec:	2101      	movs	r1, #1
 80019ee:	f7ff fd17 	bl	8001420 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2201      	movs	r2, #1
 80019f6:	709a      	strb	r2, [r3, #2]
 80019f8:	e007      	b.n	8001a0a <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2202      	movs	r2, #2
 80019fe:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	789b      	ldrb	r3, [r3, #2]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d11c      	bne.n	8001a52 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	441a      	add	r2, r3
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d310      	bcc.n	8001a52 <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	f248 1330 	movw	r3, #33072	; 0x8130
 8001a3e:	221b      	movs	r2, #27
 8001a40:	2101      	movs	r1, #1
 8001a42:	f7ff fced 	bl	8001420 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	22ff      	movs	r2, #255	; 0xff
 8001a4a:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	789b      	ldrb	r3, [r3, #2]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d001      	beq.n	8001a5e <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d003      	beq.n	8001a70 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6c:	e000      	b.n	8001a70 <CO_HBconsumer_process+0xf4>
                continue;
 8001a6e:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a74:	3301      	adds	r3, #1
 8001a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	7a1b      	ldrb	r3, [r3, #8]
 8001a7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d390      	bcc.n	80019a8 <CO_HBconsumer_process+0x2c>
 8001a86:	e028      	b.n	8001ada <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <CO_HBconsumer_process+0x11a>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d021      	beq.n	8001ada <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001a96:	2300      	movs	r3, #0
 8001a98:	77fb      	strb	r3, [r7, #31]
 8001a9a:	e015      	b.n	8001ac8 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	7ffb      	ldrb	r3, [r7, #31]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	22ff      	movs	r2, #255	; 0xff
 8001aac:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	789b      	ldrb	r3, [r3, #2]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	77fb      	strb	r3, [r7, #31]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	7a1b      	ldrb	r3, [r3, #8]
 8001acc:	7ffa      	ldrb	r2, [r7, #31]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d3e4      	bcc.n	8001a9c <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d114      	bne.n	8001b0c <CO_HBconsumer_process+0x190>
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d011      	beq.n	8001b0c <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	2300      	movs	r3, #0
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2300      	movs	r3, #0
 8001af2:	221b      	movs	r2, #27
 8001af4:	2100      	movs	r1, #0
 8001af6:	f7ff fc93 	bl	8001420 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	221c      	movs	r2, #28
 8001b06:	2100      	movs	r1, #0
 8001b08:	f7ff fc8a 	bl	8001420 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b10:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b16:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	615a      	str	r2, [r3, #20]
}
 8001b1e:	bf00      	nop
 8001b20:	3730      	adds	r7, #48	; 0x30
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001b34:	81fb      	strh	r3, [r7, #14]
 8001b36:	89fb      	ldrh	r3, [r7, #14]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <OD_getIndex+0x14>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	e000      	b.n	8001b5a <OD_getIndex+0x16>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <OD_extension_init>:
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <OD_extension_init+0x14>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e003      	b.n	8001b82 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <OD_get_u16>:
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af02      	add	r7, sp, #8
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001b9e:	7af9      	ldrb	r1, [r7, #11]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 fc89 	bl	80024c0 <OD_get_value>
 8001bae:	4603      	mov	r3, r0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	08db      	lsrs	r3, r3, #3
 8001bc8:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	d807      	bhi.n	8001bf4 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	5cd2      	ldrb	r2, [r2, r3]
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	4013      	ands	r3, r2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <CO_isError+0x40>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <CO_isError+0x42>
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <CO_getErrorRegister+0x1e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <CO_getErrorRegister+0x1e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	e000      	b.n	8001c26 <CO_getErrorRegister+0x20>
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8001c32:	b480      	push	{r7}
 8001c34:	b087      	sub	sp, #28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	791b      	ldrb	r3, [r3, #4]
 8001c40:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	3305      	adds	r3, #5
 8001c46:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d10a      	bne.n	8001c74 <CO_NMT_receive+0x42>
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <CO_NMT_receive+0x3c>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	78db      	ldrb	r3, [r3, #3]
 8001c68:	7bba      	ldrb	r2, [r7, #14]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d102      	bne.n	8001c74 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00c      	beq.n	8001cae <OD_write_1017+0x2e>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	7c5b      	ldrb	r3, [r3, #17]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d108      	bne.n	8001cae <OD_write_1017+0x2e>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d102      	bne.n	8001cae <OD_write_1017+0x2e>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8001cae:	2309      	movs	r3, #9
 8001cb0:	e017      	b.n	8001ce2 <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001cb8:	68b8      	ldr	r0, [r7, #8]
 8001cba:	f7ff ff34 	bl	8001b26 <CO_getUint16>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fa0a 	bl	80020f4 <OD_writeOriginal>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <CO_NMT_init+0x30>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <CO_NMT_init+0x30>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <CO_NMT_init+0x30>
 8001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	e098      	b.n	8001e54 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001d22:	222c      	movs	r2, #44	; 0x2c
 8001d24:	2100      	movs	r1, #0
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f00c fe80 	bl	800ea2c <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8c3a      	ldrh	r2, [r7, #32]
 8001d42:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001d4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001d5a:	f107 0214 	add.w	r2, r7, #20
 8001d5e:	2301      	movs	r3, #1
 8001d60:	2100      	movs	r1, #0
 8001d62:	68b8      	ldr	r0, [r7, #8]
 8001d64:	f7ff ff13 	bl	8001b8e <OD_get_u16>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001d6c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00c      	beq.n	8001d8e <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <CO_NMT_init+0x9c>
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff fee2 	bl	8001b44 <OD_getIndex>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d86:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001d88:	f06f 030b 	mvn.w	r3, #11
 8001d8c:	e062      	b.n	8001e54 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 8001d8e:	8abb      	ldrh	r3, [r7, #20]
 8001d90:	461a      	mov	r2, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	fb03 f202 	mul.w	r2, r3, r2
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <CO_NMT_init+0x170>)
 8001da8:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4a2c      	ldr	r2, [pc, #176]	; (8001e60 <CO_NMT_init+0x174>)
 8001dae:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3310      	adds	r3, #16
 8001db4:	4619      	mov	r1, r3
 8001db6:	68b8      	ldr	r0, [r7, #8]
 8001db8:	f7ff fed5 	bl	8001b66 <OD_extension_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001dc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00c      	beq.n	8001de2 <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <CO_NMT_init+0xf0>
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f7ff feb8 	bl	8001b44 <OD_getIndex>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dda:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001ddc:	f06f 030b 	mvn.w	r3, #11
 8001de0:	e038      	b.n	8001e54 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d903      	bls.n	8001df6 <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001df6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001df8:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <CO_NMT_init+0x178>)
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	2300      	movs	r3, #0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e0c:	f006 fc60 	bl	80086d0 <CO_CANrxBufferInit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <CO_NMT_init+0x136>
        return ret;
 8001e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e20:	e018      	b.n	8001e54 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001e28:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001e2a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2300      	movs	r3, #0
 8001e36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e38:	f006 fca8 	bl	800878c <CO_CANtxBufferInit>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e001      	b.n	8001e54 <CO_NMT_init+0x168>
    }

    return ret;
 8001e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	08002045 	.word	0x08002045
 8001e60:	08001c81 	.word	0x08001c81
 8001e64:	08001c33 	.word	0x08001c33

08001e68 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8001e80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d204      	bcs.n	8001ea4 <CO_NMT_process+0x3c>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	e000      	b.n	8001ea6 <CO_NMT_process+0x3e>
 8001ea4:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10e      	bne.n	8001ece <CO_NMT_process+0x66>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d029      	beq.n	8001f0c <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ec6:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d01e      	beq.n	8001f0c <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	7ffa      	ldrb	r2, [r7, #31]
 8001ed4:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f006 fccd 	bl	8008880 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001ee6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	889b      	ldrh	r3, [r3, #4]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <CO_NMT_process+0x96>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e000      	b.n	8001f00 <CO_NMT_process+0x98>
 8001efe:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001f00:	77fb      	strb	r3, [r7, #31]
 8001f02:	e003      	b.n	8001f0c <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	7ffa      	ldrb	r2, [r7, #31]
 8001f10:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	789b      	ldrb	r3, [r3, #2]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d025      	beq.n	8001f66 <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	2b82      	cmp	r3, #130	; 0x82
 8001f20:	d01a      	beq.n	8001f58 <CO_NMT_process+0xf0>
 8001f22:	2b82      	cmp	r3, #130	; 0x82
 8001f24:	dc1b      	bgt.n	8001f5e <CO_NMT_process+0xf6>
 8001f26:	2b81      	cmp	r3, #129	; 0x81
 8001f28:	d013      	beq.n	8001f52 <CO_NMT_process+0xea>
 8001f2a:	2b81      	cmp	r3, #129	; 0x81
 8001f2c:	dc17      	bgt.n	8001f5e <CO_NMT_process+0xf6>
 8001f2e:	2b80      	cmp	r3, #128	; 0x80
 8001f30:	d00c      	beq.n	8001f4c <CO_NMT_process+0xe4>
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	dc13      	bgt.n	8001f5e <CO_NMT_process+0xf6>
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d002      	beq.n	8001f40 <CO_NMT_process+0xd8>
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d003      	beq.n	8001f46 <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 8001f3e:	e00e      	b.n	8001f5e <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 8001f40:	2305      	movs	r3, #5
 8001f42:	77fb      	strb	r3, [r7, #31]
                break;
 8001f44:	e00c      	b.n	8001f60 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 8001f46:	2304      	movs	r3, #4
 8001f48:	77fb      	strb	r3, [r7, #31]
                break;
 8001f4a:	e009      	b.n	8001f60 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 8001f4c:	237f      	movs	r3, #127	; 0x7f
 8001f4e:	77fb      	strb	r3, [r7, #31]
                break;
 8001f50:	e006      	b.n	8001f60 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	77bb      	strb	r3, [r7, #30]
                break;
 8001f56:	e003      	b.n	8001f60 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	77bb      	strb	r3, [r7, #30]
                break;
 8001f5c:	e000      	b.n	8001f60 <CO_NMT_process+0xf8>
                break;
 8001f5e:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	889b      	ldrh	r3, [r3, #4]
 8001f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01c      	beq.n	8001fac <CO_NMT_process+0x144>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	2112      	movs	r1, #18
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe1d 	bl	8001bb8 <CO_isError>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	211b      	movs	r1, #27
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe14 	bl	8001bb8 <CO_isError>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d108      	bne.n	8001fa8 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	211c      	movs	r1, #28
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fe0b 	bl	8001bb8 <CO_isError>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <CO_NMT_process+0x146>
 8001fac:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001fae:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <CO_NMT_process+0x170>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fe20 	bl	8001c06 <CO_getErrorRegister>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	889b      	ldrh	r3, [r3, #4]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <CO_NMT_process+0x170>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <CO_NMT_process+0x172>
 8001fd8:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001fda:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8001fdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d110      	bne.n	8002006 <CO_NMT_process+0x19e>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <CO_NMT_process+0x188>
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <CO_NMT_process+0x198>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e000      	b.n	8002002 <CO_NMT_process+0x19a>
 8002000:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8002002:	77fb      	strb	r3, [r7, #31]
 8002004:	e010      	b.n	8002028 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	889b      	ldrh	r3, [r3, #4]
 800200a:	b21b      	sxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0b      	bge.n	8002028 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 8002010:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002014:	2b7f      	cmp	r3, #127	; 0x7f
 8002016:	d107      	bne.n	8002028 <CO_NMT_process+0x1c0>
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d104      	bne.n	8002028 <CO_NMT_process+0x1c0>
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8002024:	2305      	movs	r3, #5
 8002026:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	7ffa      	ldrb	r2, [r7, #31]
 800202c:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <CO_NMT_process+0x1d2>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	7ffa      	ldrb	r2, [r7, #31]
 8002038:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 800203a:	7fbb      	ldrb	r3, [r7, #30]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <OD_readOriginal+0x20>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <OD_readOriginal+0x20>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8002064:	2309      	movs	r3, #9
 8002066:	e041      	b.n	80020ec <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 800207a:	230e      	movs	r3, #14
 800207c:	e036      	b.n	80020ec <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <OD_readOriginal+0x4e>
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	d922      	bls.n	80020d8 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	429a      	cmp	r2, r3
 800209a:	d801      	bhi.n	80020a0 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 800209c:	2309      	movs	r3, #9
 800209e:	e025      	b.n	80020ec <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d90a      	bls.n	80020d2 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	441a      	add	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80020cc:	23ff      	movs	r3, #255	; 0xff
 80020ce:	75fb      	strb	r3, [r7, #23]
 80020d0:	e002      	b.n	80020d8 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	68b8      	ldr	r0, [r7, #8]
 80020de:	f00c fc7d 	bl	800e9dc <memcpy>

    *countRead = dataLenToCopy;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	601a      	str	r2, [r3, #0]
    return returnCode;
 80020e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <OD_writeOriginal+0x20>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <OD_writeOriginal+0x20>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8002114:	2309      	movs	r3, #9
 8002116:	e047      	b.n	80021a8 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 800212a:	230e      	movs	r3, #14
 800212c:	e03c      	b.n	80021a8 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <OD_writeOriginal+0x4e>
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d922      	bls.n	8002188 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	429a      	cmp	r2, r3
 800214a:	d801      	bhi.n	8002150 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 800214c:	2309      	movs	r3, #9
 800214e:	e02b      	b.n	80021a8 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4413      	add	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	d90a      	bls.n	8002182 <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	441a      	add	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 800217c:	23ff      	movs	r3, #255	; 0xff
 800217e:	75fb      	strb	r3, [r7, #23]
 8002180:	e002      	b.n	8002188 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	429a      	cmp	r2, r3
 800218e:	d201      	bcs.n	8002194 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8002190:	230c      	movs	r3, #12
 8002192:	e009      	b.n	80021a8 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	68b9      	ldr	r1, [r7, #8]
 8002198:	69b8      	ldr	r0, [r7, #24]
 800219a:	f00c fc1f 	bl	800e9dc <memcpy>

    *countWritten = dataLenToCopy;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	601a      	str	r2, [r3, #0]
    return returnCode;
 80021a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 80021be:	2302      	movs	r3, #2
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 80021da:	2302      	movs	r3, #2
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <OD_find+0x1a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <OD_find+0x1e>
        return NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	e046      	b.n	8002294 <OD_find+0xac>
    }

    uint16_t min = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8002212:	e026      	b.n	8002262 <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8002214:	8afa      	ldrh	r2, [r7, #22]
 8002216:	8abb      	ldrh	r3, [r7, #20]
 8002218:	4413      	add	r3, r2
 800221a:	105b      	asrs	r3, r3, #1
 800221c:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	89fa      	ldrh	r2, [r7, #14]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	887a      	ldrh	r2, [r7, #2]
 8002236:	429a      	cmp	r2, r3
 8002238:	d101      	bne.n	800223e <OD_find+0x56>
            return entry;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	e02a      	b.n	8002294 <OD_find+0xac>
        }

        if (index < entry->index) {
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	429a      	cmp	r2, r3
 8002246:	d209      	bcs.n	800225c <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <OD_find+0x6e>
 800224e:	89fb      	ldrh	r3, [r7, #14]
 8002250:	3b01      	subs	r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	e000      	b.n	8002258 <OD_find+0x70>
 8002256:	89fb      	ldrh	r3, [r7, #14]
 8002258:	82bb      	strh	r3, [r7, #20]
 800225a:	e002      	b.n	8002262 <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	3301      	adds	r3, #1
 8002260:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8002262:	8afa      	ldrh	r2, [r7, #22]
 8002264:	8abb      	ldrh	r3, [r7, #20]
 8002266:	429a      	cmp	r2, r3
 8002268:	d3d4      	bcc.n	8002214 <OD_find+0x2c>
        }
    }

    if (min == max) {
 800226a:	8afa      	ldrh	r2, [r7, #22]
 800226c:	8abb      	ldrh	r3, [r7, #20]
 800226e:	429a      	cmp	r2, r3
 8002270:	d10f      	bne.n	8002292 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	8afa      	ldrh	r2, [r7, #22]
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	887a      	ldrh	r2, [r7, #2]
 800228a:	429a      	cmp	r2, r3
 800228c:	d101      	bne.n	8002292 <OD_find+0xaa>
            return entry;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	e000      	b.n	8002294 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b08d      	sub	sp, #52	; 0x34
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	460b      	mov	r3, r1
 80022ae:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <OD_getSub+0x1e>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <OD_getSub+0x22>
 80022be:	2305      	movs	r3, #5
 80022c0:	e0d2      	b.n	8002468 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <OD_getSub+0x2c>
 80022c8:	2309      	movs	r3, #9
 80022ca:	e0cd      	b.n	8002468 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	78db      	ldrb	r3, [r3, #3]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d050      	beq.n	800237e <OD_getSub+0xde>
 80022dc:	2b03      	cmp	r3, #3
 80022de:	f300 808c 	bgt.w	80023fa <OD_getSub+0x15a>
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d002      	beq.n	80022ec <OD_getSub+0x4c>
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d015      	beq.n	8002316 <OD_getSub+0x76>
 80022ea:	e086      	b.n	80023fa <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <OD_getSub+0x56>
 80022f2:	230e      	movs	r3, #14
 80022f4:	e0b8      	b.n	8002468 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	791a      	ldrb	r2, [r3, #4]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	609a      	str	r2, [r3, #8]
        break;
 8002314:	e073      	b.n	80023fe <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	789b      	ldrb	r3, [r3, #2]
 800231a:	7afa      	ldrb	r2, [r7, #11]
 800231c:	429a      	cmp	r2, r3
 800231e:	d301      	bcc.n	8002324 <OD_getSub+0x84>
 8002320:	230e      	movs	r3, #14
 8002322:	e0a1      	b.n	8002468 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	7a1a      	ldrb	r2, [r3, #8]
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	2201      	movs	r2, #1
 8002344:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8002346:	e05a      	b.n	80023fe <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	7a5a      	ldrb	r2, [r3, #9]
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	7afa      	ldrb	r2, [r7, #11]
 8002362:	3a01      	subs	r2, #1
 8002364:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4413      	add	r3, r2
 800236c:	e000      	b.n	8002370 <OD_getSub+0xd0>
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002372:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	609a      	str	r2, [r3, #8]
        break;
 800237c:	e03f      	b.n	80023fe <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002388:	2300      	movs	r3, #0
 800238a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800238e:	e01c      	b.n	80023ca <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8002390:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	461a      	mov	r2, r3
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	4413      	add	r3, r2
 80023a2:	791b      	ldrb	r3, [r3, #4]
 80023a4:	7afa      	ldrb	r2, [r7, #11]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d10a      	bne.n	80023c0 <OD_getSub+0x120>
                odo = &odoArr[i];
 80023aa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	461a      	mov	r2, r3
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	4413      	add	r3, r2
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 80023be:	e00a      	b.n	80023d6 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 80023c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023c4:	3301      	adds	r3, #1
 80023c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	789b      	ldrb	r3, [r3, #2]
 80023ce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3dc      	bcc.n	8002390 <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <OD_getSub+0x140>
 80023dc:	230e      	movs	r3, #14
 80023de:	e043      	b.n	8002468 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	795a      	ldrb	r2, [r3, #5]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	609a      	str	r2, [r3, #8]
        break;
 80023f8:	e001      	b.n	80023fe <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 80023fa:	2309      	movs	r3, #9
 80023fc:	e034      	b.n	8002468 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <OD_getSub+0x16c>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <OD_getSub+0x180>
        io->read = OD_readOriginal;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a19      	ldr	r2, [pc, #100]	; (8002474 <OD_getSub+0x1d4>)
 8002410:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a18      	ldr	r2, [pc, #96]	; (8002478 <OD_getSub+0x1d8>)
 8002416:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	e01c      	b.n	800245a <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <OD_getSub+0x192>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	e000      	b.n	8002434 <OD_getSub+0x194>
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <OD_getSub+0x1aa>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	e000      	b.n	800244c <OD_getSub+0x1ac>
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	2200      	movs	r2, #0
 800245e:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	7afa      	ldrb	r2, [r7, #11]
 8002464:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3734      	adds	r7, #52	; 0x34
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	08002045 	.word	0x08002045
 8002478:	080020f5 	.word	0x080020f5
 800247c:	080021b1 	.word	0x080021b1
 8002480:	080021cd 	.word	0x080021cd

08002484 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db03      	blt.n	800249e <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b19      	cmp	r3, #25
 800249c:	dd02      	ble.n	80024a4 <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <OD_getSDOabCode+0x38>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	e004      	b.n	80024ae <OD_getSDOabCode+0x2a>
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <OD_getSDOabCode+0x38>)
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	08010a74 	.word	0x08010a74

080024c0 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b08f      	sub	sp, #60	; 0x3c
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	460b      	mov	r3, r1
 80024ce:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <OD_get_value+0x1a>
 80024d6:	2309      	movs	r3, #9
 80024d8:	e024      	b.n	8002524 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80024e4:	f107 0214 	add.w	r2, r7, #20
 80024e8:	7af9      	ldrb	r1, [r7, #11]
 80024ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff fed7 	bl	80022a0 <OD_getSub>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 80024f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <OD_get_value+0x46>
 8002500:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002504:	e00e      	b.n	8002524 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <OD_get_value+0x54>
 8002510:	230b      	movs	r3, #11
 8002512:	e007      	b.n	8002524 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8002514:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002520:	47a0      	blx	r4
 8002522:	4603      	mov	r3, r0
}
 8002524:	4618      	mov	r0, r3
 8002526:	373c      	adds	r7, #60	; 0x3c
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}

0800252c <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b08f      	sub	sp, #60	; 0x3c
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	460b      	mov	r3, r1
 800253a:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8002546:	f107 0214 	add.w	r2, r7, #20
 800254a:	7af9      	ldrb	r1, [r7, #11]
 800254c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff fea6 	bl	80022a0 <OD_getSub>
 8002554:	4603      	mov	r3, r0
 8002556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 800255a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <OD_set_value+0x3c>
 8002562:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002566:	e00e      	b.n	8002586 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <OD_set_value+0x4a>
 8002572:	230b      	movs	r3, #11
 8002574:	e007      	b.n	8002586 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8002576:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002582:	47a0      	blx	r4
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	373c      	adds	r7, #60	; 0x3c
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}

0800258e <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b08e      	sub	sp, #56	; 0x38
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	460b      	mov	r3, r1
 800259c:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 80025a4:	f107 0214 	add.w	r2, r7, #20
 80025a8:	7af9      	ldrb	r1, [r7, #11]
 80025aa:	2301      	movs	r3, #1
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fe77 	bl	80022a0 <OD_getSub>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 80025b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d116      	bne.n	80025ee <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <OD_getPtr+0x42>
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 80025d0:	2309      	movs	r3, #9
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	e00a      	b.n	80025ee <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <OD_getPtr+0x60>
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d002      	beq.n	80025ee <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 80025e8:	230b      	movs	r3, #11
 80025ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <OD_getPtr+0x6e>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80025fa:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 80025fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <OD_getPtr+0x7c>
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	e000      	b.n	800260c <OD_getPtr+0x7e>
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3738      	adds	r7, #56	; 0x38
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 800263e:	81fb      	strh	r3, [r7, #14]
 8002640:	89fb      	ldrh	r3, [r7, #14]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
 8002674:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	2304      	movs	r3, #4
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <OD_getIndex+0x14>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	e000      	b.n	800269e <OD_getIndex+0x16>
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <OD_extension_init>:
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <OD_extension_init+0x14>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e003      	b.n	80026c6 <OD_extension_init+0x1c>
    entry->extension = extension;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <OD_get_u8>:
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af02      	add	r7, sp, #8
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	460b      	mov	r3, r1
 80026e0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80026e2:	7af9      	ldrb	r1, [r7, #11]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff fee7 	bl	80024c0 <OD_get_value>
 80026f2:	4603      	mov	r3, r0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <OD_get_u16>:
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	460b      	mov	r3, r1
 800270a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800270c:	7af9      	ldrb	r1, [r7, #11]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2302      	movs	r3, #2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fed2 	bl	80024c0 <OD_get_value>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <OD_get_u32>:
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	460b      	mov	r3, r1
 8002734:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002736:	7af9      	ldrb	r1, [r7, #11]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2304      	movs	r3, #4
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff febd 	bl	80024c0 <OD_get_value>
 8002746:	4603      	mov	r3, r0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <OD_write_dummy+0x1a>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <OD_read_dummy+0x20>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <OD_read_dummy+0x20>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002798:	2309      	movs	r3, #9
 800279a:	e010      	b.n	80027be <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d902      	bls.n	80027ac <OD_read_dummy+0x34>
        count = stream->dataLength;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	2100      	movs	r1, #0
 80027b0:	68b8      	ldr	r0, [r7, #8]
 80027b2:	f00c f93b 	bl	800ea2c <memset>

    *countRead = count;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b092      	sub	sp, #72	; 0x48
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	0c1b      	lsrs	r3, r3, #16
 80027dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 80027ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80027f2:	08db      	lsrs	r3, r3, #3
 80027f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 80027f8:	79fa      	ldrb	r2, [r7, #7]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	3310      	adds	r3, #16
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 800280a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800280e:	2b08      	cmp	r3, #8
 8002810:	d901      	bls.n	8002816 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8002812:	2307      	movs	r3, #7
 8002814:	e090      	b.n	8002938 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002816:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800281a:	2b1f      	cmp	r3, #31
 800281c:	d81a      	bhi.n	8002854 <PDOconfigMap+0x8c>
 800281e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8002826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 800282a:	2214      	movs	r2, #20
 800282c:	2100      	movs	r1, #0
 800282e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002830:	f00c f8fc 	bl	800ea2c <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8002834:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8002844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002846:	4a3e      	ldr	r2, [pc, #248]	; (8002940 <PDOconfigMap+0x178>)
 8002848:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 800284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284c:	4a3d      	ldr	r2, [pc, #244]	; (8002944 <PDOconfigMap+0x17c>)
 800284e:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e071      	b.n	8002938 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8002854:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002858:	4619      	mov	r1, r3
 800285a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800285c:	f7ff fcc4 	bl	80021e8 <OD_find>
 8002860:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002862:	f107 0214 	add.w	r2, r7, #20
 8002866:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 800286a:	2300      	movs	r3, #0
 800286c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800286e:	f7ff fd17 	bl	80022a0 <OD_getSub>
 8002872:	4603      	mov	r3, r0
 8002874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8002878:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <PDOconfigMap+0xbe>
        return odRet;
 8002880:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002884:	e058      	b.n	8002938 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <PDOconfigMap+0xc8>
 800288c:	2308      	movs	r3, #8
 800288e:	e000      	b.n	8002892 <PDOconfigMap+0xca>
 8002890:	2304      	movs	r3, #4
 8002892:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8002896:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800289a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800289e:	4013      	ands	r3, r2
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 80028a6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d201      	bcs.n	80028c0 <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 80028bc:	2306      	movs	r3, #6
 80028be:	e03b      	b.n	8002938 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 80028c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c2:	461d      	mov	r5, r3
 80028c4:	f107 0414 	add.w	r4, r7, #20
 80028c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80028d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 80028d4:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80028d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028da:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d129      	bne.n	8002936 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 80028e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80028e6:	2b1f      	cmp	r3, #31
 80028e8:	d81f      	bhi.n	800292a <PDOconfigMap+0x162>
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01b      	beq.n	800292a <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80028fa:	08db      	lsrs	r3, r3, #3
 80028fc:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 80028fe:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 8002900:	3308      	adds	r3, #8
 8002902:	440b      	add	r3, r1
 8002904:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	323c      	adds	r2, #60	; 0x3c
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800290e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	2201      	movs	r2, #1
 8002918:	409a      	lsls	r2, r3
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	b2d1      	uxtb	r1, r2
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	460a      	mov	r2, r1
 8002924:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8002928:	e005      	b.n	8002936 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	323c      	adds	r2, #60	; 0x3c
 8002930:	2100      	movs	r1, #0
 8002932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3748      	adds	r7, #72	; 0x48
 800293c:	46bd      	mov	sp, r7
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	08002779 	.word	0x08002779
 8002944:	08002751 	.word	0x08002751

08002948 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 800295e:	f107 021b 	add.w	r2, r7, #27
 8002962:	2301      	movs	r3, #1
 8002964:	2100      	movs	r1, #0
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff feb3 	bl	80026d2 <OD_get_u8>
 800296c:	4603      	mov	r3, r0
 800296e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002972:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00c      	beq.n	8002994 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fe81 	bl	8002688 <OD_getIndex>
 8002986:	4603      	mov	r3, r0
 8002988:	021a      	lsls	r2, r3, #8
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800298e:	f06f 030b 	mvn.w	r3, #11
 8002992:	e082      	b.n	8002a9a <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e05e      	b.n	8002a5a <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800299c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	3310      	adds	r3, #16
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 80029b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029b8:	3301      	adds	r3, #1
 80029ba:	b2d9      	uxtb	r1, r3
 80029bc:	f107 0214 	add.w	r2, r7, #20
 80029c0:	2301      	movs	r3, #1
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff feaf 	bl	8002726 <OD_get_u32>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 80029ce:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80029d2:	2b0e      	cmp	r3, #14
 80029d4:	d03b      	beq.n	8002a4e <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 80029d6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00f      	beq.n	80029fe <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d009      	beq.n	80029f8 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fe4f 	bl	8002688 <OD_getIndex>
 80029ea:	4603      	mov	r3, r0
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029f2:	431a      	orrs	r2, r3
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80029f8:	f06f 030b 	mvn.w	r3, #11
 80029fc:	e04d      	b.n	8002a9a <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 80029fe:	6979      	ldr	r1, [r7, #20]
 8002a00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7ff fedc 	bl	80027c8 <PDOconfigMap>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002a16:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <PDO_initMapping+0xf0>
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a36:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002a38:	7efb      	ldrb	r3, [r7, #27]
 8002a3a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d206      	bcs.n	8002a50 <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	4413      	add	r3, r2
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	e000      	b.n	8002a50 <PDO_initMapping+0x108>
            continue;
 8002a4e:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a54:	3301      	adds	r3, #1
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	d99c      	bls.n	800299c <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d805      	bhi.n	8002a74 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <PDO_initMapping+0x13a>
 8002a6e:	7efb      	ldrb	r3, [r7, #27]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <PDO_initMapping+0x13a>
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002a92:	7efa      	ldrb	r2, [r7, #27]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b08e      	sub	sp, #56	; 0x38
 8002aa6:	af02      	add	r7, sp, #8
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <OD_write_PDO_mapping+0x28>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <OD_write_PDO_mapping+0x28>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	7c5b      	ldrb	r3, [r3, #17]
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d901      	bls.n	8002ace <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 8002aca:	2309      	movs	r3, #9
 8002acc:	e086      	b.n	8002bdc <OD_write_PDO_mapping+0x13a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d107      	bne.n	8002aec <OD_write_PDO_mapping+0x4a>
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	7b5b      	ldrb	r3, [r3, #13]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <OD_write_PDO_mapping+0x4e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	7c5b      	ldrb	r3, [r3, #17]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002aec:	2302      	movs	r3, #2
 8002aee:	e075      	b.n	8002bdc <OD_write_PDO_mapping+0x13a>
    }

    if (stream->subIndex == 0) {
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	7c5b      	ldrb	r3, [r3, #17]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d14d      	bne.n	8002b94 <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002af8:	68b8      	ldr	r0, [r7, #8]
 8002afa:	f7ff fd8b 	bl	8002614 <CO_getUint8>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        size_t pdoDataLength = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002b08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d901      	bls.n	8002b14 <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 8002b10:	2307      	movs	r3, #7
 8002b12:	e063      	b.n	8002bdc <OD_write_PDO_mapping+0x13a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b1a:	e01e      	b.n	8002b5a <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002b1c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3310      	adds	r3, #16
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	4413      	add	r3, r2
 8002b2e:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d901      	bls.n	8002b48 <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002b44:	2306      	movs	r3, #6
 8002b46:	e049      	b.n	8002bdc <OD_write_PDO_mapping+0x13a>
            }
            pdoDataLength += mappedLength;
 8002b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002b50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b54:	3301      	adds	r3, #1
 8002b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b5a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002b5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3da      	bcc.n	8002b1c <OD_write_PDO_mapping+0x7a>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d901      	bls.n	8002b70 <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	e035      	b.n	8002bdc <OD_write_PDO_mapping+0x13a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <OD_write_PDO_mapping+0xe0>
 8002b76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 8002b7e:	230f      	movs	r3, #15
 8002b80:	e02c      	b.n	8002bdc <OD_write_PDO_mapping+0x13a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002b90:	735a      	strb	r2, [r3, #13]
 8002b92:	e01c      	b.n	8002bce <OD_write_PDO_mapping+0x12c>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 8002b94:	68b8      	ldr	r0, [r7, #8]
 8002b96:	f7ff fd5a 	bl	800264e <CO_getUint32>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	7c5b      	ldrb	r3, [r3, #17]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bb6:	f7ff fe07 	bl	80027c8 <PDOconfigMap>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8002bc0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <OD_write_PDO_mapping+0x12c>
            return odRet;
 8002bc8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002bcc:	e006      	b.n	8002bdc <OD_write_PDO_mapping+0x13a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff fa8d 	bl	80020f4 <OD_writeOriginal>
 8002bda:	4603      	mov	r3, r0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3730      	adds	r7, #48	; 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fa23 	bl	8002044 <OD_readOriginal>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8002c02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d134      	bne.n	8002c74 <OD_read_PDO_commParam+0x90>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	7c5b      	ldrb	r3, [r3, #17]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d130      	bne.n	8002c74 <OD_read_PDO_commParam+0x90>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d12c      	bne.n	8002c74 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002c20:	68b8      	ldr	r0, [r7, #8]
 8002c22:	f7ff fd14 	bl	800264e <CO_getUint32>
 8002c26:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c30:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 8002c32:	8a7b      	ldrh	r3, [r7, #18]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d011      	beq.n	8002c5c <OD_read_PDO_commParam+0x78>
 8002c38:	8a7a      	ldrh	r2, [r7, #18]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002c40:	4619      	mov	r1, r3
 8002c42:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002c46:	400b      	ands	r3, r1
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d107      	bne.n	8002c5c <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	0c1b      	lsrs	r3, r3, #16
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <OD_read_PDO_commParam+0x88>
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c6a:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8002c6c:	69f9      	ldr	r1, [r7, #28]
 8002c6e:	68b8      	ldr	r0, [r7, #8]
 8002c70:	f7ff fcfb 	bl	800266a <CO_setUint32>
    }

    return returnCode;
 8002c74:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	791b      	ldrb	r3, [r3, #4]
 8002c96:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	3305      	adds	r3, #5
 8002c9c:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002ca4:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d03e      	beq.n	8002d2c <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	7b1b      	ldrb	r3, [r3, #12]
 8002cb2:	7cfa      	ldrb	r2, [r7, #19]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d334      	bcc.n	8002d22 <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	7b1b      	ldrb	r3, [r3, #12]
 8002cbc:	7cfa      	ldrb	r2, [r7, #19]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d105      	bne.n	8002cce <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 8002cc2:	7ffb      	ldrb	r3, [r7, #31]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <CO_PDO_receive+0x58>
 8002cc8:	230b      	movs	r3, #11
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e004      	b.n	8002cd8 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 8002cce:	7ffb      	ldrb	r3, [r7, #31]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <CO_PDO_receive+0x58>
 8002cd4:	230d      	movs	r3, #13
 8002cd6:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <CO_PDO_receive+0x80>
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 8002d00:	7fbb      	ldrb	r3, [r7, #30]
 8002d02:	332a      	adds	r3, #42	; 0x2a
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4413      	add	r3, r2
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f00b fe64 	bl	800e9dc <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002d14:	7fba      	ldrb	r2, [r7, #30]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	3252      	adds	r2, #82	; 0x52
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002d20:	e004      	b.n	8002d2c <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002d28:	230c      	movs	r3, #12
 8002d2a:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	7ffa      	ldrb	r2, [r7, #31]
 8002d30:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 8002d34:	bf00      	nop
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b092      	sub	sp, #72	; 0x48
 8002d40:	af04      	add	r7, sp, #16
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <OD_write_14xx+0x26>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <OD_write_14xx+0x26>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <OD_write_14xx+0x26>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d901      	bls.n	8002d66 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002d62:	2309      	movs	r3, #9
 8002d64:	e0ff      	b.n	8002f66 <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002d70:	f107 0310 	add.w	r3, r7, #16
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f00b fe2f 	bl	800e9dc <memcpy>

    switch (stream->subIndex) {
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	7c5b      	ldrb	r3, [r3, #17]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	f000 80d4 	beq.w	8002f30 <OD_write_14xx+0x1f4>
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	f300 80e4 	bgt.w	8002f56 <OD_write_14xx+0x21a>
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d003      	beq.n	8002d9a <OD_write_14xx+0x5e>
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	f000 80a5 	beq.w	8002ee2 <OD_write_14xx+0x1a6>
 8002d98:	e0dd      	b.n	8002f56 <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	f7ff fc57 	bl	800264e <CO_getUint32>
 8002da0:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002daa:	86fb      	strh	r3, [r7, #54]	; 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	0fdb      	lsrs	r3, r3, #31
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <OD_write_14xx+0x234>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13d      	bne.n	8002e3c <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <OD_write_14xx+0x9e>
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <OD_write_14xx+0x9e>
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002dd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d130      	bne.n	8002e3c <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d026      	beq.n	8002e2e <OD_write_14xx+0xf2>
 8002de0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002de2:	2b7f      	cmp	r3, #127	; 0x7f
 8002de4:	d92a      	bls.n	8002e3c <OD_write_14xx+0x100>
 8002de6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dec:	d903      	bls.n	8002df6 <OD_write_14xx+0xba>
 8002dee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002df0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002df4:	d922      	bls.n	8002e3c <OD_write_14xx+0x100>
 8002df6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002df8:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002dfc:	d903      	bls.n	8002e06 <OD_write_14xx+0xca>
 8002dfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e04:	d31a      	bcc.n	8002e3c <OD_write_14xx+0x100>
 8002e06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e0c:	d903      	bls.n	8002e16 <OD_write_14xx+0xda>
 8002e0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e10:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002e14:	d312      	bcc.n	8002e3c <OD_write_14xx+0x100>
 8002e16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e18:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002e1c:	d303      	bcc.n	8002e26 <OD_write_14xx+0xea>
 8002e1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e24:	d30a      	bcc.n	8002e3c <OD_write_14xx+0x100>
 8002e26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e2c:	d806      	bhi.n	8002e3c <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <OD_write_14xx+0x104>
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	7b5b      	ldrb	r3, [r3, #13]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	e092      	b.n	8002f66 <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d105      	bne.n	8002e56 <OD_write_14xx+0x11a>
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002e50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d07e      	beq.n	8002f54 <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002e5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d108      	bne.n	8002e74 <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fbfb 	bl	800266a <CO_setUint32>
            }
            if (!valid) {
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <OD_write_14xx+0x142>
                CAN_ID = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	86fb      	strh	r3, [r7, #54]	; 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	6858      	ldr	r0, [r3, #4]
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002e88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <OD_write_14xx+0x238>)
 8002e8c:	9302      	str	r3, [sp, #8]
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002e9a:	f005 fc19 	bl	80086d0 <CO_CANrxBufferInit>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <OD_write_14xx+0x184>
 8002ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <OD_write_14xx+0x184>
                PDO->valid = true;
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002eba:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 8002ebe:	e049      	b.n	8002f54 <OD_write_14xx+0x218>
                PDO->valid = false;
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                if (ret != CO_ERROR_NO) {
 8002ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d03a      	beq.n	8002f54 <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 8002ede:	2309      	movs	r3, #9
 8002ee0:	e041      	b.n	8002f66 <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002ee2:	68b8      	ldr	r0, [r7, #8]
 8002ee4:	f7ff fb96 	bl	8002614 <CO_getUint8>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef2:	2bf0      	cmp	r3, #240	; 0xf0
 8002ef4:	d905      	bls.n	8002f02 <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002efa:	2bfd      	cmp	r3, #253	; 0xfd
 8002efc:	d801      	bhi.n	8002f02 <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 8002efe:	230f      	movs	r3, #15
 8002f00:	e031      	b.n	8002f66 <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f06:	2bf0      	cmp	r3, #240	; 0xf0
 8002f08:	bf94      	ite	ls
 8002f0a:	2301      	movls	r3, #1
 8002f0c:	2300      	movhi	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d003      	beq.n	8002f26 <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        }

        RPDO->synchronous = synchronous;
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 8002f2e:	e012      	b.n	8002f56 <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002f30:	68b8      	ldr	r0, [r7, #8]
 8002f32:	f7ff fb7d 	bl	8002630 <CO_getUint16>
 8002f36:	4603      	mov	r3, r0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f40:	fb03 f202 	mul.w	r2, r3, r2
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        RPDO->timeoutTimer = 0;
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        break;
 8002f52:	e000      	b.n	8002f56 <OD_write_14xx+0x21a>
        break;
 8002f54:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002f56:	f107 0110 	add.w	r1, r7, #16
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff f8c8 	bl	80020f4 <OD_writeOriginal>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3738      	adds	r7, #56	; 0x38
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	3ffff800 	.word	0x3ffff800
 8002f74:	08002c81 	.word	0x08002c81

08002f78 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b090      	sub	sp, #64	; 0x40
 8002f7c:	af04      	add	r7, sp, #16
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <CO_RPDO_init+0x36>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <CO_RPDO_init+0x36>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <CO_RPDO_init+0x36>
 8002f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 8002fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <CO_RPDO_init+0x36>
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	e118      	b.n	80031e6 <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002fb4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8002fb8:	2100      	movs	r1, #0
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f00b fd36 	bl	800ea2c <memset>

    /* Configure object variables */
    PDO->em = em;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fca:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 8002fd0:	f107 031c 	add.w	r3, r7, #28
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2301      	movs	r3, #1
 8002fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fe2:	f7ff fcb1 	bl	8002948 <PDO_initMapping>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002fec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <CO_RPDO_init+0x82>
        return ret;
 8002ff4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002ff8:	e0f5      	b.n	80031e6 <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 8002ffe:	f107 0218 	add.w	r2, r7, #24
 8003002:	2301      	movs	r3, #1
 8003004:	2101      	movs	r1, #1
 8003006:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003008:	f7ff fb8d 	bl	8002726 <OD_get_u32>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8003012:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00e      	beq.n	8003038 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 800301a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 8003020:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003022:	f7ff fb31 	bl	8002688 <OD_getIndex>
 8003026:	4603      	mov	r3, r0
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003032:	f06f 030b 	mvn.w	r3, #11
 8003036:	e0d6      	b.n	80031e6 <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	43db      	mvns	r3, r3
 800303c:	0fdb      	lsrs	r3, r3, #31
 800303e:	b2db      	uxtb	r3, r3
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	b29b      	uxth	r3, r3
 8003046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800304a:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <CO_RPDO_init+0xf6>
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	7b5b      	ldrb	r3, [r3, #13]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <CO_RPDO_init+0xe8>
 800305a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <CO_RPDO_init+0xf6>
        valid = false;
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <CO_RPDO_init+0xf6>
 800306a:	2301      	movs	r3, #1
 800306c:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00e      	beq.n	8003092 <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d001      	beq.n	8003082 <CO_RPDO_init+0x10a>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	e000      	b.n	8003084 <CO_RPDO_init+0x10c>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800308a:	221a      	movs	r2, #26
 800308c:	2101      	movs	r1, #1
 800308e:	f7fe f9c7 	bl	8001420 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 800309c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <CO_RPDO_init+0x13c>
 80030a2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80030a4:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80030a6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80030aa:	400b      	ands	r3, r1
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d101      	bne.n	80030b4 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 80030b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(
 80030b4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80030b6:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80030ba:	4b4d      	ldr	r3, [pc, #308]	; (80031f0 <CO_RPDO_init+0x278>)
 80030bc:	9302      	str	r3, [sp, #8]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2300      	movs	r3, #0
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80030ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80030cc:	f005 fb00 	bl	80086d0 <CO_CANrxBufferInit>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 80030d6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <CO_RPDO_init+0x16c>
        return ret;
 80030de:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80030e2:	e080      	b.n	80031e6 <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e8:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80030ea:	23fe      	movs	r3, #254	; 0xfe
 80030ec:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 80030ee:	f107 0217 	add.w	r2, r7, #23
 80030f2:	2301      	movs	r3, #1
 80030f4:	2102      	movs	r1, #2
 80030f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030f8:	f7ff faeb 	bl	80026d2 <OD_get_u8>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8003102:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00e      	beq.n	8003128 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 800310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 8003110:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003112:	f7ff fab9 	bl	8002688 <OD_getIndex>
 8003116:	4603      	mov	r3, r0
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003120:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003122:	f06f 030b 	mvn.w	r3, #11
 8003126:	e05e      	b.n	80031e6 <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2bf0      	cmp	r3, #240	; 0xf0
 8003134:	bf94      	ite	ls
 8003136:	2301      	movls	r3, #1
 8003138:	2300      	movhi	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8003148:	f107 0214 	add.w	r2, r7, #20
 800314c:	2301      	movs	r3, #1
 800314e:	2105      	movs	r1, #5
 8003150:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003152:	f7ff fad3 	bl	80026fc <OD_get_u16>
 8003156:	4603      	mov	r3, r0
 8003158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 800315c:	8abb      	ldrh	r3, [r7, #20]
 800315e:	461a      	mov	r2, r3
 8003160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003164:	fb03 f202 	mul.w	r2, r3, r2
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	2201      	movs	r2, #1
 8003172:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003184:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800318c:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003194:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <CO_RPDO_init+0x27c>)
 80031a4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <CO_RPDO_init+0x280>)
 80031ac:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <CO_RPDO_init+0x284>)
 80031bc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <CO_RPDO_init+0x288>)
 80031c4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031ce:	4619      	mov	r1, r3
 80031d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031d2:	f7ff fa6a 	bl	80026aa <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80031dc:	4619      	mov	r1, r3
 80031de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80031e0:	f7ff fa63 	bl	80026aa <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3730      	adds	r7, #48	; 0x30
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	08002c81 	.word	0x08002c81
 80031f4:	08002be5 	.word	0x08002be5
 80031f8:	08002d3d 	.word	0x08002d3d
 80031fc:	08002045 	.word	0x08002045
 8003200:	08002aa3 	.word	0x08002aa3

08003204 <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8003204:	b590      	push	{r4, r7, lr}
 8003206:	b097      	sub	sp, #92	; 0x5c
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 810c 	beq.w	8003438 <CO_RPDO_process+0x234>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8108 	beq.w	8003438 <CO_RPDO_process+0x234>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8003228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <CO_RPDO_process+0x36>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 80ff 	bne.w	8003438 <CO_RPDO_process+0x234>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003240:	2b0a      	cmp	r3, #10
 8003242:	d928      	bls.n	8003296 <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800324a:	2b0b      	cmp	r3, #11
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800325c:	2b0c      	cmp	r3, #12
 800325e:	d102      	bne.n	8003266 <CO_RPDO_process+0x62>
 8003260:	f248 2310 	movw	r3, #33296	; 0x8210
 8003264:	e001      	b.n	800326a <CO_RPDO_process+0x66>
 8003266:	f248 2320 	movw	r3, #33312	; 0x8220
 800326a:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 800326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326e:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8003274:	461a      	mov	r2, r3
 8003276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003278:	9200      	str	r2, [sp, #0]
 800327a:	2204      	movs	r2, #4
 800327c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800327e:	f7fe f8cf 	bl	8001420 <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <CO_RPDO_process+0xbe>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <CO_RPDO_process+0xbe>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <CO_RPDO_process+0xbe>
            bufNo = 1;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 80032c2:	2300      	movs	r3, #0
 80032c4:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 80032c6:	e065      	b.n	8003394 <CO_RPDO_process+0x190>
            rpdoReceived = true;
 80032c8:	2301      	movs	r3, #1
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 80032cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032d0:	332a      	adds	r3, #42	; 0x2a
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 80032da:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3252      	adds	r2, #82	; 0x52
 80032e2:	2100      	movs	r1, #0
 80032e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80032ee:	e04b      	b.n	8003388 <CO_RPDO_process+0x184>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80032f0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	3310      	adds	r3, #16
 80032fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003300:	4413      	add	r3, r2
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	330c      	adds	r3, #12
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	2b08      	cmp	r3, #8
 800331c:	d901      	bls.n	8003322 <CO_RPDO_process+0x11e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 800331e:	2308      	movs	r3, #8
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8003322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003328:	429a      	cmp	r2, r3
 800332a:	d912      	bls.n	8003352 <CO_RPDO_process+0x14e>
                    memset(buf, 0, sizeof(buf));
 800332c:	f107 0318 	add.w	r3, r7, #24
 8003330:	2208      	movs	r2, #8
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f00b fb79 	bl	800ea2c <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 800333a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800333e:	f107 0318 	add.w	r3, r7, #24
 8003342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003344:	4618      	mov	r0, r3
 8003346:	f00b fb49 	bl	800e9dc <memcpy>
                    dataOD = buf;
 800334a:	f107 0318 	add.w	r3, r7, #24
 800334e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003350:	e001      	b.n	8003356 <CO_RPDO_process+0x152>
                }
                else {
                    dataOD = dataRPDO;
 8003352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	699c      	ldr	r4, [r3, #24]
 8003360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003368:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800336a:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 800336c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8003374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800337a:	4413      	add	r3, r2
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800337e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003382:	3301      	adds	r3, #1
 8003384:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338a:	7b5b      	ldrb	r3, [r3, #13]
 800338c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003390:	429a      	cmp	r2, r3
 8003392:	d3ad      	bcc.n	80032f0 <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8003394:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3252      	adds	r2, #82	; 0x52
 800339c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d191      	bne.n	80032c8 <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d058      	beq.n	8003460 <CO_RPDO_process+0x25c>
            if (rpdoReceived) {
 80033ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d017      	beq.n	80033e4 <CO_RPDO_process+0x1e0>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d90a      	bls.n	80033da <CO_RPDO_process+0x1d6>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 80033c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	2217      	movs	r2, #23
 80033d4:	2100      	movs	r1, #0
 80033d6:	f7fe f823 	bl	8001420 <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    ) {
 80033e2:	e03d      	b.n	8003460 <CO_RPDO_process+0x25c>
            }
            else if (RPDO->timeoutTimer > 0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d038      	beq.n	8003460 <CO_RPDO_process+0x25c>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d230      	bcs.n	8003460 <CO_RPDO_process+0x25c>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	441a      	add	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800341a:	429a      	cmp	r2, r3
 800341c:	d920      	bls.n	8003460 <CO_RPDO_process+0x25c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 800341e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	f248 2350 	movw	r3, #33360	; 0x8250
 800342e:	2217      	movs	r2, #23
 8003430:	2101      	movs	r1, #1
 8003432:	f7fd fff5 	bl	8001420 <CO_error>
    ) {
 8003436:	e013      	b.n	8003460 <CO_RPDO_process+0x25c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <CO_RPDO_process+0x242>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <CO_RPDO_process+0x25e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 800345e:	e000      	b.n	8003462 <CO_RPDO_process+0x25e>
    ) {
 8003460:	bf00      	nop
}
 8003462:	bf00      	nop
 8003464:	3754      	adds	r7, #84	; 0x54
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
	...

0800346c <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b093      	sub	sp, #76	; 0x4c
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <OD_write_18xx+0x26>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <OD_write_18xx+0x26>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <OD_write_18xx+0x26>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d901      	bls.n	8003496 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8003492:	2309      	movs	r3, #9
 8003494:	e136      	b.n	8003704 <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f00b fa97 	bl	800e9dc <memcpy>

    switch (stream->subIndex) {
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	7c5b      	ldrb	r3, [r3, #17]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	f200 811d 	bhi.w	80036f4 <OD_write_18xx+0x288>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <OD_write_18xx+0x54>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034d9 	.word	0x080034d9
 80034c4:	0800360f 	.word	0x0800360f
 80034c8:	08003675 	.word	0x08003675
 80034cc:	080036f5 	.word	0x080036f5
 80034d0:	080036a3 	.word	0x080036a3
 80034d4:	080036c7 	.word	0x080036c7
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 80034d8:	68b8      	ldr	r0, [r7, #8]
 80034da:	f7ff f8b8 	bl	800264e <CO_getUint32>
 80034de:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	0fdb      	lsrs	r3, r3, #31
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 80034f4:	6a3a      	ldr	r2, [r7, #32]
 80034f6:	4b85      	ldr	r3, [pc, #532]	; (800370c <OD_write_18xx+0x2a0>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d13d      	bne.n	800357a <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d009      	beq.n	8003518 <OD_write_18xx+0xac>
 8003504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <OD_write_18xx+0xac>
 800350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8003512:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003514:	429a      	cmp	r2, r3
 8003516:	d130      	bne.n	800357a <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d026      	beq.n	800356c <OD_write_18xx+0x100>
 800351e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003520:	2b7f      	cmp	r3, #127	; 0x7f
 8003522:	d92a      	bls.n	800357a <OD_write_18xx+0x10e>
 8003524:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352a:	d903      	bls.n	8003534 <OD_write_18xx+0xc8>
 800352c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800352e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003532:	d922      	bls.n	800357a <OD_write_18xx+0x10e>
 8003534:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003536:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800353a:	d903      	bls.n	8003544 <OD_write_18xx+0xd8>
 800353c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800353e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003542:	d31a      	bcc.n	800357a <OD_write_18xx+0x10e>
 8003544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003546:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800354a:	d903      	bls.n	8003554 <OD_write_18xx+0xe8>
 800354c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800354e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003552:	d312      	bcc.n	800357a <OD_write_18xx+0x10e>
 8003554:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003556:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800355a:	d303      	bcc.n	8003564 <OD_write_18xx+0xf8>
 800355c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800355e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003562:	d30a      	bcc.n	800357a <OD_write_18xx+0x10e>
 8003564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003566:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800356a:	d806      	bhi.n	800357a <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <OD_write_18xx+0x112>
 8003572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003574:	7b5b      	ldrb	r3, [r3, #13]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 800357a:	230f      	movs	r3, #15
 800357c:	e0c2      	b.n	8003704 <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	429a      	cmp	r2, r3
 8003586:	d106      	bne.n	8003596 <OD_write_18xx+0x12a>
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800358e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003590:	429a      	cmp	r2, r3
 8003592:	f000 80ae 	beq.w	80036f2 <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003598:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 800359c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800359e:	429a      	cmp	r2, r3
 80035a0:	d108      	bne.n	80035b4 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f85b 	bl	800266a <CO_setUint32>
            }
            if (!valid) {
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <OD_write_18xx+0x152>
                CAN_ID = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	6858      	ldr	r0, [r3, #4]
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80035cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ce:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 80035d2:	2af0      	cmp	r2, #240	; 0xf0
 80035d4:	bf94      	ite	ls
 80035d6:	2201      	movls	r2, #1
 80035d8:	2200      	movhi	r2, #0
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	4614      	mov	r4, r2
 80035de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80035e0:	9401      	str	r4, [sp, #4]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2300      	movs	r3, #0
 80035e6:	f005 f8d1 	bl	800878c <CO_CANtxBufferInit>
 80035ea:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 80035f2:	2309      	movs	r3, #9
 80035f4:	e086      	b.n	8003704 <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 80035fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8003604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003606:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003608:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 800360c:	e071      	b.n	80036f2 <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800360e:	68b8      	ldr	r0, [r7, #8]
 8003610:	f7ff f800 	bl	8002614 <CO_getUint8>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800361a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800361e:	2bf0      	cmp	r3, #240	; 0xf0
 8003620:	d905      	bls.n	800362e <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003626:	2bfd      	cmp	r3, #253	; 0xfd
 8003628:	d801      	bhi.n	800362e <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 800362a:	230f      	movs	r3, #15
 800362c:	e06a      	b.n	8003704 <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 800362e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003632:	2bf0      	cmp	r3, #240	; 0xf0
 8003634:	bf94      	ite	ls
 8003636:	2301      	movls	r3, #1
 8003638:	2300      	movhi	r3, #0
 800363a:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003642:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	22ff      	movs	r2, #255	; 0xff
 8003648:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003652:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2201      	movs	r2, #1
 800365a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2200      	movs	r2, #0
 8003662:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 8003672:	e03f      	b.n	80036f4 <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 800367c:	230f      	movs	r3, #15
 800367e:	e041      	b.n	8003704 <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8003680:	68b8      	ldr	r0, [r7, #8]
 8003682:	f7fe ffd5 	bl	8002630 <CO_getUint16>
 8003686:	4603      	mov	r3, r0
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	2264      	movs	r2, #100	; 0x64
 800368e:	fb03 f202 	mul.w	r2, r3, r2
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 8003698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369a:	2200      	movs	r2, #0
 800369c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 80036a0:	e028      	b.n	80036f4 <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 80036a2:	68b8      	ldr	r0, [r7, #8]
 80036a4:	f7fe ffc4 	bl	8002630 <CO_getUint16>
 80036a8:	4603      	mov	r3, r0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036b2:	fb03 f202 	mul.w	r2, r3, r2
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 80036bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 80036c4:	e016      	b.n	80036f4 <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 80036c6:	68b8      	ldr	r0, [r7, #8]
 80036c8:	f7fe ffa4 	bl	8002614 <CO_getUint8>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <OD_write_18xx+0x276>
 80036da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036de:	2bf0      	cmp	r3, #240	; 0xf0
 80036e0:	d901      	bls.n	80036e6 <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 80036e2:	230f      	movs	r3, #15
 80036e4:	e00e      	b.n	8003704 <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80036ec:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 80036f0:	e000      	b.n	80036f4 <OD_write_18xx+0x288>
        break;
 80036f2:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80036f4:	f107 0114 	add.w	r1, r7, #20
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7fe fcf9 	bl	80020f4 <OD_writeOriginal>
 8003702:	4603      	mov	r3, r0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3744      	adds	r7, #68	; 0x44
 8003708:	46bd      	mov	sp, r7
 800370a:	bd90      	pop	{r4, r7, pc}
 800370c:	3ffff800 	.word	0x3ffff800

08003710 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	; 0x38
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <CO_TPDO_init+0x36>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <CO_TPDO_init+0x36>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <CO_TPDO_init+0x36>
 8003734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 800373a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <CO_TPDO_init+0x36>
 8003740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	e14f      	b.n	80039ec <CO_TPDO_init+0x2dc>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 800374c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8003750:	2100      	movs	r1, #0
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f00b f96a 	bl	800ea2c <memset>

    /* Configure object variables */
    PDO->em = em;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003762:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8003768:	f107 031c 	add.w	r3, r7, #28
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800377a:	f7ff f8e5 	bl	8002948 <PDO_initMapping>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8003784:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <CO_TPDO_init+0x82>
        return ret;
 800378c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003790:	e12c      	b.n	80039ec <CO_TPDO_init+0x2dc>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003792:	23fe      	movs	r3, #254	; 0xfe
 8003794:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8003796:	f107 021b 	add.w	r2, r7, #27
 800379a:	2301      	movs	r3, #1
 800379c:	2102      	movs	r1, #2
 800379e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037a0:	f7fe ff97 	bl	80026d2 <OD_get_u8>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80037aa:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00e      	beq.n	80037d0 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 80037b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037ba:	f7fe ff65 	bl	8002688 <OD_getIndex>
 80037be:	4603      	mov	r3, r0
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	f043 0202 	orr.w	r2, r3, #2
 80037c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80037ca:	f06f 030b 	mvn.w	r3, #11
 80037ce:	e10d      	b.n	80039ec <CO_TPDO_init+0x2dc>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80037d0:	7efb      	ldrb	r3, [r7, #27]
 80037d2:	2bfd      	cmp	r3, #253	; 0xfd
 80037d4:	d804      	bhi.n	80037e0 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80037d6:	7efb      	ldrb	r3, [r7, #27]
 80037d8:	2bf0      	cmp	r3, #240	; 0xf0
 80037da:	d901      	bls.n	80037e0 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80037dc:	23fe      	movs	r3, #254	; 0xfe
 80037de:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 80037e0:	7efa      	ldrb	r2, [r7, #27]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 80037f4:	f107 0214 	add.w	r2, r7, #20
 80037f8:	2301      	movs	r3, #1
 80037fa:	2101      	movs	r1, #1
 80037fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037fe:	f7fe ff92 	bl	8002726 <OD_get_u32>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8003808:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8003810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8003816:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003818:	f7fe ff36 	bl	8002688 <OD_getIndex>
 800381c:	4603      	mov	r3, r0
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003826:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003828:	f06f 030b 	mvn.w	r3, #11
 800382c:	e0de      	b.n	80039ec <CO_TPDO_init+0x2dc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	43db      	mvns	r3, r3
 8003832:	0fdb      	lsrs	r3, r3, #31
 8003834:	b2db      	uxtb	r3, r3
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <CO_TPDO_init+0x154>
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	7b5b      	ldrb	r3, [r3, #13]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <CO_TPDO_init+0x146>
 8003850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <CO_TPDO_init+0x154>
        valid = false;
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <CO_TPDO_init+0x154>
 8003860:	2301      	movs	r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <CO_TPDO_init+0x168>
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	e000      	b.n	800387a <CO_TPDO_init+0x16a>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8003880:	221a      	movs	r2, #26
 8003882:	2101      	movs	r1, #1
 8003884:	f7fd fdcc 	bl	8001420 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8003892:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <CO_TPDO_init+0x19a>
 8003898:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800389a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800389c:	f64f 7380 	movw	r3, #65408	; 0xff80
 80038a0:	400b      	ands	r3, r1
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d101      	bne.n	80038aa <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80038a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038a8:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80038b4:	2af0      	cmp	r2, #240	; 0xf0
 80038b6:	bf94      	ite	ls
 80038b8:	2201      	movls	r2, #1
 80038ba:	2200      	movhi	r2, #0
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	4610      	mov	r0, r2
 80038c0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80038c2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80038c6:	9001      	str	r0, [sp, #4]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038ce:	f004 ff5d 	bl	800878c <CO_CANtxBufferInit>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80038e4:	f04f 33ff 	mov.w	r3, #4294967295
 80038e8:	e080      	b.n	80039ec <CO_TPDO_init+0x2dc>
    }

    PDO->valid = valid;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ee:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 80038f8:	f107 0212 	add.w	r2, r7, #18
 80038fc:	2301      	movs	r3, #1
 80038fe:	2103      	movs	r1, #3
 8003900:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003902:	f7fe fefb 	bl	80026fc <OD_get_u16>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 800390c:	f107 0210 	add.w	r2, r7, #16
 8003910:	2301      	movs	r3, #1
 8003912:	2105      	movs	r1, #5
 8003914:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003916:	f7fe fef1 	bl	80026fc <OD_get_u16>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 8003920:	8a7b      	ldrh	r3, [r7, #18]
 8003922:	461a      	mov	r2, r3
 8003924:	2364      	movs	r3, #100	; 0x64
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 8003932:	8a3b      	ldrh	r3, [r7, #16]
 8003934:	461a      	mov	r2, r3
 8003936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8003954:	2301      	movs	r3, #1
 8003956:	2106      	movs	r1, #6
 8003958:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800395a:	f7fe feba 	bl	80026d2 <OD_get_u8>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	22ff      	movs	r2, #255	; 0xff
 8003970:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	2200      	movs	r2, #0
 8003978:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800398a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003992:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800399a:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <CO_TPDO_init+0x2e4>)
 80039aa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <CO_TPDO_init+0x2e8>)
 80039b2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <CO_TPDO_init+0x2ec>)
 80039c2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <CO_TPDO_init+0x2f0>)
 80039ca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80039d4:	4619      	mov	r1, r3
 80039d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039d8:	f7fe fe67 	bl	80026aa <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80039e2:	4619      	mov	r1, r3
 80039e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039e6:	f7fe fe60 	bl	80026aa <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3730      	adds	r7, #48	; 0x30
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	08002be5 	.word	0x08002be5
 80039f8:	0800346d 	.word	0x0800346d
 80039fc:	08002045 	.word	0x08002045
 8003a00:	08002aa3 	.word	0x08002aa3

08003a04 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8003a04:	b590      	push	{r4, r7, lr}
 8003a06:	b091      	sub	sp, #68	; 0x44
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003a16:	3305      	adds	r3, #5
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <CO_TPDOsend+0x2a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003a2a:	2bfd      	cmp	r3, #253	; 0xfd
 8003a2c:	d901      	bls.n	8003a32 <CO_TPDOsend+0x2e>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <CO_TPDOsend+0x30>
 8003a32:	2300      	movs	r3, #0
    bool_t eventDriven =
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003a3c:	e062      	b.n	8003b04 <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8003a3e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	3310      	adds	r3, #16
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	4413      	add	r3, r2
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d901      	bls.n	8003a6c <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003a68:	2308      	movs	r3, #8
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003a6c:	7ffb      	ldrb	r3, [r7, #31]
 8003a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d90a      	bls.n	8003a8a <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 8003a74:	f107 0310 	add.w	r3, r7, #16
 8003a78:	2208      	movs	r2, #8
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f00a ffd5 	bl	800ea2c <memset>
            dataTPDOCopy = buf;
 8003a82:	f107 0310 	add.w	r3, r7, #16
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
 8003a88:	e001      	b.n	8003a8e <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	2200      	movs	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	695c      	ldr	r4, [r3, #20]
 8003a98:	f107 030c 	add.w	r3, r7, #12
 8003a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aa0:	6a38      	ldr	r0, [r7, #32]
 8003aa2:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003aa4:	7ffa      	ldrb	r2, [r7, #31]
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8003aaa:	7ffb      	ldrb	r3, [r7, #31]
 8003aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d906      	bls.n	8003ac0 <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 8003ab2:	7ffa      	ldrb	r2, [r7, #31]
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003abc:	f00a ff8e 	bl	800e9dc <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003ac0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	323c      	adds	r2, #60	; 0x3c
 8003ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003acc:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <CO_TPDOsend+0xee>
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003aea:	4313      	orrs	r3, r2
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
 8003af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003af6:	4413      	add	r3, r2
 8003af8:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003afa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003afe:	3301      	adds	r3, #1
 8003b00:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	7b5b      	ldrb	r3, [r3, #13]
 8003b08:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d396      	bcc.n	8003a3e <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f004 fe9f 	bl	8008880 <CO_CANsend>
 8003b42:	4603      	mov	r3, r0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3744      	adds	r7, #68	; 0x44
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd90      	pop	{r4, r7, pc}

08003b4c <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80dc 	beq.w	8003d20 <CO_TPDO_process+0x1d4>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80d8 	beq.w	8003d20 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003b80:	2bfd      	cmp	r3, #253	; 0xfd
 8003b82:	d946      	bls.n	8003c12 <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d018      	beq.n	8003bc0 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d205      	bcs.n	8003ba6 <CO_TPDO_process+0x5a>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	e000      	b.n	8003ba8 <CO_TPDO_process+0x5c>
 8003ba6:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
                if (TPDO->eventTimer == 0) {
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d123      	bne.n	8003c12 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003bca:	2300      	movs	r3, #0
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e01b      	b.n	8003c08 <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003bd0:	7ffa      	ldrb	r2, [r7, #31]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	323c      	adds	r2, #60	; 0x3c
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00f      	beq.n	8003c02 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	440b      	add	r3, r1
 8003bec:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d104      	bne.n	8003c02 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                            break;
 8003c00:	e007      	b.n	8003c12 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003c02:	7ffb      	ldrb	r3, [r7, #31]
 8003c04:	3301      	adds	r3, #1
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	7b5b      	ldrb	r3, [r3, #13]
 8003c0c:	7ffa      	ldrb	r2, [r7, #31]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3de      	bcc.n	8003bd0 <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003c18:	2bfd      	cmp	r3, #253	; 0xfd
 8003c1a:	d91d      	bls.n	8003c58 <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d205      	bcs.n	8003c34 <CO_TPDO_process+0xe8>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	e000      	b.n	8003c36 <CO_TPDO_process+0xea>
 8003c34:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07f      	beq.n	8003d46 <CO_TPDO_process+0x1fa>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d17a      	bne.n	8003d46 <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fed7 	bl	8003a04 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003c56:	e076      	b.n	8003d46 <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d071      	beq.n	8003d46 <CO_TPDO_process+0x1fa>
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d06e      	beq.n	8003d46 <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d108      	bne.n	8003c84 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d064      	beq.n	8003d46 <CO_TPDO_process+0x1fa>
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fec1 	bl	8003a04 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003c82:	e060      	b.n	8003d46 <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003c8a:	2bff      	cmp	r3, #255	; 0xff
 8003c8c:	d119      	bne.n	8003cc2 <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c94:	7c5b      	ldrb	r3, [r3, #17]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	22fe      	movs	r2, #254	; 0xfe
 8003ca8:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8003cac:	e009      	b.n	8003cc2 <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003cc8:	2bfe      	cmp	r3, #254	; 0xfe
 8003cca:	d112      	bne.n	8003cf2 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003cd2:	7c9a      	ldrb	r2, [r3, #18]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d133      	bne.n	8003d46 <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff fe8a 	bl	8003a04 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003cf0:	e029      	b.n	8003d46 <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11c      	bne.n	8003d46 <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff fe73 	bl	8003a04 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003d1e:	e012      	b.n	8003d46 <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	22ff      	movs	r2, #255	; 0xff
 8003d40:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif
    }
}
 8003d44:	e000      	b.n	8003d48 <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003d46:	bf00      	nop
}
 8003d48:	bf00      	nop
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <OD_getIndex+0x14>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	e000      	b.n	8003d9e <OD_getIndex+0x16>
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <OD_mappable+0x1e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7c1b      	ldrb	r3, [r3, #16]
 8003dbc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <OD_mappable+0x1e>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <OD_mappable+0x20>
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <OD_extension_init>:
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <OD_extension_init+0x14>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e003      	b.n	8003df2 <OD_extension_init+0x1c>
    entry->extension = extension;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <OD_get_u8>:
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af02      	add	r7, sp, #8
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003e0e:	7af9      	ldrb	r1, [r7, #11]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2301      	movs	r3, #1
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7fe fb51 	bl	80024c0 <OD_get_value>
 8003e1e:	4603      	mov	r3, r0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <OD_get_u32>:
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	460b      	mov	r3, r1
 8003e36:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003e38:	7af9      	ldrb	r1, [r7, #11]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	2304      	movs	r3, #4
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7fe fb3c 	bl	80024c0 <OD_get_value>
 8003e48:	4603      	mov	r3, r0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b086      	sub	sp, #24
 8003e56:	af02      	add	r7, sp, #8
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003e62:	1d3a      	adds	r2, r7, #4
 8003e64:	7af9      	ldrb	r1, [r7, #11]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7fe fb5d 	bl	800252c <OD_set_value>
 8003e72:	4603      	mov	r3, r0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	61bb      	str	r3, [r7, #24]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	791b      	ldrb	r3, [r3, #4]
 8003e8e:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	3305      	adds	r3, #5
 8003e94:	613b      	str	r3, [r7, #16]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	f040 8099 	bne.w	8003fd0 <CO_SDO_receive+0x154>
        if (data[0] == 0x80) {
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d103      	bne.n	8003eae <CO_SDO_receive+0x32>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003eac:	e090      	b.n	8003fd0 <CO_SDO_receive+0x154>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 808c 	bne.w	8003fd0 <CO_SDO_receive+0x154>
        else if (SDO->state == CO_SDO_ST_UPLOAD_BLK_END_CRSP && data[0]==0xA1) {
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	7d1b      	ldrb	r3, [r3, #20]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b67      	cmp	r3, #103	; 0x67
 8003ec0:	d107      	bne.n	8003ed2 <CO_SDO_receive+0x56>
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2ba1      	cmp	r3, #161	; 0xa1
 8003ec8:	d103      	bne.n	8003ed2 <CO_SDO_receive+0x56>
            SDO->state = CO_SDO_ST_IDLE;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	751a      	strb	r2, [r3, #20]
}
 8003ed0:	e07e      	b.n	8003fd0 <CO_SDO_receive+0x154>
        else if (SDO->state == CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ) {
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	7d1b      	ldrb	r3, [r3, #20]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b53      	cmp	r3, #83	; 0x53
 8003eda:	d16a      	bne.n	8003fb2 <CO_SDO_receive+0x136>
            if (SDO->bufOffsetWr <= (CO_CONFIG_SDO_SRV_BUFFER_SIZE - (7+2))) {
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ee2:	f5b3 7f5f 	cmp.w	r3, #892	; 0x37c
 8003ee6:	d273      	bcs.n	8003fd0 <CO_SDO_receive+0x154>
                CO_SDO_state_t state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ;
 8003ee8:	2353      	movs	r3, #83	; 0x53
 8003eea:	77fb      	strb	r3, [r7, #31]
                uint8_t seqno = data[0] & 0x7F;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef4:	73fb      	strb	r3, [r7, #15]
                SDO->timeoutTimer = 0;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->block_timeoutTimer = 0;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
                if (seqno <= SDO->block_blksize
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d837      	bhi.n	8003f80 <CO_SDO_receive+0x104>
                    && seqno == (SDO->block_seqno + 1)
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8003f18:	3301      	adds	r3, #1
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d130      	bne.n	8003f80 <CO_SDO_receive+0x104>
                    SDO->block_seqno = seqno;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                    memcpy(SDO->buf + SDO->bufOffsetWr, &data[1], 7);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f32:	18d0      	adds	r0, r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	3301      	adds	r3, #1
 8003f38:	2207      	movs	r2, #7
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f00a fd4e 	bl	800e9dc <memcpy>
                    SDO->bufOffsetWr += 7;
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003f46:	1dda      	adds	r2, r3, #7
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
                    SDO->sizeTran += 7;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f52:	1dda      	adds	r2, r3, #7
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	669a      	str	r2, [r3, #104]	; 0x68
                    if ((data[0] & 0x80) != 0) {
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da05      	bge.n	8003f6e <CO_SDO_receive+0xf2>
                        SDO->finished = true;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2201      	movs	r2, #1
 8003f66:	671a      	str	r2, [r3, #112]	; 0x70
                        state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP;
 8003f68:	2354      	movs	r3, #84	; 0x54
 8003f6a:	77fb      	strb	r3, [r7, #31]
                    if ((data[0] & 0x80) != 0) {
 8003f6c:	e016      	b.n	8003f9c <CO_SDO_receive+0x120>
                    else if (seqno == SDO->block_blksize) {
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d110      	bne.n	8003f9c <CO_SDO_receive+0x120>
                        state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP;
 8003f7a:	2354      	movs	r3, #84	; 0x54
 8003f7c:	77fb      	strb	r3, [r7, #31]
                    if ((data[0] & 0x80) != 0) {
 8003f7e:	e00d      	b.n	8003f9c <CO_SDO_receive+0x120>
                else if (seqno != SDO->block_seqno && SDO->block_seqno != 0U) {
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d008      	beq.n	8003f9e <CO_SDO_receive+0x122>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <CO_SDO_receive+0x122>
                    state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP;
 8003f96:	2354      	movs	r3, #84	; 0x54
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e000      	b.n	8003f9e <CO_SDO_receive+0x122>
                    if ((data[0] & 0x80) != 0) {
 8003f9c:	bf00      	nop
                if (state != CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ) {
 8003f9e:	7ffb      	ldrb	r3, [r7, #31]
 8003fa0:	2b53      	cmp	r3, #83	; 0x53
 8003fa2:	d015      	beq.n	8003fd0 <CO_SDO_receive+0x154>
                    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
                    SDO->state = state;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	7ffa      	ldrb	r2, [r7, #31]
 8003fae:	751a      	strb	r2, [r3, #20]
}
 8003fb0:	e00e      	b.n	8003fd0 <CO_SDO_receive+0x154>
        else if (SDO->state == CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP) {
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	7d1b      	ldrb	r3, [r3, #20]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b54      	cmp	r3, #84	; 0x54
 8003fba:	d009      	beq.n	8003fd0 <CO_SDO_receive+0x154>
            memcpy(SDO->CANrxData, data, DLC);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	333c      	adds	r3, #60	; 0x3c
 8003fc0:	7dfa      	ldrb	r2, [r7, #23]
 8003fc2:	6939      	ldr	r1, [r7, #16]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00a fd09 	bl	800e9dc <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003fd0:	bf00      	nop
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af04      	add	r7, sp, #16
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	80fb      	strh	r3, [r7, #6]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d106      	bne.n	8004006 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d101      	bne.n	8004006 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8004002:	2300      	movs	r3, #0
 8004004:	e04e      	b.n	80040a4 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db02      	blt.n	800401e <CO_SDOserver_init_canRxTx+0x46>
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	b29b      	uxth	r3, r3
 800401c:	e000      	b.n	8004020 <CO_SDOserver_init_canRxTx+0x48>
 800401e:	2300      	movs	r3, #0
 8004020:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	db02      	blt.n	800402e <CO_SDOserver_init_canRxTx+0x56>
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	b29b      	uxth	r3, r3
 800402c:	e000      	b.n	8004030 <CO_SDOserver_init_canRxTx+0x58>
 800402e:	2300      	movs	r3, #0
 8004030:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8004032:	8afb      	ldrh	r3, [r7, #22]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d006      	beq.n	8004046 <CO_SDOserver_init_canRxTx+0x6e>
 8004038:	8abb      	ldrh	r3, [r7, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	611a      	str	r2, [r3, #16]
 8004044:	e006      	b.n	8004054 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004054:	8afa      	ldrh	r2, [r7, #22]
 8004056:	88f9      	ldrh	r1, [r7, #6]
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <CO_SDOserver_init_canRxTx+0xd4>)
 800405a:	9302      	str	r3, [sp, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	2300      	movs	r3, #0
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004068:	68b8      	ldr	r0, [r7, #8]
 800406a:	f004 fb31 	bl	80086d0 <CO_CANrxBufferInit>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	8aba      	ldrh	r2, [r7, #20]
 8004078:	88b9      	ldrh	r1, [r7, #4]
 800407a:	2300      	movs	r3, #0
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	2308      	movs	r3, #8
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2300      	movs	r3, #0
 8004084:	f004 fb82 	bl	800878c <CO_CANtxBufferInit>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8004096:	23ff      	movs	r3, #255	; 0xff
 8004098:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
    }

    return ret;
 80040a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	08003e7d 	.word	0x08003e7d

080040b0 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b08f      	sub	sp, #60	; 0x3c
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <OD_write_1201_additional+0x20>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <OD_write_1201_additional+0x20>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 80040d0:	2309      	movs	r3, #9
 80040d2:	e0f9      	b.n	80042c8 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	7c5b      	ldrb	r3, [r3, #17]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	f200 80e8 	bhi.w	80042b4 <OD_write_1201_additional+0x204>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <OD_write_1201_additional+0x3c>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	08004101 	.word	0x08004101
 80040f4:	080041c5 	.word	0x080041c5
 80040f8:	0800428b 	.word	0x0800428b
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 80040fc:	2304      	movs	r3, #4
 80040fe:	e0e3      	b.n	80042c8 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	f7ff fe33 	bl	8003d6c <CO_getUint32>
 8004106:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004110:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	b29b      	uxth	r3, r3
 8004118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800411c:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	43db      	mvns	r3, r3
 8004122:	0fdb      	lsrs	r3, r3, #31
 8004124:	b2db      	uxtb	r3, r3
 8004126:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4b69      	ldr	r3, [pc, #420]	; (80042d0 <OD_write_1201_additional+0x220>)
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d134      	bne.n	800419c <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <OD_write_1201_additional+0x98>
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <OD_write_1201_additional+0x98>
 8004140:	8afa      	ldrh	r2, [r7, #22]
 8004142:	8abb      	ldrh	r3, [r7, #20]
 8004144:	429a      	cmp	r2, r3
 8004146:	d129      	bne.n	800419c <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d028      	beq.n	80041a0 <OD_write_1201_additional+0xf0>
 800414e:	8afb      	ldrh	r3, [r7, #22]
 8004150:	2b7f      	cmp	r3, #127	; 0x7f
 8004152:	d923      	bls.n	800419c <OD_write_1201_additional+0xec>
 8004154:	8afb      	ldrh	r3, [r7, #22]
 8004156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415a:	d903      	bls.n	8004164 <OD_write_1201_additional+0xb4>
 800415c:	8afb      	ldrh	r3, [r7, #22]
 800415e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004162:	d91b      	bls.n	800419c <OD_write_1201_additional+0xec>
 8004164:	8afb      	ldrh	r3, [r7, #22]
 8004166:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800416a:	d903      	bls.n	8004174 <OD_write_1201_additional+0xc4>
 800416c:	8afb      	ldrh	r3, [r7, #22]
 800416e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004172:	d313      	bcc.n	800419c <OD_write_1201_additional+0xec>
 8004174:	8afb      	ldrh	r3, [r7, #22]
 8004176:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800417a:	d903      	bls.n	8004184 <OD_write_1201_additional+0xd4>
 800417c:	8afb      	ldrh	r3, [r7, #22]
 800417e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004182:	d30b      	bcc.n	800419c <OD_write_1201_additional+0xec>
 8004184:	8afb      	ldrh	r3, [r7, #22]
 8004186:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800418a:	d303      	bcc.n	8004194 <OD_write_1201_additional+0xe4>
 800418c:	8afb      	ldrh	r3, [r7, #22]
 800418e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004192:	d303      	bcc.n	800419c <OD_write_1201_additional+0xec>
 8004194:	8afb      	ldrh	r3, [r7, #22]
 8004196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800419a:	d901      	bls.n	80041a0 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 800419c:	230f      	movs	r3, #15
 800419e:	e093      	b.n	80042c8 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4603      	mov	r3, r0
 80041bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041be:	f7ff ff0b 	bl	8003fd8 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 80041c2:	e07a      	b.n	80042ba <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80041c4:	68b8      	ldr	r0, [r7, #8]
 80041c6:	f7ff fdd1 	bl	8003d6c <CO_getUint32>
 80041ca:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041d4:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e0:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	43db      	mvns	r3, r3
 80041e6:	0fdb      	lsrs	r3, r3, #31
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	4b38      	ldr	r3, [pc, #224]	; (80042d0 <OD_write_1201_additional+0x220>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d134      	bne.n	8004260 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <OD_write_1201_additional+0x15c>
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <OD_write_1201_additional+0x15c>
 8004204:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004206:	8c3b      	ldrh	r3, [r7, #32]
 8004208:	429a      	cmp	r2, r3
 800420a:	d129      	bne.n	8004260 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d028      	beq.n	8004264 <OD_write_1201_additional+0x1b4>
 8004212:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004214:	2b7f      	cmp	r3, #127	; 0x7f
 8004216:	d923      	bls.n	8004260 <OD_write_1201_additional+0x1b0>
 8004218:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800421a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421e:	d903      	bls.n	8004228 <OD_write_1201_additional+0x178>
 8004220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004222:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004226:	d91b      	bls.n	8004260 <OD_write_1201_additional+0x1b0>
 8004228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800422a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800422e:	d903      	bls.n	8004238 <OD_write_1201_additional+0x188>
 8004230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004232:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004236:	d313      	bcc.n	8004260 <OD_write_1201_additional+0x1b0>
 8004238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800423a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800423e:	d903      	bls.n	8004248 <OD_write_1201_additional+0x198>
 8004240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004242:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004246:	d30b      	bcc.n	8004260 <OD_write_1201_additional+0x1b0>
 8004248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800424a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800424e:	d303      	bcc.n	8004258 <OD_write_1201_additional+0x1a8>
 8004250:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004252:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004256:	d303      	bcc.n	8004260 <OD_write_1201_additional+0x1b0>
 8004258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800425a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800425e:	d901      	bls.n	8004264 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8004260:	230f      	movs	r3, #15
 8004262:	e031      	b.n	80042c8 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427a:	9201      	str	r2, [sp, #4]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	4623      	mov	r3, r4
 8004280:	4602      	mov	r2, r0
 8004282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004284:	f7ff fea8 	bl	8003fd8 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8004288:	e017      	b.n	80042ba <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d001      	beq.n	8004294 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8004290:	230b      	movs	r3, #11
 8004292:	e019      	b.n	80042c8 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8004294:	68b8      	ldr	r0, [r7, #8]
 8004296:	f7ff fd5b 	bl	8003d50 <CO_getUint8>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 80042a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <OD_write_1201_additional+0x200>
 80042a8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	da03      	bge.n	80042b8 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 80042b0:	230f      	movs	r3, #15
 80042b2:	e009      	b.n	80042c8 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 80042b4:	230e      	movs	r3, #14
 80042b6:	e007      	b.n	80042c8 <OD_write_1201_additional+0x218>
            break;
 80042b8:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f7fd ff17 	bl	80020f4 <OD_writeOriginal>
 80042c6:	4603      	mov	r3, r0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3734      	adds	r7, #52	; 0x34
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd90      	pop	{r4, r7, pc}
 80042d0:	3ffff800 	.word	0x3ffff800

080042d4 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08c      	sub	sp, #48	; 0x30
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <CO_SDOserver_init+0x26>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <CO_SDOserver_init+0x26>
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <CO_SDOserver_init+0x26>
 80042f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295
 80042fe:	e0fd      	b.n	80044fc <CO_SDOserver_init+0x228>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 800430c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800430e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004312:	fb03 f202 	mul.w	r2, r3, r2
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
 800431a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800431c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004320:	fb03 f202 	mul.w	r2, r3, r2
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
    SDO->state = CO_SDO_ST_IDLE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d117      	bne.n	8004366 <CO_SDOserver_init+0x92>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <CO_SDOserver_init+0x70>
 800433c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004340:	2b00      	cmp	r3, #0
 8004342:	da02      	bge.n	800434a <CO_SDOserver_init+0x76>
 8004344:	f04f 33ff 	mov.w	r3, #4294967295
 8004348:	e0d8      	b.n	80044fc <CO_SDOserver_init+0x228>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004352:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800435c:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	611a      	str	r2, [r3, #16]
 8004364:	e0a4      	b.n	80044b0 <CO_SDOserver_init+0x1dc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fd0e 	bl	8003d88 <OD_getIndex>
 800436c:	4603      	mov	r3, r0
 800436e:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8004370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004372:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8004376:	d123      	bne.n	80043c0 <CO_SDOserver_init+0xec>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <CO_SDOserver_init+0xb2>
 800437e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da02      	bge.n	800438c <CO_SDOserver_init+0xb8>
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	e0b7      	b.n	80044fc <CO_SDOserver_init+0x228>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004394:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800439e:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80043a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043a8:	2301      	movs	r3, #1
 80043aa:	2101      	movs	r1, #1
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fd50 	bl	8003e52 <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 80043b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043b4:	2301      	movs	r3, #1
 80043b6:	2102      	movs	r1, #2
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fd4a 	bl	8003e52 <OD_set_u32>
 80043be:	e077      	b.n	80044b0 <CO_SDOserver_init+0x1dc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 80043c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043c2:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80043c6:	d96f      	bls.n	80044a8 <CO_SDOserver_init+0x1d4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 80043c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043ca:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80043ce:	d26b      	bcs.n	80044a8 <CO_SDOserver_init+0x1d4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 80043d0:	f107 021d 	add.w	r2, r7, #29
 80043d4:	2301      	movs	r3, #1
 80043d6:	2100      	movs	r1, #0
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fd10 	bl	8003dfe <OD_get_u8>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 80043e4:	f107 0218 	add.w	r2, r7, #24
 80043e8:	2301      	movs	r3, #1
 80043ea:	2101      	movs	r1, #1
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fd1b 	bl	8003e28 <OD_get_u32>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 80043f8:	f107 0214 	add.w	r2, r7, #20
 80043fc:	2301      	movs	r3, #1
 80043fe:	2102      	movs	r1, #2
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fd11 	bl	8003e28 <OD_get_u32>
 8004406:	4603      	mov	r3, r0
 8004408:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 800440a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <CO_SDOserver_init+0x15a>
 8004412:	7f7b      	ldrb	r3, [r7, #29]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d002      	beq.n	800441e <CO_SDOserver_init+0x14a>
 8004418:	7f7b      	ldrb	r3, [r7, #29]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d107      	bne.n	800442e <CO_SDOserver_init+0x15a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 800441e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <CO_SDOserver_init+0x15a>
 8004426:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <CO_SDOserver_init+0x16c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 800442e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <CO_SDOserver_init+0x166>
 8004434:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004438:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 800443a:	f06f 030b 	mvn.w	r3, #11
 800443e:	e05d      	b.n	80044fc <CO_SDOserver_init+0x228>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db05      	blt.n	8004452 <CO_SDOserver_init+0x17e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 800444a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800444e:	b29b      	uxth	r3, r3
 8004450:	e000      	b.n	8004454 <CO_SDOserver_init+0x180>
 8004452:	2300      	movs	r3, #0
 8004454:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	db05      	blt.n	8004468 <CO_SDOserver_init+0x194>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8004460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004464:	b29b      	uxth	r3, r3
 8004466:	e000      	b.n	800446a <CO_SDOserver_init+0x196>
 8004468:	2300      	movs	r3, #0
 800446a:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a23      	ldr	r2, [pc, #140]	; (8004504 <CO_SDOserver_init+0x230>)
 8004476:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <CO_SDOserver_init+0x234>)
 800447c:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3354      	adds	r3, #84	; 0x54
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fca6 	bl	8003dd6 <OD_extension_init>
 800448a:	4603      	mov	r3, r0
 800448c:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 800448e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <CO_SDOserver_init+0x1da>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8004496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <CO_SDOserver_init+0x1ce>
 800449c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80044a2:	f06f 030b 	mvn.w	r3, #11
 80044a6:	e029      	b.n	80044fc <CO_SDOserver_init+0x228>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80044a8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ac:	e026      	b.n	80044fc <CO_SDOserver_init+0x228>
        ) {
 80044ae:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ba:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80044c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80044ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044de:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 80044e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044e4:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 80044e8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80044ea:	9201      	str	r2, [sp, #4]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	4603      	mov	r3, r0
 80044f0:	460a      	mov	r2, r1
 80044f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff fd6f 	bl	8003fd8 <CO_SDOserver_init_canRxTx>
 80044fa:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3728      	adds	r7, #40	; 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	08002045 	.word	0x08002045
 8004508:	080040b1 	.word	0x080040b1

0800450c <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b08d      	sub	sp, #52	; 0x34
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	4611      	mov	r1, r2
 8004518:	461a      	mov	r2, r3
 800451a:	460b      	mov	r3, r1
 800451c:	71fb      	strb	r3, [r7, #7]
 800451e:	4613      	mov	r3, r2
 8004520:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (SDO->finished) {
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	2b00      	cmp	r3, #0
 8004530:	d07c      	beq.n	800462c <validateAndWriteToOD+0x120>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004536:	2b00      	cmp	r3, #0
 8004538:	d015      	beq.n	8004566 <validateAndWriteToOD+0x5a>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004542:	429a      	cmp	r2, r3
 8004544:	d00f      	beq.n	8004566 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800454e:	429a      	cmp	r2, r3
 8004550:	d901      	bls.n	8004556 <validateAndWriteToOD+0x4a>
 8004552:	4a8b      	ldr	r2, [pc, #556]	; (8004780 <validateAndWriteToOD+0x274>)
 8004554:	e000      	b.n	8004558 <validateAndWriteToOD+0x4c>
 8004556:	4a8b      	ldr	r2, [pc, #556]	; (8004784 <validateAndWriteToOD+0x278>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	751a      	strb	r2, [r3, #20]
            return false;
 8004562:	2300      	movs	r3, #0
 8004564:	e107      	b.n	8004776 <validateAndWriteToOD+0x26a>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004572:	b25b      	sxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	da3d      	bge.n	80045f4 <validateAndWriteToOD+0xe8>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <validateAndWriteToOD+0x7c>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004584:	429a      	cmp	r2, r3
 8004586:	d935      	bls.n	80045f4 <validateAndWriteToOD+0xe8>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800458e:	3302      	adds	r3, #2
 8004590:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004594:	d82e      	bhi.n	80045f4 <validateAndWriteToOD+0xe8>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800459c:	1c59      	adds	r1, r3, #1
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <validateAndWriteToOD+0xbc>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d910      	bls.n	80045ea <validateAndWriteToOD+0xde>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80045ce:	1c59      	adds	r1, r3, #1
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
 80045f2:	e02d      	b.n	8004650 <validateAndWriteToOD+0x144>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <validateAndWriteToOD+0xf8>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
 8004602:	e025      	b.n	8004650 <validateAndWriteToOD+0x144>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800460a:	429a      	cmp	r2, r3
 800460c:	d020      	beq.n	8004650 <validateAndWriteToOD+0x144>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004614:	429a      	cmp	r2, r3
 8004616:	d201      	bcs.n	800461c <validateAndWriteToOD+0x110>
 8004618:	4a59      	ldr	r2, [pc, #356]	; (8004780 <validateAndWriteToOD+0x274>)
 800461a:	e000      	b.n	800461e <validateAndWriteToOD+0x112>
 800461c:	4a59      	ldr	r2, [pc, #356]	; (8004784 <validateAndWriteToOD+0x278>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	751a      	strb	r2, [r3, #20]
            return false;
 8004628:	2300      	movs	r3, #0
 800462a:	e0a4      	b.n	8004776 <validateAndWriteToOD+0x26a>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <validateAndWriteToOD+0x144>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800463c:	429a      	cmp	r2, r3
 800463e:	d907      	bls.n	8004650 <validateAndWriteToOD+0x144>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a4f      	ldr	r2, [pc, #316]	; (8004780 <validateAndWriteToOD+0x274>)
 8004644:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	751a      	strb	r2, [r3, #20]
            return false;
 800464c:	2300      	movs	r3, #0
 800464e:	e092      	b.n	8004776 <validateAndWriteToOD+0x26a>
        }
    }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    /* calculate crc on current data */
    if (SDO->block_crcEnabled && crcOperation > 0) {
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8004656:	2b00      	cmp	r3, #0
 8004658:	d022      	beq.n	80046a0 <validateAndWriteToOD+0x194>
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01f      	beq.n	80046a0 <validateAndWriteToOD+0x194>
        SDO->block_crc = crc16_ccitt(SDO->buf, bufOffsetWrOrig, SDO->block_crc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 800466c:	461a      	mov	r2, r3
 800466e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004670:	f002 f8f0 	bl	8006854 <crc16_ccitt>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
        if (crcOperation == 2 && crcClient != SDO->block_crc) {
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d10d      	bne.n	80046a0 <validateAndWriteToOD+0x194>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 800468a:	88ba      	ldrh	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d007      	beq.n	80046a0 <validateAndWriteToOD+0x194>
            *abortCode = CO_SDO_AB_CRC;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4a3d      	ldr	r2, [pc, #244]	; (8004788 <validateAndWriteToOD+0x27c>)
 8004694:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	751a      	strb	r2, [r3, #20]
            return false;
 800469c:	2300      	movs	r3, #0
 800469e:	e06a      	b.n	8004776 <validateAndWriteToOD+0x26a>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3318      	adds	r3, #24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fb7e 	bl	8003daa <OD_mappable>
 80046ae:	6238      	str	r0, [r7, #32]

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <validateAndWriteToOD+0x1bc>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ba:	f3ef 8210 	mrs	r2, PRIMASK
 80046be:	61ba      	str	r2, [r7, #24]
  return(result);
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80046c4:	b672      	cpsid	i
}
 80046c6:	bf00      	nop
    // put total size as last arg instead of useless 0
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f103 0018 	add.w	r0, r3, #24
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3364      	adds	r3, #100	; 0x64
 80046e2:	47a0      	blx	r4
 80046e4:	4603      	mov	r3, r0
 80046e6:	77fb      	strb	r3, [r7, #31]
                                   SDO->bufOffsetWr, & SDO->sizeInd);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <validateAndWriteToOD+0x1f2>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f383 8810 	msr	PRIMASK, r3
}
 80046fc:	bf00      	nop

    SDO->bufOffsetWr = 0;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004706:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d011      	beq.n	8004732 <validateAndWriteToOD+0x226>
 800470e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d00c      	beq.n	8004732 <validateAndWriteToOD+0x226>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004718:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fd feb1 	bl	8002484 <OD_getSDOabCode>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	751a      	strb	r2, [r3, #20]
        return false;
 800472e:	2300      	movs	r3, #0
 8004730:	e021      	b.n	8004776 <validateAndWriteToOD+0x26a>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <validateAndWriteToOD+0x248>
 800473a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d107      	bne.n	8004754 <validateAndWriteToOD+0x248>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4a0f      	ldr	r2, [pc, #60]	; (8004784 <validateAndWriteToOD+0x278>)
 8004748:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	751a      	strb	r2, [r3, #20]
        return false;
 8004750:	2300      	movs	r3, #0
 8004752:	e010      	b.n	8004776 <validateAndWriteToOD+0x26a>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10b      	bne.n	8004774 <validateAndWriteToOD+0x268>
 800475c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d107      	bne.n	8004774 <validateAndWriteToOD+0x268>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4a06      	ldr	r2, [pc, #24]	; (8004780 <validateAndWriteToOD+0x274>)
 8004768:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	751a      	strb	r2, [r3, #20]
        return false;
 8004770:	2300      	movs	r3, #0
 8004772:	e000      	b.n	8004776 <validateAndWriteToOD+0x26a>
    }

    return true;
 8004774:	2301      	movs	r3, #1
}
 8004776:	4618      	mov	r0, r3
 8004778:	3734      	adds	r7, #52	; 0x34
 800477a:	46bd      	mov	sp, r7
 800477c:	bd90      	pop	{r4, r7, pc}
 800477e:	bf00      	nop
 8004780:	06070012 	.word	0x06070012
 8004784:	06070013 	.word	0x06070013
 8004788:	05040004 	.word	0x05040004

0800478c <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b08f      	sub	sp, #60	; 0x3c
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!SDO->finished && countRemain < countMinimum) {
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 80c6 	bne.w	8004940 <readFromOd+0x1b4>
 80047b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	f080 80c1 	bcs.w	8004940 <readFromOd+0x1b4>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80047d0:	4413      	add	r3, r2
 80047d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d4:	4619      	mov	r1, r3
 80047d6:	f00a f90f 	bl	800e9f8 <memmove>
        SDO->bufOffsetRd = 0;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        SDO->bufOffsetWr = countRemain;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	4413      	add	r3, r2
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3318      	adds	r3, #24
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff facf 	bl	8003daa <OD_mappable>
 800480c:	6238      	str	r0, [r7, #32]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <readFromOd+0x9a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004818:	f3ef 8210 	mrs	r2, PRIMASK
 800481c:	61fa      	str	r2, [r7, #28]
  return(result);
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004822:	b672      	cpsid	i
}
 8004824:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f103 0018 	add.w	r0, r3, #24
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004838:	47a0      	blx	r4
 800483a:	4603      	mov	r3, r0
 800483c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <readFromOd+0xca>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004856:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <readFromOd+0xf6>
 800485e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d00c      	beq.n	8004882 <readFromOd+0xf6>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004868:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800486c:	4618      	mov	r0, r3
 800486e:	f7fd fe09 	bl	8002484 <OD_getSDOabCode>
 8004872:	4602      	mov	r2, r0
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	751a      	strb	r2, [r3, #20]
            return false;
 800487e:	2300      	movs	r3, #0
 8004880:	e05f      	b.n	8004942 <readFromOd+0x1b6>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d022      	beq.n	80048ce <readFromOd+0x142>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800488e:	b25b      	sxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	da1c      	bge.n	80048ce <readFromOd+0x142>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	4413      	add	r3, r2
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 800489e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048a0:	f7fb fc96 	bl	80001d0 <strlen>
 80048a4:	6338      	str	r0, [r7, #48]	; 0x30
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <readFromOd+0x124>
 80048ac:	2301      	movs	r3, #1
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30
            if (countStr < countRd) {
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d20a      	bcs.n	80048ce <readFromOd+0x142>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	441a      	add	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	441a      	add	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <readFromOd+0x162>
 80048e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d110      	bne.n	8004910 <readFromOd+0x184>
            SDO->finished = false;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d90a      	bls.n	8004916 <readFromOd+0x18a>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <readFromOd+0x1c0>)
 8004904:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	751a      	strb	r2, [r3, #20]
                return false;
 800490c:	2300      	movs	r3, #0
 800490e:	e018      	b.n	8004942 <readFromOd+0x1b6>
            }
        }
        else {
            SDO->finished = true;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	671a      	str	r2, [r3, #112]	; 0x70
        }
#endif

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
        /* update the crc */
        if (calculateCrc && SDO->block_crcEnabled) {
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <readFromOd+0x1b4>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <readFromOd+0x1b4>
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
 8004926:	6979      	ldr	r1, [r7, #20]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 800492e:	461a      	mov	r2, r3
 8004930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004932:	f001 ff8f 	bl	8006854 <crc16_ccitt>
 8004936:	4603      	mov	r3, r0
 8004938:	461a      	mov	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
        }
#endif

    }
    return true;
 8004940:	2301      	movs	r3, #1
}
 8004942:	4618      	mov	r0, r3
 8004944:	373c      	adds	r7, #60	; 0x3c
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}
 800494a:	bf00      	nop
 800494c:	06040047 	.word	0x06040047

08004950 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b0a5      	sub	sp, #148	; 0x94
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8004964:	f06f 0301 	mvn.w	r3, #1
 8004968:	f001 b9a3 	b.w	8005cb2 <CO_SDOserver_process+0x1362>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004972:	2300      	movs	r3, #0
 8004974:	633b      	str	r3, [r7, #48]	; 0x30
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	66fb      	str	r3, [r7, #108]	; 0x6c


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <CO_SDOserver_process+0x58>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	7d1b      	ldrb	r3, [r3, #20]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <CO_SDOserver_process+0x58>
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <CO_SDOserver_process+0x58>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80049a4:	f000 bd2e 	b.w	8005404 <CO_SDOserver_process+0xab4>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <CO_SDOserver_process+0x66>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <CO_SDOserver_process+0x7c>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80049c8:	f000 bd1c 	b.w	8005404 <CO_SDOserver_process+0xab4>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 80049cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8518 	beq.w	8005404 <CO_SDOserver_process+0xab4>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	7d1b      	ldrb	r3, [r3, #20]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 80ec 	bne.w	8004bb8 <CO_SDOserver_process+0x268>
            bool_t upload = false;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d103      	bne.n	80049fc <CO_SDOserver_process+0xac>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2211      	movs	r2, #17
 80049f8:	751a      	strb	r2, [r3, #20]
 80049fa:	e029      	b.n	8004a50 <CO_SDOserver_process+0x100>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d106      	bne.n	8004a14 <CO_SDOserver_process+0xc4>
                upload = true;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2221      	movs	r2, #33	; 0x21
 8004a10:	751a      	strb	r2, [r3, #20]
 8004a12:	e01d      	b.n	8004a50 <CO_SDOserver_process+0x100>
            }
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
            else if ((SDO->CANrxData[0] & 0xF9) == 0xC0) {
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8004a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a20:	d103      	bne.n	8004a2a <CO_SDOserver_process+0xda>
                SDO->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2251      	movs	r2, #81	; 0x51
 8004a26:	751a      	strb	r2, [r3, #20]
 8004a28:	e012      	b.n	8004a50 <CO_SDOserver_process+0x100>
            }
            else if ((SDO->CANrxData[0] & 0xFB) == 0xA0) {
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a30:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8004a34:	2ba0      	cmp	r3, #160	; 0xa0
 8004a36:	d106      	bne.n	8004a46 <CO_SDOserver_process+0xf6>
                upload = true;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2261      	movs	r2, #97	; 0x61
 8004a42:	751a      	strb	r2, [r3, #20]
 8004a44:	e004      	b.n	8004a50 <CO_SDOserver_process+0x100>
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004a46:	4bbc      	ldr	r3, [pc, #752]	; (8004d38 <CO_SDOserver_process+0x3e8>)
 8004a48:	633b      	str	r3, [r7, #48]	; 0x30
                SDO->state = CO_SDO_ST_ABORT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d164      	bne.n	8004b20 <CO_SDOserver_process+0x1d0>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5c:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 8004a5e:	b21a      	sxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b21b      	sxth	r3, r3
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	b21b      	sxth	r3, r3
 8004a6c:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7fd fbad 	bl	80021e8 <OD_find>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f103 0218 	add.w	r2, r3, #24
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f7fd fc00 	bl	80022a0 <OD_getSub>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8004aa6:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <CO_SDOserver_process+0x174>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004aae:	f997 306b 	ldrsb.w	r3, [r7, #107]	; 0x6b
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd fce6 	bl	8002484 <OD_getSDOabCode>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	751a      	strb	r2, [r3, #20]
 8004ac2:	e02d      	b.n	8004b20 <CO_SDOserver_process+0x1d0>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d105      	bne.n	8004ade <CO_SDOserver_process+0x18e>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8004ad2:	4b9a      	ldr	r3, [pc, #616]	; (8004d3c <CO_SDOserver_process+0x3ec>)
 8004ad4:	633b      	str	r3, [r7, #48]	; 0x30
                        SDO->state = CO_SDO_ST_ABORT;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	751a      	strb	r2, [r3, #20]
 8004adc:	e020      	b.n	8004b20 <CO_SDOserver_process+0x1d0>
                    }
                    else if (upload
 8004ade:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00c      	beq.n	8004b00 <CO_SDOserver_process+0x1b0>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <CO_SDOserver_process+0x1b0>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8004af4:	4b92      	ldr	r3, [pc, #584]	; (8004d40 <CO_SDOserver_process+0x3f0>)
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
                        SDO->state = CO_SDO_ST_ABORT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	751a      	strb	r2, [r3, #20]
 8004afe:	e00f      	b.n	8004b20 <CO_SDOserver_process+0x1d0>
                    }
                    else if (!upload
 8004b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <CO_SDOserver_process+0x1d0>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <CO_SDOserver_process+0x1d0>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8004b16:	4b8b      	ldr	r3, [pc, #556]	; (8004d44 <CO_SDOserver_process+0x3f4>)
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
                        SDO->state = CO_SDO_ST_ABORT;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8004b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d047      	beq.n	8004bb8 <CO_SDOserver_process+0x268>
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d144      	bne.n	8004bb8 <CO_SDOserver_process+0x268>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                SDO->sizeTran = 0;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8004b4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004b52:	2300      	movs	r3, #0
 8004b54:	2207      	movs	r2, #7
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7ff fe18 	bl	800478c <readFromOd>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d02a      	beq.n	8004bb8 <CO_SDOserver_process+0x268>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01a      	beq.n	8004ba0 <CO_SDOserver_process+0x250>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a1a      	ldr	r2, [r3, #32]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <CO_SDOserver_process+0x236>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	665a      	str	r2, [r3, #100]	; 0x64
 8004b84:	e018      	b.n	8004bb8 <CO_SDOserver_process+0x268>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d011      	beq.n	8004bb8 <CO_SDOserver_process+0x268>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004b94:	4b6c      	ldr	r3, [pc, #432]	; (8004d48 <CO_SDOserver_process+0x3f8>)
 8004b96:	633b      	str	r3, [r7, #48]	; 0x30
                            SDO->state = CO_SDO_ST_ABORT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	751a      	strb	r2, [r3, #20]
 8004b9e:	e00b      	b.n	8004bb8 <CO_SDOserver_process+0x268>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba6:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	db02      	blt.n	8004bb2 <CO_SDOserver_process+0x262>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	e000      	b.n	8004bb4 <CO_SDOserver_process+0x264>
 8004bb2:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	7d1b      	ldrb	r3, [r3, #20]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 840f 	beq.w	80053e2 <CO_SDOserver_process+0xa92>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	7d1b      	ldrb	r3, [r3, #20]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	f000 8409 	beq.w	80053e2 <CO_SDOserver_process+0xa92>
        switch (SDO->state) {
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	7d1b      	ldrb	r3, [r3, #20]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	3b11      	subs	r3, #17
 8004bd8:	2b54      	cmp	r3, #84	; 0x54
 8004bda:	f200 83fc 	bhi.w	80053d6 <CO_SDOserver_process+0xa86>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <CO_SDOserver_process+0x294>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004d4d 	.word	0x08004d4d
 8004be8:	080053d7 	.word	0x080053d7
 8004bec:	08004f35 	.word	0x08004f35
 8004bf0:	080053d7 	.word	0x080053d7
 8004bf4:	080053d7 	.word	0x080053d7
 8004bf8:	080053d7 	.word	0x080053d7
 8004bfc:	080053d7 	.word	0x080053d7
 8004c00:	080053d7 	.word	0x080053d7
 8004c04:	080053d7 	.word	0x080053d7
 8004c08:	080053d7 	.word	0x080053d7
 8004c0c:	080053d7 	.word	0x080053d7
 8004c10:	080053d7 	.word	0x080053d7
 8004c14:	080053d7 	.word	0x080053d7
 8004c18:	080053d7 	.word	0x080053d7
 8004c1c:	080053d7 	.word	0x080053d7
 8004c20:	080053d7 	.word	0x080053d7
 8004c24:	0800502d 	.word	0x0800502d
 8004c28:	080053d7 	.word	0x080053d7
 8004c2c:	08005035 	.word	0x08005035
 8004c30:	080053d7 	.word	0x080053d7
 8004c34:	080053d7 	.word	0x080053d7
 8004c38:	080053d7 	.word	0x080053d7
 8004c3c:	080053d7 	.word	0x080053d7
 8004c40:	080053d7 	.word	0x080053d7
 8004c44:	080053d7 	.word	0x080053d7
 8004c48:	080053d7 	.word	0x080053d7
 8004c4c:	080053d7 	.word	0x080053d7
 8004c50:	080053d7 	.word	0x080053d7
 8004c54:	080053d7 	.word	0x080053d7
 8004c58:	080053d7 	.word	0x080053d7
 8004c5c:	080053d7 	.word	0x080053d7
 8004c60:	080053d7 	.word	0x080053d7
 8004c64:	080053d7 	.word	0x080053d7
 8004c68:	080053d7 	.word	0x080053d7
 8004c6c:	080053d7 	.word	0x080053d7
 8004c70:	080053d7 	.word	0x080053d7
 8004c74:	080053d7 	.word	0x080053d7
 8004c78:	080053d7 	.word	0x080053d7
 8004c7c:	080053d7 	.word	0x080053d7
 8004c80:	080053d7 	.word	0x080053d7
 8004c84:	080053d7 	.word	0x080053d7
 8004c88:	080053d7 	.word	0x080053d7
 8004c8c:	080053d7 	.word	0x080053d7
 8004c90:	080053d7 	.word	0x080053d7
 8004c94:	080053d7 	.word	0x080053d7
 8004c98:	080053d7 	.word	0x080053d7
 8004c9c:	080053d7 	.word	0x080053d7
 8004ca0:	080053d7 	.word	0x080053d7
 8004ca4:	080053d7 	.word	0x080053d7
 8004ca8:	080053d7 	.word	0x080053d7
 8004cac:	080053d7 	.word	0x080053d7
 8004cb0:	080053d7 	.word	0x080053d7
 8004cb4:	080053d7 	.word	0x080053d7
 8004cb8:	080053d7 	.word	0x080053d7
 8004cbc:	080053d7 	.word	0x080053d7
 8004cc0:	080053d7 	.word	0x080053d7
 8004cc4:	080053d7 	.word	0x080053d7
 8004cc8:	080053d7 	.word	0x080053d7
 8004ccc:	080053d7 	.word	0x080053d7
 8004cd0:	080053d7 	.word	0x080053d7
 8004cd4:	080053d7 	.word	0x080053d7
 8004cd8:	080053d7 	.word	0x080053d7
 8004cdc:	080053d7 	.word	0x080053d7
 8004ce0:	080053d7 	.word	0x080053d7
 8004ce4:	08005091 	.word	0x08005091
 8004ce8:	080053d7 	.word	0x080053d7
 8004cec:	080053e7 	.word	0x080053e7
 8004cf0:	080053d7 	.word	0x080053d7
 8004cf4:	08005121 	.word	0x08005121
 8004cf8:	080053d7 	.word	0x080053d7
 8004cfc:	080053d7 	.word	0x080053d7
 8004d00:	080053d7 	.word	0x080053d7
 8004d04:	080053d7 	.word	0x080053d7
 8004d08:	080053d7 	.word	0x080053d7
 8004d0c:	080053d7 	.word	0x080053d7
 8004d10:	080053d7 	.word	0x080053d7
 8004d14:	080053d7 	.word	0x080053d7
 8004d18:	080053d7 	.word	0x080053d7
 8004d1c:	080053d7 	.word	0x080053d7
 8004d20:	080053d7 	.word	0x080053d7
 8004d24:	080051d7 	.word	0x080051d7
 8004d28:	080053d7 	.word	0x080053d7
 8004d2c:	080052a1 	.word	0x080052a1
 8004d30:	080052c7 	.word	0x080052c7
 8004d34:	080052c7 	.word	0x080052c7
 8004d38:	05040001 	.word	0x05040001
 8004d3c:	06010000 	.word	0x06010000
 8004d40:	06010001 	.word	0x06010001
 8004d44:	06010002 	.word	0x06010002
 8004d48:	06040047 	.word	0x06040047
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80b2 	beq.w	8004ec0 <CO_SDOserver_process+0x570>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8004d62:	2304      	movs	r3, #4
 8004d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                if (SDO->CANrxData[0] & 0x01)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00c      	beq.n	8004d90 <CO_SDOserver_process+0x440>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d8e:	e008      	b.n	8004da2 <CO_SDOserver_process+0x452>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8004d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <CO_SDOserver_process+0x452>
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d802      	bhi.n	8004da2 <CO_SDOserver_process+0x452>
                    dataSizeToWrite = sizeInOd;
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8004da2:	2300      	movs	r3, #0
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da6:	2300      	movs	r3, #0
 8004da8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004db4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004db8:	4618      	mov	r0, r3
 8004dba:	f009 fe0f 	bl	800e9dc <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc4:	b25b      	sxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da1c      	bge.n	8004e04 <CO_SDOserver_process+0x4b4>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <CO_SDOserver_process+0x48a>
 8004dd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d214      	bcs.n	8004e04 <CO_SDOserver_process+0x4b4>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	64bb      	str	r3, [r7, #72]	; 0x48
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 8004de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <CO_SDOserver_process+0x49e>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <CO_SDOserver_process+0x4a0>
 8004dee:	2302      	movs	r3, #2
 8004df0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004df4:	4413      	add	r3, r2
 8004df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e00:	621a      	str	r2, [r3, #32]
                ) {
 8004e02:	e019      	b.n	8004e38 <CO_SDOserver_process+0x4e8>
                }
                else if (sizeInOd == 0) {
 8004e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <CO_SDOserver_process+0x4c4>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e10:	621a      	str	r2, [r3, #32]
 8004e12:	e011      	b.n	8004e38 <CO_SDOserver_process+0x4e8>
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8004e14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d00c      	beq.n	8004e38 <CO_SDOserver_process+0x4e8>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004e1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d901      	bls.n	8004e2c <CO_SDOserver_process+0x4dc>
 8004e28:	4b95      	ldr	r3, [pc, #596]	; (8005080 <CO_SDOserver_process+0x730>)
 8004e2a:	e000      	b.n	8004e2e <CO_SDOserver_process+0x4de>
 8004e2c:	4b95      	ldr	r3, [pc, #596]	; (8005084 <CO_SDOserver_process+0x734>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8004e2e:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	751a      	strb	r2, [r3, #20]
                    break;
 8004e36:	e2dd      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3318      	adds	r3, #24
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fe ffb2 	bl	8003daa <OD_mappable>
 8004e46:	6478      	str	r0, [r7, #68]	; 0x44

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8004e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <CO_SDOserver_process+0x510>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8210 	mrs	r2, PRIMASK
 8004e56:	63ba      	str	r2, [r7, #56]	; 0x38
  return(result);
 8004e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e5a:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004e5c:	b672      	cpsid	i
}
 8004e5e:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f103 0018 	add.w	r0, r3, #24
 8004e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e6e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004e72:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004e76:	47a0      	blx	r4
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8004e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <CO_SDOserver_process+0x544>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	bf00      	nop

                if (odRet != ODR_OK) {
 8004e94:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <CO_SDOserver_process+0x562>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004e9c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd faef 	bl	8002484 <OD_getSDOabCode>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	751a      	strb	r2, [r3, #20]
                    break;
 8004eb0:	e2a0      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2212      	movs	r2, #18
 8004eb6:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8004ebe:	e299      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                if (SDO->CANrxData[0] & 0x01) {
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d028      	beq.n	8004f20 <CO_SDOserver_process+0x5d0>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	653b      	str	r3, [r7, #80]	; 0x50
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3340      	adds	r3, #64	; 0x40
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	623b      	str	r3, [r7, #32]
                    SDO->sizeInd = CO_SWAP_32(size);
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 8004ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01e      	beq.n	8004f26 <CO_SDOserver_process+0x5d6>
                        if (SDO->sizeInd > sizeInOd) {
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d205      	bcs.n	8004efe <CO_SDOserver_process+0x5ae>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004ef2:	4b63      	ldr	r3, [pc, #396]	; (8005080 <CO_SDOserver_process+0x730>)
 8004ef4:	633b      	str	r3, [r7, #48]	; 0x30
                            SDO->state = CO_SDO_ST_ABORT;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	751a      	strb	r2, [r3, #20]
                            break;
 8004efc:	e27a      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                        else if (SDO->sizeInd < sizeInOd
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d90e      	bls.n	8004f26 <CO_SDOserver_process+0x5d6>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db08      	blt.n	8004f26 <CO_SDOserver_process+0x5d6>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8004f14:	4b5b      	ldr	r3, [pc, #364]	; (8005084 <CO_SDOserver_process+0x734>)
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
                            SDO->state = CO_SDO_ST_ABORT;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	751a      	strb	r2, [r3, #20]
                            break;
 8004f1e:	e269      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                    SDO->sizeInd = 0;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2212      	movs	r2, #18
 8004f2a:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 8004f32:	e25f      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d16e      	bne.n	8005020 <CO_SDOserver_process+0x6d0>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
                if (toggle != SDO->toggle) {
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004f70:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d005      	beq.n	8004f84 <CO_SDOserver_process+0x634>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004f78:	4b43      	ldr	r3, [pc, #268]	; (8005088 <CO_SDOserver_process+0x738>)
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	751a      	strb	r2, [r3, #20]
                    break;
 8004f82:	e237      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	657b      	str	r3, [r7, #84]	; 0x54
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004fa2:	18d0      	adds	r0, r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	333d      	adds	r3, #61	; 0x3d
 8004fa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004faa:	4619      	mov	r1, r3
 8004fac:	f009 fd16 	bl	800e9dc <memcpy>
                SDO->bufOffsetWr += count;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb8:	441a      	add	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
                SDO->sizeTran += count;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc6:	441a      	add	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <CO_SDOserver_process+0x69c>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d905      	bls.n	8004fec <CO_SDOserver_process+0x69c>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <CO_SDOserver_process+0x730>)
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	751a      	strb	r2, [r3, #20]
                    break;
 8004fea:	e203      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <CO_SDOserver_process+0x6b2>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004ffa:	f5c3 7361 	rsb	r3, r3, #900	; 0x384
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d80a      	bhi.n	8005018 <CO_SDOserver_process+0x6c8>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8005002:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005006:	2300      	movs	r3, #0
 8005008:	2200      	movs	r2, #0
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff fa7e 	bl	800450c <validateAndWriteToOD>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 81e9 	beq.w	80053ea <CO_SDOserver_process+0xa9a>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2214      	movs	r2, #20
 800501c:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 800501e:	e1e9      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                abortCode = CO_SDO_AB_CMD;
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <CO_SDOserver_process+0x73c>)
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
                SDO->state = CO_SDO_ST_ABORT;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	751a      	strb	r2, [r3, #20]
            break;
 800502a:	e1e3      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2222      	movs	r2, #34	; 0x22
 8005030:	751a      	strb	r2, [r3, #20]
            break;
 8005032:	e1df      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800503e:	2b60      	cmp	r3, #96	; 0x60
 8005040:	d117      	bne.n	8005072 <CO_SDOserver_process+0x722>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                if (toggle != SDO->toggle) {
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005056:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800505a:	429a      	cmp	r2, r3
 800505c:	d005      	beq.n	800506a <CO_SDOserver_process+0x71a>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <CO_SDOserver_process+0x738>)
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	751a      	strb	r2, [r3, #20]
                    break;
 8005068:	e1c4      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2224      	movs	r2, #36	; 0x24
 800506e:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8005070:	e1c0      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                abortCode = CO_SDO_AB_CMD;
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <CO_SDOserver_process+0x73c>)
 8005074:	633b      	str	r3, [r7, #48]	; 0x30
                SDO->state = CO_SDO_ST_ABORT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	751a      	strb	r2, [r3, #20]
            break;
 800507c:	e1ba      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
 800507e:	bf00      	nop
 8005080:	06070012 	.word	0x06070012
 8005084:	06070013 	.word	0x06070013
 8005088:	05030000 	.word	0x05030000
 800508c:	05040001 	.word	0x05040001
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
        case CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ: {
            SDO->block_crcEnabled = (SDO->CANrxData[0] & 0x04) != 0;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	bf14      	ite	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	2300      	moveq	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

            /* is size indicated? */
            if ((SDO->CANrxData[0] & 0x02) != 0) {
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d028      	beq.n	800510c <CO_SDOserver_process+0x7bc>
                uint32_t size;
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	65fb      	str	r3, [r7, #92]	; 0x5c

                memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3340      	adds	r3, #64	; 0x40
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	61fb      	str	r3, [r7, #28]
                SDO->sizeInd = CO_SWAP_32(size);
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	665a      	str	r2, [r3, #100]	; 0x64

                /* Indicated size of SDO matches sizeof OD variable? */
                if (sizeInOd > 0) {
 80050ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01e      	beq.n	8005112 <CO_SDOserver_process+0x7c2>
                    if (SDO->sizeInd > sizeInOd) {
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050da:	429a      	cmp	r2, r3
 80050dc:	d205      	bcs.n	80050ea <CO_SDOserver_process+0x79a>
                        abortCode = CO_SDO_AB_DATA_LONG;
 80050de:	4ba3      	ldr	r3, [pc, #652]	; (800536c <CO_SDOserver_process+0xa1c>)
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30
                        SDO->state = CO_SDO_ST_ABORT;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	751a      	strb	r2, [r3, #20]
                        break;
 80050e8:	e184      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                    }
                    /* strings are allowed to be shorter */
                    else if (SDO->sizeInd < sizeInOd
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d90e      	bls.n	8005112 <CO_SDOserver_process+0x7c2>
                             && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050fa:	b25b      	sxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	db08      	blt.n	8005112 <CO_SDOserver_process+0x7c2>
                    ) {
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8005100:	4b9b      	ldr	r3, [pc, #620]	; (8005370 <CO_SDOserver_process+0xa20>)
 8005102:	633b      	str	r3, [r7, #48]	; 0x30
                        SDO->state = CO_SDO_ST_ABORT;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	751a      	strb	r2, [r3, #20]
                        break;
 800510a:	e173      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                    }
                }
            }
            else {
                SDO->sizeInd = 0;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	665a      	str	r2, [r3, #100]	; 0x64
            }
            SDO->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_RSP;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2252      	movs	r2, #82	; 0x52
 8005116:	751a      	strb	r2, [r3, #20]
            SDO->finished = false;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 800511e:	e169      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
            /* data are copied directly in the receive function */
            break;
        }

        case CO_SDO_ST_DOWNLOAD_BLK_END_REQ: {
            if ((SDO->CANrxData[0] & 0xE3) == 0xC1) {
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005126:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 800512a:	2bc1      	cmp	r3, #193	; 0xc1
 800512c:	d14d      	bne.n	80051ca <CO_SDOserver_process+0x87a>
                /* Get number of data bytes in last segment, that do not
                    * contain data. Then reduce buffer. */
                uint8_t noData = ((SDO->CANrxData[0] >> 2) & 0x07);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	089b      	lsrs	r3, r3, #2
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                if (SDO->bufOffsetWr <= noData) {
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005146:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800514a:	429a      	cmp	r2, r3
 800514c:	d805      	bhi.n	800515a <CO_SDOserver_process+0x80a>
                    /* just in case, should never happen */
                    abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800514e:	4b89      	ldr	r3, [pc, #548]	; (8005374 <CO_SDOserver_process+0xa24>)
 8005150:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	751a      	strb	r2, [r3, #20]
                    break;
 8005158:	e14c      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                }
                SDO->sizeTran -= noData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800515e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005162:	1ad2      	subs	r2, r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr -= noData;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800516e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005172:	1ad2      	subs	r2, r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

                uint16_t crcClient = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                if (SDO->block_crcEnabled) {
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00f      	beq.n	80051aa <CO_SDOserver_process+0x85a>
                    crcClient = ((uint16_t) SDO->CANrxData[2]) << 8;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                    crcClient |= SDO->CANrxData[1];
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b29a      	uxth	r2, r3
 80051a0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                }

                if (!validateAndWriteToOD(SDO, &abortCode, 2, crcClient))
 80051aa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80051ae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80051b2:	2202      	movs	r2, #2
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff f9a9 	bl	800450c <validateAndWriteToOD>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8116 	beq.w	80053ee <CO_SDOserver_process+0xa9e>
                    break;

                SDO->state = CO_SDO_ST_DOWNLOAD_BLK_END_RSP;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2256      	movs	r2, #86	; 0x56
 80051c6:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 80051c8:	e114      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                abortCode = CO_SDO_AB_CMD;
 80051ca:	4b6b      	ldr	r3, [pc, #428]	; (8005378 <CO_SDOserver_process+0xa28>)
 80051cc:	633b      	str	r3, [r7, #48]	; 0x30
                SDO->state = CO_SDO_ST_ABORT;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	751a      	strb	r2, [r3, #20]
            break;
 80051d4:	e10e      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
        }

        case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ: {
            /* if pst (protocol switch threshold, byte5) is larger than data
             * size of OD variable, then switch to segmented transfer */
            if (SDO->sizeInd > 0 && SDO->CANrxData[5] > 0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d010      	beq.n	8005200 <CO_SDOserver_process+0x8b0>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <CO_SDOserver_process+0x8b0>
                && SDO->CANrxData[5] >= SDO->sizeInd)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ee:	461a      	mov	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d303      	bcc.n	8005200 <CO_SDOserver_process+0x8b0>
            {
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2222      	movs	r2, #34	; 0x22
 80051fc:	751a      	strb	r2, [r3, #20]
                    SDO->state = CO_SDO_ST_ABORT;
                    break;
                }
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_RSP;
            }
            break;
 80051fe:	e0f9      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                if ((SDO->CANrxData[0] & 0x04) != 0) {
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d013      	beq.n	8005236 <CO_SDOserver_process+0x8e6>
                    SDO->block_crcEnabled = true;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
                    SDO->block_crc = crc16_ccitt(SDO->buf, SDO->bufOffsetWr, 0);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005222:	2200      	movs	r2, #0
 8005224:	4619      	mov	r1, r3
 8005226:	f001 fb15 	bl	8006854 <crc16_ccitt>
 800522a:	4603      	mov	r3, r0
 800522c:	461a      	mov	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
 8005234:	e003      	b.n	800523e <CO_SDOserver_process+0x8ee>
                    SDO->block_crcEnabled = false;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
                SDO->block_blksize = SDO->CANrxData[4];
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
                if (SDO->block_blksize < 1 || SDO->block_blksize > 127) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <CO_SDOserver_process+0x910>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800525a:	b25b      	sxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	da05      	bge.n	800526c <CO_SDOserver_process+0x91c>
                    abortCode = CO_SDO_AB_BLOCK_SIZE;
 8005260:	4b46      	ldr	r3, [pc, #280]	; (800537c <CO_SDOserver_process+0xa2c>)
 8005262:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	751a      	strb	r2, [r3, #20]
                    break;
 800526a:	e0c3      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                if (!SDO->finished && SDO->bufOffsetWr < SDO->block_blksize*7U){
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	2b00      	cmp	r3, #0
 8005272:	d111      	bne.n	8005298 <CO_SDOserver_process+0x948>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8005280:	4619      	mov	r1, r3
 8005282:	460b      	mov	r3, r1
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	1a5b      	subs	r3, r3, r1
 8005288:	429a      	cmp	r2, r3
 800528a:	d205      	bcs.n	8005298 <CO_SDOserver_process+0x948>
                    abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800528c:	4b39      	ldr	r3, [pc, #228]	; (8005374 <CO_SDOserver_process+0xa24>)
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	751a      	strb	r2, [r3, #20]
                    break;
 8005296:	e0ad      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_RSP;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2262      	movs	r2, #98	; 0x62
 800529c:	751a      	strb	r2, [r3, #20]
            break;
 800529e:	e0a9      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
        }

        case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2: {
            if (SDO->CANrxData[0] == 0xA3) {
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a6:	2ba3      	cmp	r3, #163	; 0xa3
 80052a8:	d107      	bne.n	80052ba <CO_SDOserver_process+0x96a>
                SDO->block_seqno = 0;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                SDO->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2264      	movs	r2, #100	; 0x64
 80052b6:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 80052b8:	e09c      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                abortCode = CO_SDO_AB_CMD;
 80052ba:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <CO_SDOserver_process+0xa28>)
 80052bc:	633b      	str	r3, [r7, #48]	; 0x30
                SDO->state = CO_SDO_ST_ABORT;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	751a      	strb	r2, [r3, #20]
            break;
 80052c4:	e096      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
        }

        case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
        case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP: {
            if (SDO->CANrxData[0] == 0xA2) {
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2ba2      	cmp	r3, #162	; 0xa2
 80052ce:	d17c      	bne.n	80053ca <CO_SDOserver_process+0xa7a>
                SDO->block_blksize = SDO->CANrxData[2];
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
                if (SDO->block_blksize < 1 || SDO->block_blksize > 127) {
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <CO_SDOserver_process+0x9a2>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da05      	bge.n	80052fe <CO_SDOserver_process+0x9ae>
                    abortCode = CO_SDO_AB_BLOCK_SIZE;
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <CO_SDOserver_process+0xa2c>)
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	751a      	strb	r2, [r3, #20]
                    break;
 80052fc:	e07a      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                }

                /* check number of segments */
                if (SDO->CANrxData[1] < SDO->block_seqno) {
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800530a:	429a      	cmp	r2, r3
 800530c:	d220      	bcs.n	8005350 <CO_SDOserver_process+0xa00>
                    /* NOT all segments transferred successfully.
                     * Re-transmit data after erroneous segment. */
                    OD_size_t cntFailed = SDO->block_seqno - SDO->CANrxData[1];
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8005314:	461a      	mov	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	667b      	str	r3, [r7, #100]	; 0x64
                    cntFailed = cntFailed * 7 - SDO->block_noData;
 8005320:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f892 2416 	ldrb.w	r2, [r2, #1046]	; 0x416
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	667b      	str	r3, [r7, #100]	; 0x64
                    SDO->bufOffsetRd -= cntFailed;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                    SDO->sizeTran -= cntFailed;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005348:	1ad2      	subs	r2, r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	669a      	str	r2, [r3, #104]	; 0x68
 800534e:	e017      	b.n	8005380 <CO_SDOserver_process+0xa30>
                }
                else if (SDO->CANrxData[1] > SDO->block_seqno) {
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800535c:	429a      	cmp	r2, r3
 800535e:	d90f      	bls.n	8005380 <CO_SDOserver_process+0xa30>
                    /* something strange from server, break transmission */
                    abortCode = CO_SDO_AB_CMD;
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <CO_SDOserver_process+0xa28>)
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	751a      	strb	r2, [r3, #20]
                    break;
 800536a:	e043      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
 800536c:	06070012 	.word	0x06070012
 8005370:	06070013 	.word	0x06070013
 8005374:	06040047 	.word	0x06040047
 8005378:	05040001 	.word	0x05040001
 800537c:	05040002 	.word	0x05040002
                }

                /* refill data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, SDO->block_blksize * 7, true))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8005386:	461a      	mov	r2, r3
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	461a      	mov	r2, r3
 8005390:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005394:	2301      	movs	r3, #1
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f7ff f9f8 	bl	800478c <readFromOd>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d027      	beq.n	80053f2 <CO_SDOserver_process+0xaa2>
                    break;


                if (SDO->bufOffsetWr == SDO->bufOffsetRd) {
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d103      	bne.n	80053ba <CO_SDOserver_process+0xa6a>
                    SDO->state = CO_SDO_ST_UPLOAD_BLK_END_SREQ;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2266      	movs	r2, #102	; 0x66
 80053b6:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 80053b8:	e01c      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                    SDO->block_seqno = 0;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                    SDO->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2264      	movs	r2, #100	; 0x64
 80053c6:	751a      	strb	r2, [r3, #20]
            break;
 80053c8:	e014      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                abortCode = CO_SDO_AB_CMD;
 80053ca:	4ba6      	ldr	r3, [pc, #664]	; (8005664 <CO_SDOserver_process+0xd14>)
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
                SDO->state = CO_SDO_ST_ABORT;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	751a      	strb	r2, [r3, #20]
            break;
 80053d4:	e00e      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 80053d6:	4ba3      	ldr	r3, [pc, #652]	; (8005664 <CO_SDOserver_process+0xd14>)
 80053d8:	633b      	str	r3, [r7, #48]	; 0x30
            SDO->state = CO_SDO_ST_ABORT;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	751a      	strb	r2, [r3, #20]
 80053e0:	e008      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 80053e2:	bf00      	nop
 80053e4:	e006      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
            break;
 80053e6:	bf00      	nop
 80053e8:	e004      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                        break;
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                    break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <CO_SDOserver_process+0xaa4>
                    break;
 80053f2:	bf00      	nop
        SDO->timeoutTimer = 0;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 8005404:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005408:	2b01      	cmp	r3, #1
 800540a:	d141      	bne.n	8005490 <CO_SDOserver_process+0xb40>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005414:	429a      	cmp	r2, r3
 8005416:	d205      	bcs.n	8005424 <CO_SDOserver_process+0xad4>
            SDO->timeoutTimer += timeDifference_us;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	441a      	add	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542c:	429a      	cmp	r2, r3
 800542e:	d304      	bcc.n	800543a <CO_SDOserver_process+0xaea>
            abortCode = CO_SDO_AB_TIMEOUT;
 8005430:	4b8d      	ldr	r3, [pc, #564]	; (8005668 <CO_SDOserver_process+0xd18>)
 8005432:	633b      	str	r3, [r7, #48]	; 0x30
            SDO->state = CO_SDO_ST_ABORT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	751a      	strb	r2, [r3, #20]
        }
#endif

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
        /* Timeout for sub-block transmission */
        if (SDO->state == CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ) {
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	7d1b      	ldrb	r3, [r3, #20]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b53      	cmp	r3, #83	; 0x53
 8005442:	d11d      	bne.n	8005480 <CO_SDOserver_process+0xb30>
            if (SDO->block_timeoutTimer < SDO->block_SDOtimeoutTime_us) {
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005450:	429a      	cmp	r2, r3
 8005452:	d207      	bcs.n	8005464 <CO_SDOserver_process+0xb14>
                SDO->block_timeoutTimer += timeDifference_us;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	441a      	add	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            }
            if (SDO->block_timeoutTimer >= SDO->block_SDOtimeoutTime_us) {
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005470:	429a      	cmp	r2, r3
 8005472:	d305      	bcc.n	8005480 <CO_SDOserver_process+0xb30>
                /* SDO->state will change, processing will continue in this
                 * thread. Make memory barrier here with CO_FLAG_CLEAR() call.*/
                SDO->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_RSP;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2254      	movs	r2, #84	; 0x54
 8005478:	751a      	strb	r2, [r3, #20]
                CO_FLAG_CLEAR(SDO->CANrxNew);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <CO_SDOserver_process+0xb40>
            ret = CO_SDO_RT_transmittBufferFull;
 800548a:	2304      	movs	r3, #4
 800548c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8005490:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005494:	2b01      	cmp	r3, #1
 8005496:	f040 83bb 	bne.w	8005c10 <CO_SDOserver_process+0x12c0>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	3305      	adds	r3, #5
 80054a0:	2208      	movs	r2, #8
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f009 fac1 	bl	800ea2c <memset>

        switch (SDO->state) {
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	7d1b      	ldrb	r3, [r3, #20]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b24      	cmp	r3, #36	; 0x24
 80054b2:	dc61      	bgt.n	8005578 <CO_SDOserver_process+0xc28>
 80054b4:	2b12      	cmp	r3, #18
 80054b6:	da31      	bge.n	800551c <CO_SDOserver_process+0xbcc>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 80054b8:	e3ac      	b.n	8005c14 <CO_SDOserver_process+0x12c4>
        switch (SDO->state) {
 80054ba:	3b52      	subs	r3, #82	; 0x52
 80054bc:	2b14      	cmp	r3, #20
 80054be:	f200 83a9 	bhi.w	8005c14 <CO_SDOserver_process+0x12c4>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <CO_SDOserver_process+0xb78>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	08005869 	.word	0x08005869
 80054cc:	08005c15 	.word	0x08005c15
 80054d0:	08005915 	.word	0x08005915
 80054d4:	08005c15 	.word	0x08005c15
 80054d8:	080059eb 	.word	0x080059eb
 80054dc:	08005c15 	.word	0x08005c15
 80054e0:	08005c15 	.word	0x08005c15
 80054e4:	08005c15 	.word	0x08005c15
 80054e8:	08005c15 	.word	0x08005c15
 80054ec:	08005c15 	.word	0x08005c15
 80054f0:	08005c15 	.word	0x08005c15
 80054f4:	08005c15 	.word	0x08005c15
 80054f8:	08005c15 	.word	0x08005c15
 80054fc:	08005c15 	.word	0x08005c15
 8005500:	08005c15 	.word	0x08005c15
 8005504:	08005c15 	.word	0x08005c15
 8005508:	08005a11 	.word	0x08005a11
 800550c:	08005c15 	.word	0x08005c15
 8005510:	08005a95 	.word	0x08005a95
 8005514:	08005c15 	.word	0x08005c15
 8005518:	08005bbb 	.word	0x08005bbb
 800551c:	3b12      	subs	r3, #18
 800551e:	2b12      	cmp	r3, #18
 8005520:	f200 8378 	bhi.w	8005c14 <CO_SDOserver_process+0x12c4>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <CO_SDOserver_process+0xbdc>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	08005585 	.word	0x08005585
 8005530:	08005c15 	.word	0x08005c15
 8005534:	08005607 	.word	0x08005607
 8005538:	08005c15 	.word	0x08005c15
 800553c:	08005c15 	.word	0x08005c15
 8005540:	08005c15 	.word	0x08005c15
 8005544:	08005c15 	.word	0x08005c15
 8005548:	08005c15 	.word	0x08005c15
 800554c:	08005c15 	.word	0x08005c15
 8005550:	08005c15 	.word	0x08005c15
 8005554:	08005c15 	.word	0x08005c15
 8005558:	08005c15 	.word	0x08005c15
 800555c:	08005c15 	.word	0x08005c15
 8005560:	08005c15 	.word	0x08005c15
 8005564:	08005c15 	.word	0x08005c15
 8005568:	08005c15 	.word	0x08005c15
 800556c:	0800566d 	.word	0x0800566d
 8005570:	08005c15 	.word	0x08005c15
 8005574:	0800573b 	.word	0x0800573b
 8005578:	2b66      	cmp	r3, #102	; 0x66
 800557a:	f300 834b 	bgt.w	8005c14 <CO_SDOserver_process+0x12c4>
 800557e:	2b52      	cmp	r3, #82	; 0x52
 8005580:	da9b      	bge.n	80054ba <CO_SDOserver_process+0xb6a>
            break;
 8005582:	e347      	b.n	8005c14 <CO_SDOserver_process+0x12c4>
            SDO->CANtxBuff->data[0] = 0x60;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2260      	movs	r2, #96	; 0x60
 800558a:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80055b2:	721a      	strb	r2, [r3, #8]
            SDO->timeoutTimer = 0;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f003 f95b 	bl	8008880 <CO_CANsend>
            if (SDO->finished) {
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <CO_SDOserver_process+0xc90>
                SDO->state = CO_SDO_ST_IDLE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            break;
 80055de:	e31e      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
                SDO->toggle = 0x00;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
                SDO->bufOffsetRd = 0;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2213      	movs	r2, #19
 8005602:	751a      	strb	r2, [r3, #20]
            break;
 8005604:	e30b      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f042 0220 	orr.w	r2, r2, #32
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <CO_SDOserver_process+0xcd6>
 8005622:	2210      	movs	r2, #16
 8005624:	e000      	b.n	8005628 <CO_SDOserver_process+0xcd8>
 8005626:	2200      	movs	r2, #0
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            SDO->timeoutTimer = 0;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f003 f91e 	bl	8008880 <CO_CANsend>
            if (SDO->finished) {
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <CO_SDOserver_process+0xd0a>
                SDO->state = CO_SDO_ST_IDLE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            break;
 8005658:	e2e1      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2213      	movs	r2, #19
 800565e:	751a      	strb	r2, [r3, #20]
            break;
 8005660:	e2dd      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
 8005662:	bf00      	nop
 8005664:	05040001 	.word	0x05040001
 8005668:	05040000 	.word	0x05040000
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005670:	2b00      	cmp	r3, #0
 8005672:	d024      	beq.n	80056be <CO_SDOserver_process+0xd6e>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005678:	2b04      	cmp	r3, #4
 800567a:	d820      	bhi.n	80056be <CO_SDOserver_process+0xd6e>
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005680:	b2db      	uxtb	r3, r3
 8005682:	f1c3 0304 	rsb	r3, r3, #4
 8005686:	b2db      	uxtb	r3, r3
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	b2da      	uxtb	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f103 0009 	add.w	r0, r3, #9
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056aa:	461a      	mov	r2, r3
 80056ac:	f009 f996 	bl	800e9dc <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80056bc:	e020      	b.n	8005700 <CO_SDOserver_process+0xdb0>
                if (SDO->sizeInd > 0) {
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <CO_SDOserver_process+0xd94>
                    uint32_t sizeInd = SDO->sizeInd;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 80056cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ce:	61bb      	str	r3, [r7, #24]
                    SDO->CANtxBuff->data[0] = 0x41;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2241      	movs	r2, #65	; 0x41
 80056d6:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	3309      	adds	r3, #9
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e003      	b.n	80056ec <CO_SDOserver_process+0xd9c>
                    SDO->CANtxBuff->data[0] = 0x40;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2240      	movs	r2, #64	; 0x40
 80056ea:	715a      	strb	r2, [r3, #5]
                SDO->toggle = 0x00;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2223      	movs	r2, #35	; 0x23
 80056fe:	751a      	strb	r2, [r3, #20]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005710:	0a1b      	lsrs	r3, r3, #8
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005726:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f003 f8a4 	bl	8008880 <CO_CANsend>
            break;
 8005738:	e271      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            if (!readFromOd(SDO, &abortCode, 7, false))
 800573a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800573e:	2300      	movs	r3, #0
 8005740:	2207      	movs	r2, #7
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff f822 	bl	800478c <readFromOd>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8264 	beq.w	8005c18 <CO_SDOserver_process+0x12c8>
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 800575a:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <CO_SDOserver_process+0xe1a>
 8005766:	2210      	movs	r2, #16
 8005768:	e000      	b.n	800576c <CO_SDOserver_process+0xe1c>
 800576a:	2200      	movs	r2, #0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	67fb      	str	r3, [r7, #124]	; 0x7c
            if (count < 7 || (SDO->finished && count == 7)) {
 8005782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005784:	2b06      	cmp	r3, #6
 8005786:	d906      	bls.n	8005796 <CO_SDOserver_process+0xe46>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <CO_SDOserver_process+0xe78>
 8005790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005792:	2b07      	cmp	r3, #7
 8005794:	d118      	bne.n	80057c8 <CO_SDOserver_process+0xe78>
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	795a      	ldrb	r2, [r3, #5]
 800579c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f1c3 0307 	rsb	r3, r3, #7
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	4313      	orrs	r3, r2
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80057c6:	e007      	b.n	80057d8 <CO_SDOserver_process+0xe88>
                SDO->timeoutTimer = 0;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2223      	movs	r2, #35	; 0x23
 80057d2:	751a      	strb	r2, [r3, #20]
                count = 7;
 80057d4:	2307      	movs	r3, #7
 80057d6:	67fb      	str	r3, [r7, #124]	; 0x7c
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	1d98      	adds	r0, r3, #6
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80057ea:	4413      	add	r3, r2
 80057ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80057ee:	4619      	mov	r1, r3
 80057f0:	f009 f8f4 	bl	800e9dc <memcpy>
            SDO->bufOffsetRd += count;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80057fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057fc:	441a      	add	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
            SDO->sizeTran += count;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800580a:	441a      	add	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	669a      	str	r2, [r3, #104]	; 0x68
            if (SDO->sizeInd > 0) {
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01e      	beq.n	8005856 <CO_SDOserver_process+0xf06>
                if (SDO->sizeTran > SDO->sizeInd) {
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005820:	429a      	cmp	r2, r3
 8005822:	d905      	bls.n	8005830 <CO_SDOserver_process+0xee0>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8005824:	4b98      	ldr	r3, [pc, #608]	; (8005a88 <CO_SDOserver_process+0x1138>)
 8005826:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	751a      	strb	r2, [r3, #20]
                    break;
 800582e:	e1f6      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
                else if (ret == CO_SDO_RT_ok_communicationEnd
 8005830:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10e      	bne.n	8005856 <CO_SDOserver_process+0xf06>
                         && SDO->sizeTran < SDO->sizeInd
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005840:	429a      	cmp	r2, r3
 8005842:	d208      	bcs.n	8005856 <CO_SDOserver_process+0xf06>
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8005844:	4b91      	ldr	r3, [pc, #580]	; (8005a8c <CO_SDOserver_process+0x113c>)
 8005846:	633b      	str	r3, [r7, #48]	; 0x30
                    ret = CO_SDO_RT_waitingResponse;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    SDO->state = CO_SDO_ST_ABORT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	751a      	strb	r2, [r3, #20]
                    break;
 8005854:	e1e3      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f003 f80d 	bl	8008880 <CO_CANsend>
            break;
 8005866:	e1da      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            SDO->CANtxBuff->data[0] = 0xA4;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	22a4      	movs	r2, #164	; 0xa4
 800586e:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005896:	721a      	strb	r2, [r3, #8]
            OD_size_t count = (CO_CONFIG_SDO_SRV_BUFFER_SIZE-2) / 7;
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	67bb      	str	r3, [r7, #120]	; 0x78
            if (count > 127) {
 800589c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589e:	2b7f      	cmp	r3, #127	; 0x7f
 80058a0:	d901      	bls.n	80058a6 <CO_SDOserver_process+0xf56>
                count = 127;
 80058a2:	237f      	movs	r3, #127	; 0x7f
 80058a4:	67bb      	str	r3, [r7, #120]	; 0x78
            SDO->block_blksize = (uint8_t)count;
 80058a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
            SDO->CANtxBuff->data[4] = SDO->block_blksize;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80058ba:	725a      	strb	r2, [r3, #9]
            SDO->sizeTran = 0;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	669a      	str	r2, [r3, #104]	; 0x68
            SDO->finished = false;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->bufOffsetWr = 0;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
            SDO->bufOffsetRd = 0;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
            SDO->block_seqno = 0;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            SDO->block_crc = 0;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8a3 241c 	strh.w	r2, [r3, #1052]	; 0x41c
            SDO->timeoutTimer = 0;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	679a      	str	r2, [r3, #120]	; 0x78
            SDO->block_timeoutTimer = 0;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            SDO->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2253      	movs	r2, #83	; 0x53
 80058fa:	751a      	strb	r2, [r3, #20]
            CO_FLAG_CLEAR(SDO->CANrxNew);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	639a      	str	r2, [r3, #56]	; 0x38
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f002 ffb7 	bl	8008880 <CO_CANsend>
            break;
 8005912:	e184      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            SDO->CANtxBuff->data[0] = 0xA2;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	22a2      	movs	r2, #162	; 0xa2
 800591a:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->block_seqno;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	f892 2414 	ldrb.w	r2, [r2, #1044]	; 0x414
 8005926:	719a      	strb	r2, [r3, #6]
            if (SDO->finished) {
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <CO_SDOserver_process+0xfe8>
                SDO->state = CO_SDO_ST_DOWNLOAD_BLK_END_REQ;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2255      	movs	r2, #85	; 0x55
 8005934:	751a      	strb	r2, [r3, #20]
 8005936:	e045      	b.n	80059c4 <CO_SDOserver_process+0x1074>
                count = (CO_CONFIG_SDO_SRV_BUFFER_SIZE-2-SDO->bufOffsetWr)/7;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800593e:	f5c3 7360 	rsb	r3, r3, #896	; 0x380
 8005942:	3302      	adds	r3, #2
 8005944:	4a52      	ldr	r2, [pc, #328]	; (8005a90 <CO_SDOserver_process+0x1140>)
 8005946:	fba2 1203 	umull	r1, r2, r2, r3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	089b      	lsrs	r3, r3, #2
 8005952:	677b      	str	r3, [r7, #116]	; 0x74
                if (count >= 127) {
 8005954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005956:	2b7e      	cmp	r3, #126	; 0x7e
 8005958:	d902      	bls.n	8005960 <CO_SDOserver_process+0x1010>
                    count = 127;
 800595a:	237f      	movs	r3, #127	; 0x7f
 800595c:	677b      	str	r3, [r7, #116]	; 0x74
 800595e:	e022      	b.n	80059a6 <CO_SDOserver_process+0x1056>
                else if (SDO->bufOffsetWr > 0) {
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01d      	beq.n	80059a6 <CO_SDOserver_process+0x1056>
                    if (!validateAndWriteToOD(SDO, &abortCode, 1, 0))
 800596a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800596e:	2300      	movs	r3, #0
 8005970:	2201      	movs	r2, #1
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7fe fdca 	bl	800450c <validateAndWriteToOD>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 814e 	beq.w	8005c1c <CO_SDOserver_process+0x12cc>
                    count =(CO_CONFIG_SDO_SRV_BUFFER_SIZE-2-SDO->bufOffsetWr)/7;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005986:	f5c3 7360 	rsb	r3, r3, #896	; 0x380
 800598a:	3302      	adds	r3, #2
 800598c:	4a40      	ldr	r2, [pc, #256]	; (8005a90 <CO_SDOserver_process+0x1140>)
 800598e:	fba2 1203 	umull	r1, r2, r2, r3
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	4413      	add	r3, r2
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	677b      	str	r3, [r7, #116]	; 0x74
                    if (count >= 127) {
 800599c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599e:	2b7e      	cmp	r3, #126	; 0x7e
 80059a0:	d901      	bls.n	80059a6 <CO_SDOserver_process+0x1056>
                        count = 127;
 80059a2:	237f      	movs	r3, #127	; 0x7f
 80059a4:	677b      	str	r3, [r7, #116]	; 0x74
                SDO->block_blksize = (uint8_t)count;
 80059a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
                SDO->block_seqno = 0;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                SDO->state = CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2253      	movs	r2, #83	; 0x53
 80059bc:	751a      	strb	r2, [r3, #20]
                CO_FLAG_CLEAR(SDO->CANrxNew);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->CANtxBuff->data[2] = SDO->block_blksize;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80059ce:	71da      	strb	r2, [r3, #7]
            SDO->block_timeoutTimer = 0;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f002 ff4c 	bl	8008880 <CO_CANsend>
            break;
 80059e8:	e119      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            SDO->CANtxBuff->data[0] = 0xA1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	22a1      	movs	r2, #161	; 0xa1
 80059f0:	715a      	strb	r2, [r3, #5]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f002 ff3f 	bl	8008880 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_ok_communicationEnd;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            break;
 8005a0e:	e106      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            SDO->CANtxBuff->data[0] = 0xC4;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	22c4      	movs	r2, #196	; 0xc4
 8005a16:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005a3e:	721a      	strb	r2, [r3, #8]
            if (SDO->sizeInd > 0) {
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d010      	beq.n	8005a6a <CO_SDOserver_process+0x111a>
                uint32_t size = CO_SWAP_32(SDO->sizeInd);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4c:	617b      	str	r3, [r7, #20]
                SDO->CANtxBuff->data[0] |= 0x02;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	795a      	ldrb	r2, [r3, #5]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f042 0202 	orr.w	r2, r2, #2
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &size, sizeof(size));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	3309      	adds	r3, #9
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	601a      	str	r2, [r3, #0]
            SDO->timeoutTimer = 0;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f002 ff00 	bl	8008880 <CO_CANsend>
            SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2263      	movs	r2, #99	; 0x63
 8005a84:	751a      	strb	r2, [r3, #20]
            break;
 8005a86:	e0ca      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
 8005a88:	06070012 	.word	0x06070012
 8005a8c:	06070013 	.word	0x06070013
 8005a90:	24924925 	.word	0x24924925
            SDO->CANtxBuff->data[0] = ++SDO->block_seqno;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f892 2414 	ldrb.w	r2, [r2, #1044]	; 0x414
 8005aae:	715a      	strb	r2, [r3, #5]
            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	673b      	str	r3, [r7, #112]	; 0x70
            if (count < 7 || (SDO->finished && count == 7)) {
 8005ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d906      	bls.n	8005ad4 <CO_SDOserver_process+0x1184>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <CO_SDOserver_process+0x1198>
 8005ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ad0:	2b07      	cmp	r3, #7
 8005ad2:	d109      	bne.n	8005ae8 <CO_SDOserver_process+0x1198>
                SDO->CANtxBuff->data[0] |= 0x80;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	795a      	ldrb	r2, [r3, #5]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	715a      	strb	r2, [r3, #5]
 8005ae6:	e001      	b.n	8005aec <CO_SDOserver_process+0x119c>
                count = 7;
 8005ae8:	2307      	movs	r3, #7
 8005aea:	673b      	str	r3, [r7, #112]	; 0x70
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	1d98      	adds	r0, r3, #6
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005afe:	4413      	add	r3, r2
 8005b00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005b02:	4619      	mov	r1, r3
 8005b04:	f008 ff6a 	bl	800e9dc <memcpy>
            SDO->bufOffsetRd += count;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
            SDO->block_noData = (uint8_t)(7 - count);
 8005b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f1c3 0307 	rsb	r3, r3, #7
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
            SDO->sizeTran += count;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b2e:	441a      	add	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	669a      	str	r2, [r3, #104]	; 0x68
            if (SDO->sizeInd > 0) {
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01f      	beq.n	8005b7c <CO_SDOserver_process+0x122c>
                if (SDO->sizeTran > SDO->sizeInd) {
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d905      	bls.n	8005b54 <CO_SDOserver_process+0x1204>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8005b48:	4b5c      	ldr	r3, [pc, #368]	; (8005cbc <CO_SDOserver_process+0x136c>)
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	751a      	strb	r2, [r3, #20]
                    break;
 8005b52:	e064      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
                else if (SDO->bufOffsetWr == SDO->bufOffsetRd
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d10b      	bne.n	8005b7c <CO_SDOserver_process+0x122c>
                         && SDO->sizeTran < SDO->sizeInd
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d205      	bcs.n	8005b7c <CO_SDOserver_process+0x122c>
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8005b70:	4b53      	ldr	r3, [pc, #332]	; (8005cc0 <CO_SDOserver_process+0x1370>)
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30
                    SDO->state = CO_SDO_ST_ABORT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	751a      	strb	r2, [r3, #20]
                    break;
 8005b7a:	e050      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            if (SDO->bufOffsetWr == SDO->bufOffsetRd
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d007      	beq.n	8005b9c <CO_SDOserver_process+0x124c>
                || SDO->block_seqno >= SDO->block_blksize
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d302      	bcc.n	8005ba2 <CO_SDOserver_process+0x1252>
                SDO->state = CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2265      	movs	r2, #101	; 0x65
 8005ba0:	751a      	strb	r2, [r3, #20]
            SDO->timeoutTimer = 0;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f002 fe64 	bl	8008880 <CO_CANsend>
            break;
 8005bb8:	e031      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            SDO->CANtxBuff->data[0] = 0xC1 | (SDO->block_noData << 2);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	b25b      	sxtb	r3, r3
 8005bc4:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8005bc8:	b25a      	sxtb	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t) SDO->block_crc;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8b3 241c 	ldrh.w	r2, [r3, #1052]	; 0x41c
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t) (SDO->block_crc >> 8);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	71da      	strb	r2, [r3, #7]
            SDO->timeoutTimer = 0;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f002 fe3c 	bl	8008880 <CO_CANsend>
            SDO->state = CO_SDO_ST_UPLOAD_BLK_END_CRSP;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2267      	movs	r2, #103	; 0x67
 8005c0c:	751a      	strb	r2, [r3, #20]
            break;
 8005c0e:	e006      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
        }
        } /* switch (SDO->state) */
    }
 8005c10:	bf00      	nop
 8005c12:	e004      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
            break;
 8005c14:	bf00      	nop
 8005c16:	e002      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
                break;
 8005c18:	bf00      	nop
 8005c1a:	e000      	b.n	8005c1e <CO_SDOserver_process+0x12ce>
                        break;
 8005c1c:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 8005c1e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d143      	bne.n	8005cae <CO_SDOserver_process+0x135e>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	7d1b      	ldrb	r3, [r3, #20]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d12d      	bne.n	8005c8c <CO_SDOserver_process+0x133c>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2280      	movs	r2, #128	; 0x80
 8005c3a:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005c62:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	3309      	adds	r3, #9
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f002 fe01 	bl	8008880 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8005c84:	23f6      	movs	r3, #246	; 0xf6
 8005c86:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005c8a:	e010      	b.n	8005cae <CO_SDOserver_process+0x135e>
        }
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
        else if (SDO->state == CO_SDO_ST_DOWNLOAD_BLK_SUBBLOCK_REQ) {
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	7d1b      	ldrb	r3, [r3, #20]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b53      	cmp	r3, #83	; 0x53
 8005c94:	d103      	bne.n	8005c9e <CO_SDOserver_process+0x134e>
            ret = CO_SDO_RT_blockDownldInProgress;
 8005c96:	2303      	movs	r3, #3
 8005c98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005c9c:	e007      	b.n	8005cae <CO_SDOserver_process+0x135e>
        }
        else if (SDO->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ) {
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	7d1b      	ldrb	r3, [r3, #20]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b64      	cmp	r3, #100	; 0x64
 8005ca6:	d102      	bne.n	8005cae <CO_SDOserver_process+0x135e>
            ret = CO_SDO_RT_blockUploadInProgress;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        }
#endif
    }

    return ret;
 8005cae:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3794      	adds	r7, #148	; 0x94
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	06070012 	.word	0x06070012
 8005cc0:	06070013 	.word	0x06070013

08005cc4 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8005cd0:	73fb      	strb	r3, [r7, #15]
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <OD_getIndex+0x14>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	e000      	b.n	8005d12 <OD_getIndex+0x16>
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <OD_extension_init>:
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <OD_extension_init+0x14>
 8005d2e:	2305      	movs	r3, #5
 8005d30:	e003      	b.n	8005d3a <OD_extension_init+0x1c>
    entry->extension = extension;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <OD_get_u8>:
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af02      	add	r7, sp, #8
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	460b      	mov	r3, r1
 8005d54:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005d56:	7af9      	ldrb	r1, [r7, #11]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f7fc fbad 	bl	80024c0 <OD_get_value>
 8005d66:	4603      	mov	r3, r0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <OD_get_u32>:
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	607a      	str	r2, [r7, #4]
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005d80:	7af9      	ldrb	r1, [r7, #11]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2304      	movs	r3, #4
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7fc fb98 	bl	80024c0 <OD_get_value>
 8005d90:	4603      	mov	r3, r0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7c9b      	ldrb	r3, [r3, #18]
 8005da6:	3301      	adds	r3, #1
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	749a      	strb	r2, [r3, #18]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7c9a      	ldrb	r2, [r3, #18]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	7c5b      	ldrb	r3, [r3, #17]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d902      	bls.n	8005dc0 <CO_SYNCsend+0x26>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bf0c      	ite	eq
 8005dce:	2301      	moveq	r3, #1
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	7c92      	ldrb	r2, [r2, #18]
 8005de2:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f002 fd46 	bl	8008880 <CO_CANsend>
 8005df4:	4603      	mov	r3, r0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8005dfe:	b480      	push	{r7}
 8005e00:	b087      	sub	sp, #28
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	791b      	ldrb	r3, [r3, #4]
 8005e10:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	7c5b      	ldrb	r3, [r3, #17]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10c      	bne.n	8005e38 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	e019      	b.n	8005e5e <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	721a      	strb	r2, [r3, #8]
 8005e36:	e012      	b.n	8005e5e <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d109      	bne.n	8005e52 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	3305      	adds	r3, #5
 8005e42:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	781a      	ldrb	r2, [r3, #0]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e005      	b.n	8005e5e <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00c      	beq.n	8005e7e <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2301      	moveq	r3, #1
 8005e6e:	2300      	movne	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
	...

08005e8c <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005e8c:	b590      	push	{r4, r7, lr}
 8005e8e:	b08f      	sub	sp, #60	; 0x3c
 8005e90:	af04      	add	r7, sp, #16
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <OD_write_1005+0x2e>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	7c5b      	ldrb	r3, [r3, #17]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d108      	bne.n	8005eba <OD_write_1005+0x2e>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d102      	bne.n	8005eba <OD_write_1005+0x2e>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005eba:	2309      	movs	r3, #9
 8005ebc:	e0a3      	b.n	8006006 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8005ec4:	68b8      	ldr	r0, [r7, #8]
 8005ec6:	f7ff ff0b 	bl	8005ce0 <CO_getUint32>
 8005eca:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed4:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8005ee8:	6a3a      	ldr	r2, [r7, #32]
 8005eea:	4b49      	ldr	r3, [pc, #292]	; (8006010 <OD_write_1005+0x184>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d133      	bne.n	8005f5a <OD_write_1005+0xce>
 8005ef2:	8bfb      	ldrh	r3, [r7, #30]
 8005ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef6:	d930      	bls.n	8005f5a <OD_write_1005+0xce>
 8005ef8:	8bfb      	ldrh	r3, [r7, #30]
 8005efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efe:	d903      	bls.n	8005f08 <OD_write_1005+0x7c>
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8005f06:	d928      	bls.n	8005f5a <OD_write_1005+0xce>
 8005f08:	8bfb      	ldrh	r3, [r7, #30]
 8005f0a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005f0e:	d903      	bls.n	8005f18 <OD_write_1005+0x8c>
 8005f10:	8bfb      	ldrh	r3, [r7, #30]
 8005f12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f16:	d320      	bcc.n	8005f5a <OD_write_1005+0xce>
 8005f18:	8bfb      	ldrh	r3, [r7, #30]
 8005f1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f1e:	d903      	bls.n	8005f28 <OD_write_1005+0x9c>
 8005f20:	8bfb      	ldrh	r3, [r7, #30]
 8005f22:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8005f26:	d318      	bcc.n	8005f5a <OD_write_1005+0xce>
 8005f28:	8bfb      	ldrh	r3, [r7, #30]
 8005f2a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8005f2e:	d303      	bcc.n	8005f38 <OD_write_1005+0xac>
 8005f30:	8bfb      	ldrh	r3, [r7, #30]
 8005f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f36:	d310      	bcc.n	8005f5a <OD_write_1005+0xce>
 8005f38:	8bfb      	ldrh	r3, [r7, #30]
 8005f3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f3e:	d80c      	bhi.n	8005f5a <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <OD_write_1005+0xd2>
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <OD_write_1005+0xd2>
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f54:	8bfa      	ldrh	r2, [r7, #30]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d001      	beq.n	8005f5e <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8005f5a:	230f      	movs	r3, #15
 8005f5c:	e053      	b.n	8006006 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f64:	8bfa      	ldrh	r2, [r7, #30]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d03a      	beq.n	8005fe0 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8005f72:	8bfa      	ldrh	r2, [r7, #30]
 8005f74:	4b27      	ldr	r3, [pc, #156]	; (8006014 <OD_write_1005+0x188>)
 8005f76:	9302      	str	r3, [sp, #8]
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005f84:	f002 fba4 	bl	80086d0 <CO_CANrxBufferInit>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8005f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8005f94:	2309      	movs	r3, #9
 8005f96:	e036      	b.n	8006006 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461c      	mov	r4, r3
 8005fb2:	8bfa      	ldrh	r2, [r7, #30]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	9400      	str	r4, [sp, #0]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f002 fbe6 	bl	800878c <CO_CANtxBufferInit>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8005fd4:	2309      	movs	r3, #9
 8005fd6:	e016      	b.n	8006006 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	8bfa      	ldrh	r2, [r7, #30]
 8005fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	2200      	movs	r2, #0
 8005ff0:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7fc f878 	bl	80020f4 <OD_writeOriginal>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	372c      	adds	r7, #44	; 0x2c
 800600a:	46bd      	mov	sp, r7
 800600c:	bd90      	pop	{r4, r7, pc}
 800600e:	bf00      	nop
 8006010:	bffff800 	.word	0xbffff800
 8006014:	08005dff 	.word	0x08005dff

08006018 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8006018:	b590      	push	{r4, r7, lr}
 800601a:	b089      	sub	sp, #36	; 0x24
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00c      	beq.n	8006046 <OD_write_1019+0x2e>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	7c5b      	ldrb	r3, [r3, #17]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d108      	bne.n	8006046 <OD_write_1019+0x2e>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d102      	bne.n	8006046 <OD_write_1019+0x2e>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8006046:	2309      	movs	r3, #9
 8006048:	e041      	b.n	80060ce <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8006050:	68b8      	ldr	r0, [r7, #8]
 8006052:	f7ff fe37 	bl	8005cc4 <CO_getUint8>
 8006056:	4603      	mov	r3, r0
 8006058:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 800605a:	7cfb      	ldrb	r3, [r7, #19]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d002      	beq.n	8006066 <OD_write_1019+0x4e>
 8006060:	7cfb      	ldrb	r3, [r7, #19]
 8006062:	2bf0      	cmp	r3, #240	; 0xf0
 8006064:	d901      	bls.n	800606a <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8006066:	230f      	movs	r3, #15
 8006068:	e031      	b.n	80060ce <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8006074:	2317      	movs	r3, #23
 8006076:	e02a      	b.n	80060ce <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8006088:	7cfb      	ldrb	r3, [r7, #19]
 800608a:	2b00      	cmp	r3, #0
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	461c      	mov	r4, r3
 8006096:	2300      	movs	r3, #0
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	9400      	str	r4, [sp, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	f002 fb75 	bl	800878c <CO_CANtxBufferInit>
 80060a2:	4602      	mov	r2, r0
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2200      	movs	r2, #0
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80060b6:	2309      	movs	r3, #9
 80060b8:	e009      	b.n	80060ce <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	7cfa      	ldrb	r2, [r7, #19]
 80060be:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7fc f814 	bl	80020f4 <OD_writeOriginal>
 80060cc:	4603      	mov	r3, r0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd90      	pop	{r4, r7, pc}
	...

080060d8 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	; 0x30
 80060dc:	af04      	add	r7, sp, #16
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00e      	beq.n	800610a <CO_SYNC_init+0x32>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <CO_SYNC_init+0x32>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <CO_SYNC_init+0x32>
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295
 800610e:	e0fe      	b.n	800630e <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8006110:	2260      	movs	r2, #96	; 0x60
 8006112:	2100      	movs	r1, #0
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f008 fc89 	bl	800ea2c <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 800611e:	f107 0218 	add.w	r2, r7, #24
 8006122:	2301      	movs	r3, #1
 8006124:	2100      	movs	r1, #0
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fe22 	bl	8005d70 <OD_get_u32>
 800612c:	4603      	mov	r3, r0
 800612e:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8006130:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00c      	beq.n	8006152 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8006138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <CO_SYNC_init+0x74>
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff fddc 	bl	8005cfc <OD_getIndex>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800614c:	f06f 030b 	mvn.w	r3, #11
 8006150:	e0dd      	b.n	800630e <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a6f      	ldr	r2, [pc, #444]	; (8006318 <CO_SYNC_init+0x240>)
 800615c:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a6e      	ldr	r2, [pc, #440]	; (800631c <CO_SYNC_init+0x244>)
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3334      	adds	r3, #52	; 0x34
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fdd7 	bl	8005d1e <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8006170:	2300      	movs	r3, #0
 8006172:	2204      	movs	r2, #4
 8006174:	2100      	movs	r1, #0
 8006176:	6838      	ldr	r0, [r7, #0]
 8006178:	f7fc fa09 	bl	800258e <OD_getPtr>
 800617c:	4602      	mov	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10c      	bne.n	80061a4 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 800618a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <CO_SYNC_init+0xc6>
 8006190:	6838      	ldr	r0, [r7, #0]
 8006192:	f7ff fdb3 	bl	8005cfc <OD_getIndex>
 8006196:	4603      	mov	r3, r0
 8006198:	461a      	mov	r2, r3
 800619a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800619e:	f06f 030b 	mvn.w	r3, #11
 80061a2:	e0b4      	b.n	800630e <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 80061a4:	2300      	movs	r3, #0
 80061a6:	2204      	movs	r2, #4
 80061a8:	2100      	movs	r1, #0
 80061aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ac:	f7fc f9ef 	bl	800258e <OD_getPtr>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d010      	beq.n	80061de <CO_SYNC_init+0x106>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10c      	bne.n	80061de <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80061c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d006      	beq.n	80061d8 <CO_SYNC_init+0x100>
 80061ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061cc:	f7ff fd96 	bl	8005cfc <OD_getIndex>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80061d8:	f06f 030b 	mvn.w	r3, #11
 80061dc:	e097      	b.n	800630e <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d033      	beq.n	8006250 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80061e8:	f107 0217 	add.w	r2, r7, #23
 80061ec:	2301      	movs	r3, #1
 80061ee:	2100      	movs	r1, #0
 80061f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061f2:	f7ff fda8 	bl	8005d46 <OD_get_u8>
 80061f6:	4603      	mov	r3, r0
 80061f8:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 80061fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8006202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <CO_SYNC_init+0x13e>
 8006208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800620a:	f7ff fd77 	bl	8005cfc <OD_getIndex>
 800620e:	4603      	mov	r3, r0
 8006210:	461a      	mov	r2, r3
 8006212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006214:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8006216:	f06f 030b 	mvn.w	r3, #11
 800621a:	e078      	b.n	800630e <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d102      	bne.n	8006228 <CO_SYNC_init+0x150>
 8006222:	2302      	movs	r3, #2
 8006224:	75fb      	strb	r3, [r7, #23]
 8006226:	e004      	b.n	8006232 <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	2bf0      	cmp	r3, #240	; 0xf0
 800622c:	d901      	bls.n	8006232 <CO_SYNC_init+0x15a>
 800622e:	23f0      	movs	r3, #240	; 0xf0
 8006230:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a37      	ldr	r2, [pc, #220]	; (8006318 <CO_SYNC_init+0x240>)
 800623c:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4a37      	ldr	r2, [pc, #220]	; (8006320 <CO_SYNC_init+0x248>)
 8006242:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3350      	adds	r3, #80	; 0x50
 8006248:	4619      	mov	r1, r3
 800624a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800624c:	f7ff fd67 	bl	8005d1e <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8006250:	7dfa      	ldrb	r2, [r7, #23]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	b29b      	uxth	r3, r3
 8006276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006286:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800628c:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006292:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8006298:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80062a8:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <CO_SYNC_init+0x24c>)
 80062aa:	9302      	str	r3, [sp, #8]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	2300      	movs	r3, #0
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80062b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ba:	f002 fa09 	bl	80086d0 <CO_CANrxBufferInit>
 80062be:	4603      	mov	r3, r0
 80062c0:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 80062c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <CO_SYNC_init+0x1f8>
        return ret;
 80062ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80062ce:	e01e      	b.n	800630e <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062d8:	b29a      	uxth	r2, r3
 80062da:	7dfb      	ldrb	r3, [r7, #23]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf14      	ite	ne
 80062e0:	2301      	movne	r3, #1
 80062e2:	2300      	moveq	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	4618      	mov	r0, r3
 80062e8:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80062ea:	2300      	movs	r3, #0
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	9000      	str	r0, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062f4:	f002 fa4a 	bl	800878c <CO_CANtxBufferInit>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006306:	f04f 33ff 	mov.w	r3, #4294967295
 800630a:	e000      	b.n	800630e <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	08002045 	.word	0x08002045
 800631c:	08005e8d 	.word	0x08005e8d
 8006320:	08006019 	.word	0x08006019
 8006324:	08005dff 	.word	0x08005dff

08006328 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	; 0x28
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8006336:	2300      	movs	r3, #0
 8006338:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8088 	beq.w	8006452 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	429a      	cmp	r2, r3
 8006354:	d902      	bls.n	800635c <CO_SYNC_process+0x34>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 800636a:	2301      	movs	r3, #1
 800636c:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <CO_SYNC_process+0x5c>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	e000      	b.n	8006386 <CO_SYNC_process+0x5e>
 8006384:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8006386:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d031      	beq.n	80063f2 <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	429a      	cmp	r2, r3
 800639e:	d828      	bhi.n	80063f2 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80063a0:	2301      	movs	r3, #1
 80063a2:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fcf8 	bl	8005d9a <CO_SYNCsend>
 80063aa:	e022      	b.n	80063f2 <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	7c1b      	ldrb	r3, [r3, #16]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d11e      	bne.n	80063f2 <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	085b      	lsrs	r3, r3, #1
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4413      	add	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d202      	bcs.n	80063cc <CO_SYNC_process+0xa4>
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d20d      	bcs.n	80063f2 <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80063e4:	2218      	movs	r2, #24
 80063e6:	2101      	movs	r1, #1
 80063e8:	f7fb f81a 	bl	8001420 <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2202      	movs	r2, #2
 80063f0:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d015      	beq.n	8006426 <CO_SYNC_process+0xfe>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d010      	beq.n	8006426 <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d909      	bls.n	8006426 <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800641a:	2302      	movs	r3, #2
 800641c:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	615a      	str	r2, [r3, #20]
 8006424:	e002      	b.n	800642c <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	7a1b      	ldrb	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01a      	beq.n	800646a <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	7a1b      	ldrb	r3, [r3, #8]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	f248 2340 	movw	r3, #33344	; 0x8240
 8006442:	2219      	movs	r2, #25
 8006444:	2101      	movs	r1, #1
 8006446:	f7fa ffeb 	bl	8001420 <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	721a      	strb	r2, [r3, #8]
 8006450:	e00b      	b.n	800646a <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800646a:	7ffb      	ldrb	r3, [r7, #31]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10f      	bne.n	8006490 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	7c1b      	ldrb	r3, [r3, #16]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d108      	bne.n	800648a <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	2300      	movs	r3, #0
 8006482:	2218      	movs	r2, #24
 8006484:	2100      	movs	r1, #0
 8006486:	f7fa ffcb 	bl	8001420 <CO_error>
        }
        SYNC->timeoutError = 1;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8006490:	7ffb      	ldrb	r3, [r7, #31]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 800649a:	b480      	push	{r7}
 800649c:	b085      	sub	sp, #20
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80064a8:	81fb      	strh	r3, [r7, #14]
 80064aa:	89fb      	ldrh	r3, [r7, #14]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <OD_getIndex+0x14>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	e000      	b.n	80064ea <OD_getIndex+0x16>
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <OD_extension_init>:
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <OD_extension_init+0x14>
 8006506:	2305      	movs	r3, #5
 8006508:	e003      	b.n	8006512 <OD_extension_init+0x1c>
    entry->extension = extension;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <OD_get_u32>:
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b086      	sub	sp, #24
 8006522:	af02      	add	r7, sp, #8
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	460b      	mov	r3, r1
 800652c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800652e:	7af9      	ldrb	r1, [r7, #11]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2304      	movs	r3, #4
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7fb ffc1 	bl	80024c0 <OD_get_value>
 800653e:	4603      	mov	r3, r0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	791b      	ldrb	r3, [r3, #4]
 800655a:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	3305      	adds	r3, #5
 8006560:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8006562:	7cfb      	ldrb	r3, [r7, #19]
 8006564:	2b06      	cmp	r3, #6
 8006566:	d108      	bne.n	800657a <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2206      	movs	r2, #6
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	4618      	mov	r0, r3
 8006570:	f008 fa34 	bl	800e9dc <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2201      	movs	r2, #1
 8006578:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 800657a:	bf00      	nop
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00c      	beq.n	80065b2 <OD_write_1012+0x2e>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	7c5b      	ldrb	r3, [r3, #17]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d108      	bne.n	80065b2 <OD_write_1012+0x2e>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d102      	bne.n	80065b2 <OD_write_1012+0x2e>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80065b2:	2309      	movs	r3, #9
 80065b4:	e051      	b.n	800665a <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80065bc:	68b8      	ldr	r0, [r7, #8]
 80065be:	f7ff ff7b 	bl	80064b8 <CO_getUint32>
 80065c2:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065cc:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	4b24      	ldr	r3, [pc, #144]	; (8006664 <OD_write_1012+0xe0>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d126      	bne.n	8006626 <OD_write_1012+0xa2>
 80065d8:	8afb      	ldrh	r3, [r7, #22]
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d923      	bls.n	8006626 <OD_write_1012+0xa2>
 80065de:	8afb      	ldrh	r3, [r7, #22]
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e4:	d903      	bls.n	80065ee <OD_write_1012+0x6a>
 80065e6:	8afb      	ldrh	r3, [r7, #22]
 80065e8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80065ec:	d91b      	bls.n	8006626 <OD_write_1012+0xa2>
 80065ee:	8afb      	ldrh	r3, [r7, #22]
 80065f0:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80065f4:	d903      	bls.n	80065fe <OD_write_1012+0x7a>
 80065f6:	8afb      	ldrh	r3, [r7, #22]
 80065f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065fc:	d313      	bcc.n	8006626 <OD_write_1012+0xa2>
 80065fe:	8afb      	ldrh	r3, [r7, #22]
 8006600:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006604:	d903      	bls.n	800660e <OD_write_1012+0x8a>
 8006606:	8afb      	ldrh	r3, [r7, #22]
 8006608:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800660c:	d30b      	bcc.n	8006626 <OD_write_1012+0xa2>
 800660e:	8afb      	ldrh	r3, [r7, #22]
 8006610:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8006614:	d303      	bcc.n	800661e <OD_write_1012+0x9a>
 8006616:	8afb      	ldrh	r3, [r7, #22]
 8006618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800661c:	d303      	bcc.n	8006626 <OD_write_1012+0xa2>
 800661e:	8afb      	ldrh	r3, [r7, #22]
 8006620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006624:	d901      	bls.n	800662a <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8006626:	230f      	movs	r3, #15
 8006628:	e017      	b.n	800665a <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	0fdb      	lsrs	r3, r3, #31
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf14      	ite	ne
 8006640:	2301      	movne	r3, #1
 8006642:	2300      	moveq	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	461a      	mov	r2, r3
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f7fb fd4e 	bl	80020f4 <OD_writeOriginal>
 8006658:	4603      	mov	r3, r0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	3ffff800 	.word	0x3ffff800

08006668 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	; 0x30
 800666c:	af04      	add	r7, sp, #16
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <CO_TIME_init+0x20>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <CO_TIME_init+0x20>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006688:	f04f 33ff 	mov.w	r3, #4294967295
 800668c:	e061      	b.n	8006752 <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 800668e:	222c      	movs	r2, #44	; 0x2c
 8006690:	2100      	movs	r1, #0
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f008 f9ca 	bl	800ea2c <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8006698:	f107 0214 	add.w	r2, r7, #20
 800669c:	2301      	movs	r3, #1
 800669e:	2100      	movs	r1, #0
 80066a0:	68b8      	ldr	r0, [r7, #8]
 80066a2:	f7ff ff3c 	bl	800651e <OD_get_u32>
 80066a6:	4603      	mov	r3, r0
 80066a8:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80066aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00c      	beq.n	80066cc <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d006      	beq.n	80066c6 <CO_TIME_init+0x5e>
 80066b8:	68b8      	ldr	r0, [r7, #8]
 80066ba:	f7ff ff0b 	bl	80064d4 <OD_getIndex>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80066c6:	f06f 030b 	mvn.w	r3, #11
 80066ca:	e042      	b.n	8006752 <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4a21      	ldr	r2, [pc, #132]	; (800675c <CO_TIME_init+0xf4>)
 80066d6:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4a21      	ldr	r2, [pc, #132]	; (8006760 <CO_TIME_init+0xf8>)
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	331c      	adds	r3, #28
 80066e2:	4619      	mov	r1, r3
 80066e4:	68b8      	ldr	r0, [r7, #8]
 80066e6:	f7ff ff06 	bl	80064f6 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f2:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	0fdb      	lsrs	r3, r3, #31
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	bf14      	ite	ne
 800670a:	2301      	movne	r3, #1
 800670c:	2300      	moveq	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d015      	beq.n	8006750 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8006724:	8bba      	ldrh	r2, [r7, #28]
 8006726:	8879      	ldrh	r1, [r7, #2]
 8006728:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <CO_TIME_init+0xfc>)
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	2300      	movs	r3, #0
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 ffc9 	bl	80086d0 <CO_CANrxBufferInit>
 800673e:	4603      	mov	r3, r0
 8006740:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8006742:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <CO_TIME_init+0xe8>
            return ret;
 800674a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800674e:	e000      	b.n	8006752 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	08002045 	.word	0x08002045
 8006760:	08006585 	.word	0x08006585
 8006764:	08006549 	.word	0x08006549

08006768 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8006774:	2300      	movs	r3, #0
 8006776:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d024      	beq.n	80067c8 <CO_TIME_process+0x60>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d020      	beq.n	80067c8 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d01f      	beq.n	80067ce <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fe91 	bl	80064b8 <CO_getUint32>
 8006796:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fe7c 	bl	800649a <CO_getUint16>
 80067a2:	4603      	mov	r3, r0
 80067a4:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8bfa      	ldrh	r2, [r7, #30]
 80067b4:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 80067bc:	2301      	movs	r3, #1
 80067be:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 80067c6:	e002      	b.n	80067ce <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d132      	bne.n	800683e <CO_TIME_process+0xd6>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02f      	beq.n	800683e <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	89db      	ldrh	r3, [r3, #14]
 80067e2:	461a      	mov	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4413      	add	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	4a16      	ldr	r2, [pc, #88]	; (8006848 <CO_TIME_process+0xe0>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	099b      	lsrs	r3, r3, #6
 80067f4:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4b13      	ldr	r3, [pc, #76]	; (8006848 <CO_TIME_process+0xe0>)
 80067fa:	fba3 1302 	umull	r1, r3, r3, r2
 80067fe:	099b      	lsrs	r3, r3, #6
 8006800:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	441a      	add	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4a0a      	ldr	r2, [pc, #40]	; (800684c <CO_TIME_process+0xe4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d90b      	bls.n	800683e <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	4b09      	ldr	r3, [pc, #36]	; (8006850 <CO_TIME_process+0xe8>)
 800682c:	4413      	add	r3, r2
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	899b      	ldrh	r3, [r3, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006840:	4618      	mov	r0, r3
 8006842:	3728      	adds	r7, #40	; 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	10624dd3 	.word	0x10624dd3
 800684c:	05265bff 	.word	0x05265bff
 8006850:	fad9a400 	.word	0xfad9a400

08006854 <crc16_ccitt>:

/******************************************************************************/
uint16_t crc16_ccitt(const uint8_t block[],
                     size_t blockLength,
                     uint16_t crc)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	80fb      	strh	r3, [r7, #6]
    size_t i;

    for (i = 0U; i < blockLength; i++) {
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e017      	b.n	8006898 <crc16_ccitt+0x44>
        uint8_t tmp = (uint8_t)(crc >> 8U) ^ block[i];
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	0a1b      	lsrs	r3, r3, #8
 800686c:	b29b      	uxth	r3, r3
 800686e:	b2da      	uxtb	r2, r3
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	440b      	add	r3, r1
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	4053      	eors	r3, r2
 800687a:	74fb      	strb	r3, [r7, #19]
        crc = (crc << 8U) ^ crc16_ccitt_table[tmp];
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	b21a      	sxth	r2, r3
 8006882:	7cfb      	ldrb	r3, [r7, #19]
 8006884:	490a      	ldr	r1, [pc, #40]	; (80068b0 <crc16_ccitt+0x5c>)
 8006886:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800688a:	b21b      	sxth	r3, r3
 800688c:	4053      	eors	r3, r2
 800688e:	b21b      	sxth	r3, r3
 8006890:	80fb      	strh	r3, [r7, #6]
    for (i = 0U; i < blockLength; i++) {
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	3301      	adds	r3, #1
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	429a      	cmp	r2, r3
 800689e:	d3e3      	bcc.n	8006868 <crc16_ccitt+0x14>
    }
    return crc;
 80068a0:	88fb      	ldrh	r3, [r7, #6]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	08010adc 	.word	0x08010adc

080068b4 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80068c6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ca:	e006      	b.n	80068da <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 80068cc:	220c      	movs	r2, #12
 80068ce:	2100      	movs	r1, #0
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f008 f8ab 	bl	800ea2c <memset>

    return ret;
 80068d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b089      	sub	sp, #36	; 0x24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	441a      	add	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 800690c:	e100      	b.n	8006b10 <CO_LEDs_process+0x22c>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	7a5b      	ldrb	r3, [r3, #9]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	bf0c      	ite	eq
 800691a:	2301      	moveq	r3, #1
 800691c:	2300      	movne	r3, #0
 800691e:	b2db      	uxtb	r3, r3
 8006920:	613b      	str	r3, [r7, #16]

        tick = true;
 8006922:	2301      	movs	r3, #1
 8006924:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800692e:	3b50      	subs	r3, #80	; 0x50
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	3301      	adds	r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	711a      	strb	r2, [r3, #4]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	791b      	ldrb	r3, [r3, #4]
 8006944:	2b03      	cmp	r3, #3
 8006946:	f240 80cb 	bls.w	8006ae0 <CO_LEDs_process+0x1fc>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	77bb      	strb	r3, [r7, #30]
 8006954:	7fbb      	ldrb	r3, [r7, #30]
 8006956:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	7a5b      	ldrb	r3, [r3, #9]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <CO_LEDs_process+0x8a>
 8006964:	7ffb      	ldrb	r3, [r7, #31]
 8006966:	f043 0302 	orr.w	r3, r3, #2
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e003      	b.n	8006976 <CO_LEDs_process+0x92>
            else                                    gr |= CO_LED_blink;
 800696e:	7fbb      	ldrb	r3, [r7, #30]
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	795b      	ldrb	r3, [r3, #5]
 800697a:	3301      	adds	r3, #1
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	715a      	strb	r2, [r3, #5]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	2b06      	cmp	r3, #6
 8006988:	d010      	beq.n	80069ac <CO_LEDs_process+0xc8>
 800698a:	2b06      	cmp	r3, #6
 800698c:	dc12      	bgt.n	80069b4 <CO_LEDs_process+0xd0>
 800698e:	2b01      	cmp	r3, #1
 8006990:	d002      	beq.n	8006998 <CO_LEDs_process+0xb4>
 8006992:	2b02      	cmp	r3, #2
 8006994:	d005      	beq.n	80069a2 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 8006996:	e00d      	b.n	80069b4 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8006998:	7ffb      	ldrb	r3, [r7, #31]
 800699a:	f043 0304 	orr.w	r3, r3, #4
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e009      	b.n	80069b6 <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 80069a2:	7fbb      	ldrb	r3, [r7, #30]
 80069a4:	f043 0304 	orr.w	r3, r3, #4
 80069a8:	77bb      	strb	r3, [r7, #30]
 80069aa:	e004      	b.n	80069b6 <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	715a      	strb	r2, [r3, #5]
 80069b2:	e000      	b.n	80069b6 <CO_LEDs_process+0xd2>
                default: break;
 80069b4:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	799b      	ldrb	r3, [r3, #6]
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	719a      	strb	r2, [r3, #6]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	799b      	ldrb	r3, [r3, #6]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	2b07      	cmp	r3, #7
 80069ca:	d821      	bhi.n	8006a10 <CO_LEDs_process+0x12c>
 80069cc:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <CO_LEDs_process+0xf0>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	080069ff 	.word	0x080069ff
 80069dc:	080069f5 	.word	0x080069f5
 80069e0:	080069ff 	.word	0x080069ff
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a09 	.word	0x08006a09
                case 1: case 3: rd |= CO_LED_flash_2; break;
 80069f4:	7ffb      	ldrb	r3, [r7, #31]
 80069f6:	f043 0308 	orr.w	r3, r3, #8
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e009      	b.n	8006a12 <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 80069fe:	7fbb      	ldrb	r3, [r7, #30]
 8006a00:	f043 0308 	orr.w	r3, r3, #8
 8006a04:	77bb      	strb	r3, [r7, #30]
 8006a06:	e004      	b.n	8006a12 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	719a      	strb	r2, [r3, #6]
 8006a0e:	e000      	b.n	8006a12 <CO_LEDs_process+0x12e>
                default: break;
 8006a10:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	79db      	ldrb	r3, [r3, #7]
 8006a16:	3301      	adds	r3, #1
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	71da      	strb	r2, [r3, #7]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	79db      	ldrb	r3, [r3, #7]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	2b09      	cmp	r3, #9
 8006a26:	d825      	bhi.n	8006a74 <CO_LEDs_process+0x190>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <CO_LEDs_process+0x14c>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a63 	.word	0x08006a63
 8006a38:	08006a59 	.word	0x08006a59
 8006a3c:	08006a63 	.word	0x08006a63
 8006a40:	08006a59 	.word	0x08006a59
 8006a44:	08006a63 	.word	0x08006a63
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a75 	.word	0x08006a75
 8006a54:	08006a6d 	.word	0x08006a6d
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 8006a58:	7ffb      	ldrb	r3, [r7, #31]
 8006a5a:	f043 0310 	orr.w	r3, r3, #16
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e009      	b.n	8006a76 <CO_LEDs_process+0x192>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8006a62:	7fbb      	ldrb	r3, [r7, #30]
 8006a64:	f043 0310 	orr.w	r3, r3, #16
 8006a68:	77bb      	strb	r3, [r7, #30]
 8006a6a:	e004      	b.n	8006a76 <CO_LEDs_process+0x192>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	71da      	strb	r2, [r3, #7]
 8006a72:	e000      	b.n	8006a76 <CO_LEDs_process+0x192>
                default: break;
 8006a74:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	7a1b      	ldrb	r3, [r3, #8]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	721a      	strb	r2, [r3, #8]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	7a1b      	ldrb	r3, [r3, #8]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b0b      	cmp	r3, #11
 8006a8a:	d834      	bhi.n	8006af6 <CO_LEDs_process+0x212>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <CO_LEDs_process+0x1b0>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006ac5 	.word	0x08006ac5
 8006a98:	08006acf 	.word	0x08006acf
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006acf 	.word	0x08006acf
 8006aa4:	08006ac5 	.word	0x08006ac5
 8006aa8:	08006acf 	.word	0x08006acf
 8006aac:	08006ac5 	.word	0x08006ac5
 8006ab0:	08006acf 	.word	0x08006acf
 8006ab4:	08006af7 	.word	0x08006af7
 8006ab8:	08006af7 	.word	0x08006af7
 8006abc:	08006af7 	.word	0x08006af7
 8006ac0:	08006ad9 	.word	0x08006ad9
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 8006ac4:	7ffb      	ldrb	r3, [r7, #31]
 8006ac6:	f043 0320 	orr.w	r3, r3, #32
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e014      	b.n	8006af8 <CO_LEDs_process+0x214>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 8006ace:	7fbb      	ldrb	r3, [r7, #30]
 8006ad0:	f043 0320 	orr.w	r3, r3, #32
 8006ad4:	77bb      	strb	r3, [r7, #30]
 8006ad6:	e00f      	b.n	8006af8 <CO_LEDs_process+0x214>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	721a      	strb	r2, [r3, #8]
 8006ade:	e00b      	b.n	8006af8 <CO_LEDs_process+0x214>
                default: break;
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	7a5b      	ldrb	r3, [r3, #9]
 8006ae4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006ae8:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	7a9b      	ldrb	r3, [r3, #10]
 8006aee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006af2:	77bb      	strb	r3, [r7, #30]
 8006af4:	e000      	b.n	8006af8 <CO_LEDs_process+0x214>
                default: break;
 8006af6:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <CO_LEDs_process+0x224>
 8006afe:	7ffb      	ldrb	r3, [r7, #31]
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	e003      	b.n	8006b10 <CO_LEDs_process+0x22c>
        else               gr |= CO_LED_flicker;
 8006b08:	7fbb      	ldrb	r3, [r7, #30]
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	f63f aef8 	bhi.w	800690e <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d077      	beq.n	8006c14 <CO_LEDs_process+0x330>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <CO_LEDs_process+0x24c>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	75fb      	strb	r3, [r7, #23]
 8006b2e:	e032      	b.n	8006b96 <CO_LEDs_process+0x2b2>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8006b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <CO_LEDs_process+0x25e>
 8006b38:	7ffb      	ldrb	r3, [r7, #31]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
 8006b40:	e029      	b.n	8006b96 <CO_LEDs_process+0x2b2>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <CO_LEDs_process+0x26e>
 8006b48:	7ffb      	ldrb	r3, [r7, #31]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	75fb      	strb	r3, [r7, #23]
 8006b50:	e021      	b.n	8006b96 <CO_LEDs_process+0x2b2>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d004      	beq.n	8006b62 <CO_LEDs_process+0x27e>
 8006b58:	7ffb      	ldrb	r3, [r7, #31]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	75fb      	strb	r3, [r7, #23]
 8006b60:	e019      	b.n	8006b96 <CO_LEDs_process+0x2b2>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <CO_LEDs_process+0x28e>
 8006b68:	7ffb      	ldrb	r3, [r7, #31]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	75fb      	strb	r3, [r7, #23]
 8006b70:	e011      	b.n	8006b96 <CO_LEDs_process+0x2b2>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <CO_LEDs_process+0x29e>
 8006b78:	7ffb      	ldrb	r3, [r7, #31]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	75fb      	strb	r3, [r7, #23]
 8006b80:	e009      	b.n	8006b96 <CO_LEDs_process+0x2b2>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8006b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <CO_LEDs_process+0x2ae>
 8006b88:	7ffb      	ldrb	r3, [r7, #31]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	75fb      	strb	r3, [r7, #23]
 8006b90:	e001      	b.n	8006b96 <CO_LEDs_process+0x2b2>
        else                                        rd_co = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <CO_LEDs_process+0x2c2>
 8006b9c:	7fbb      	ldrb	r3, [r7, #30]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	75bb      	strb	r3, [r7, #22]
 8006ba4:	e022      	b.n	8006bec <CO_LEDs_process+0x308>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 8006ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d004      	beq.n	8006bb6 <CO_LEDs_process+0x2d2>
 8006bac:	7fbb      	ldrb	r3, [r7, #30]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	75bb      	strb	r3, [r7, #22]
 8006bb4:	e01a      	b.n	8006bec <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 8006bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d104      	bne.n	8006bc8 <CO_LEDs_process+0x2e4>
 8006bbe:	7fbb      	ldrb	r3, [r7, #30]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	75bb      	strb	r3, [r7, #22]
 8006bc6:	e011      	b.n	8006bec <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8006bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bce:	d104      	bne.n	8006bda <CO_LEDs_process+0x2f6>
 8006bd0:	7fbb      	ldrb	r3, [r7, #30]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	75bb      	strb	r3, [r7, #22]
 8006bd8:	e008      	b.n	8006bec <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 8006bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bde:	2b05      	cmp	r3, #5
 8006be0:	d102      	bne.n	8006be8 <CO_LEDs_process+0x304>
 8006be2:	2301      	movs	r3, #1
 8006be4:	75bb      	strb	r3, [r7, #22]
 8006be6:	e001      	b.n	8006bec <CO_LEDs_process+0x308>
        else                                        gr_co = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <CO_LEDs_process+0x316>
 8006bf2:	7ffb      	ldrb	r3, [r7, #31]
 8006bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bf8:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 8006bfa:	7dbb      	ldrb	r3, [r7, #22]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <CO_LEDs_process+0x324>
 8006c00:	7fbb      	ldrb	r3, [r7, #30]
 8006c02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c06:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	7ffa      	ldrb	r2, [r7, #31]
 8006c0c:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	7fba      	ldrb	r2, [r7, #30]
 8006c12:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8006c14:	bf00      	nop
 8006c16:	3724      	adds	r7, #36	; 0x24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b090      	sub	sp, #64	; 0x40
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	791b      	ldrb	r3, [r3, #4]
 8006c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8006c36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c3a:	2b08      	cmp	r3, #8
 8006c3c:	f040 814c 	bne.w	8006ed8 <CO_LSSslave_receive+0x2b8>
 8006c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 8147 	bne.w	8006ed8 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	3305      	adds	r3, #5
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8006c5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d12c      	bne.n	8006cbe <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8006c6a:	7ffb      	ldrb	r3, [r7, #31]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <CO_LSSslave_receive+0x56>
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d020      	beq.n	8006cb6 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8006c74:	e12a      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	7c1b      	ldrb	r3, [r3, #16]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d110      	bne.n	8006ca0 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8006c84:	2bff      	cmp	r3, #255	; 0xff
 8006c86:	d10b      	bne.n	8006ca0 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8c:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8006c8e:	2bff      	cmp	r3, #255	; 0xff
 8006c90:	d006      	beq.n	8006ca0 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 8006c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c94:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006c98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	3314      	adds	r3, #20
 8006caa:	2210      	movs	r2, #16
 8006cac:	2100      	movs	r1, #0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f007 febc 	bl	800ea2c <memset>
                    break;
 8006cb4:	e10a      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	2201      	movs	r2, #1
 8006cba:	741a      	strb	r2, [r3, #16]
                    break;
 8006cbc:	e106      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	7c1b      	ldrb	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 80ee 	bne.w	8006ea4 <CO_LSSslave_receive+0x284>
            switch (cs) {
 8006cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ccc:	3b40      	subs	r3, #64	; 0x40
 8006cce:	2b11      	cmp	r3, #17
 8006cd0:	f200 80f7 	bhi.w	8006ec2 <CO_LSSslave_receive+0x2a2>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <CO_LSSslave_receive+0xbc>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d25 	.word	0x08006d25
 8006ce0:	08006d35 	.word	0x08006d35
 8006ce4:	08006d45 	.word	0x08006d45
 8006ce8:	08006d55 	.word	0x08006d55
 8006cec:	08006ec3 	.word	0x08006ec3
 8006cf0:	08006ec3 	.word	0x08006ec3
 8006cf4:	08006ec3 	.word	0x08006ec3
 8006cf8:	08006ec3 	.word	0x08006ec3
 8006cfc:	08006ec3 	.word	0x08006ec3
 8006d00:	08006ec3 	.word	0x08006ec3
 8006d04:	08006ec3 	.word	0x08006ec3
 8006d08:	08006ec3 	.word	0x08006ec3
 8006d0c:	08006ec3 	.word	0x08006ec3
 8006d10:	08006ec3 	.word	0x08006ec3
 8006d14:	08006ec3 	.word	0x08006ec3
 8006d18:	08006ec3 	.word	0x08006ec3
 8006d1c:	08006ec3 	.word	0x08006ec3
 8006d20:	08006db1 	.word	0x08006db1
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	3301      	adds	r3, #1
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	615a      	str	r2, [r3, #20]
                break;
 8006d32:	e0cb      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	3301      	adds	r3, #1
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d40:	619a      	str	r2, [r3, #24]
                break;
 8006d42:	e0c3      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	3301      	adds	r3, #1
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d50:	61da      	str	r2, [r3, #28]
                break;
 8006d52:	e0bb      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	3301      	adds	r3, #1
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d60:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	f040 80ab 	bne.w	8006ec6 <CO_LSSslave_receive+0x2a6>
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	f040 80a4 	bne.w	8006ec6 <CO_LSSslave_receive+0x2a6>
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	f040 809d 	bne.w	8006ec6 <CO_LSSslave_receive+0x2a6>
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	f040 8096 	bne.w	8006ec6 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8006d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8006da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006da6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 8006daa:	2301      	movs	r3, #1
 8006dac:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 8006dae:	e08a      	b.n	8006ec6 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2bff      	cmp	r3, #255	; 0xff
 8006db8:	f040 8087 	bne.w	8006eca <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8006dc2:	2bff      	cmp	r3, #255	; 0xff
 8006dc4:	f040 8081 	bne.w	8006eca <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	795b      	ldrb	r3, [r3, #5]
 8006dcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	799b      	ldrb	r3, [r3, #6]
 8006dd4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	79db      	ldrb	r3, [r3, #7]
 8006ddc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 8006de0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006de4:	2b1f      	cmp	r3, #31
 8006de6:	d903      	bls.n	8006df0 <CO_LSSslave_receive+0x1d0>
 8006de8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d16d      	bne.n	8006ecc <CO_LSSslave_receive+0x2ac>
 8006df0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d869      	bhi.n	8006ecc <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8006df8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d865      	bhi.n	8006ecc <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	3301      	adds	r3, #1
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8006e10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d10d      	bne.n	8006e34 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8006e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e26:	3324      	adds	r3, #36	; 0x24
 8006e28:	2210      	movs	r2, #16
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f007 fdfd 	bl	800ea2c <memset>
 8006e32:	e02c      	b.n	8006e8e <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e3a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d125      	bne.n	8006e8e <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8006e42:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8006e50:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	405a      	eors	r2, r3
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d113      	bne.n	8006e8e <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8006e66:	2301      	movs	r3, #1
 8006e68:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8006e74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d108      	bne.n	8006e8e <CO_LSSslave_receive+0x26e>
 8006e7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006e80:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d202      	bcs.n	8006e8e <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8006e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01a      	beq.n	8006eca <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006e9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 8006ea2:	e012      	b.n	8006eca <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	3349      	adds	r3, #73	; 0x49
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eac:	4618      	mov	r0, r3
 8006eae:	f007 fd95 	bl	800e9dc <memcpy>
            LSSslave->service = cs;
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec0:	e004      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
                break;
 8006ec2:	bf00      	nop
 8006ec4:	e002      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
                break;
 8006ec6:	bf00      	nop
 8006ec8:	e000      	b.n	8006ecc <CO_LSSslave_receive+0x2ac>
                break;
 8006eca:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8006ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8006ed8:	bf00      	nop
 8006eda:	3740      	adds	r7, #64	; 0x40
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	af04      	add	r7, sp, #16
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d018      	beq.n	8006f2a <CO_LSSslave_init+0x4a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d015      	beq.n	8006f2a <CO_LSSslave_init+0x4a>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d012      	beq.n	8006f2a <CO_LSSslave_init+0x4a>
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00f      	beq.n	8006f2a <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00c      	beq.n	8006f2a <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d004      	beq.n	8006f22 <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da06      	bge.n	8006f30 <CO_LSSslave_init+0x50>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2bff      	cmp	r3, #255	; 0xff
 8006f28:	d002      	beq.n	8006f30 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2e:	e046      	b.n	8006fbe <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8006f30:	2274      	movs	r2, #116	; 0x74
 8006f32:	2100      	movs	r1, #0
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f007 fd79 	bl	800ea2c <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2210      	movs	r2, #16
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f007 fd4b 	bl	800e9dc <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8006f70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006f72:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8006f74:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <CO_LSSslave_init+0xe8>)
 8006f76:	9302      	str	r3, [sp, #8]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006f84:	6a38      	ldr	r0, [r7, #32]
 8006f86:	f001 fba3 	bl	80086d0 <CO_CANrxBufferInit>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f92:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8006f94:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006f96:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	2308      	movs	r3, #8
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fa4:	f001 fbf2 	bl	800878c <CO_CANtxBufferInit>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006fb6:	23ff      	movs	r3, #255	; 0xff
 8006fb8:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8006fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08006c21 	.word	0x08006c21

08006fcc <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	; 0x30
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8203 	beq.w	80073e8 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	3305      	adds	r3, #5
 8006fec:	2208      	movs	r2, #8
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f007 fd1b 	bl	800ea2c <memset>

        switch (LSSslave->service) {
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006ffc:	3b04      	subs	r3, #4
 8006ffe:	2b5a      	cmp	r3, #90	; 0x5a
 8007000:	f200 81dd 	bhi.w	80073be <CO_LSSslave_process+0x3f2>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <CO_LSSslave_process+0x40>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007179 	.word	0x08007179
 8007010:	080073bf 	.word	0x080073bf
 8007014:	080073bf 	.word	0x080073bf
 8007018:	080073bf 	.word	0x080073bf
 800701c:	080073bf 	.word	0x080073bf
 8007020:	080073bf 	.word	0x080073bf
 8007024:	080073bf 	.word	0x080073bf
 8007028:	080073bf 	.word	0x080073bf
 800702c:	080073bf 	.word	0x080073bf
 8007030:	080073bf 	.word	0x080073bf
 8007034:	080073bf 	.word	0x080073bf
 8007038:	080073bf 	.word	0x080073bf
 800703c:	080073bf 	.word	0x080073bf
 8007040:	0800718d 	.word	0x0800718d
 8007044:	080073bf 	.word	0x080073bf
 8007048:	080071db 	.word	0x080071db
 800704c:	080073bf 	.word	0x080073bf
 8007050:	08007277 	.word	0x08007277
 8007054:	080073bf 	.word	0x080073bf
 8007058:	080072b5 	.word	0x080072b5
 800705c:	080073bf 	.word	0x080073bf
 8007060:	080073bf 	.word	0x080073bf
 8007064:	080073bf 	.word	0x080073bf
 8007068:	080073bf 	.word	0x080073bf
 800706c:	080073bf 	.word	0x080073bf
 8007070:	080073bf 	.word	0x080073bf
 8007074:	080073bf 	.word	0x080073bf
 8007078:	080073bf 	.word	0x080073bf
 800707c:	080073bf 	.word	0x080073bf
 8007080:	080073bf 	.word	0x080073bf
 8007084:	080073bf 	.word	0x080073bf
 8007088:	080073bf 	.word	0x080073bf
 800708c:	080073bf 	.word	0x080073bf
 8007090:	080073bf 	.word	0x080073bf
 8007094:	080073bf 	.word	0x080073bf
 8007098:	080073bf 	.word	0x080073bf
 800709c:	080073bf 	.word	0x080073bf
 80070a0:	080073bf 	.word	0x080073bf
 80070a4:	080073bf 	.word	0x080073bf
 80070a8:	080073bf 	.word	0x080073bf
 80070ac:	080073bf 	.word	0x080073bf
 80070b0:	080073bf 	.word	0x080073bf
 80070b4:	080073bf 	.word	0x080073bf
 80070b8:	080073bf 	.word	0x080073bf
 80070bc:	080073bf 	.word	0x080073bf
 80070c0:	080073bf 	.word	0x080073bf
 80070c4:	080073bf 	.word	0x080073bf
 80070c8:	080073bf 	.word	0x080073bf
 80070cc:	080073bf 	.word	0x080073bf
 80070d0:	080073bf 	.word	0x080073bf
 80070d4:	080073bf 	.word	0x080073bf
 80070d8:	080073bf 	.word	0x080073bf
 80070dc:	080073bf 	.word	0x080073bf
 80070e0:	080073bf 	.word	0x080073bf
 80070e4:	080073bf 	.word	0x080073bf
 80070e8:	080073bf 	.word	0x080073bf
 80070ec:	080073bf 	.word	0x080073bf
 80070f0:	080073bf 	.word	0x080073bf
 80070f4:	080073bf 	.word	0x080073bf
 80070f8:	080073bf 	.word	0x080073bf
 80070fc:	080073bf 	.word	0x080073bf
 8007100:	080073bf 	.word	0x080073bf
 8007104:	080073bf 	.word	0x080073bf
 8007108:	0800717f 	.word	0x0800717f
 800710c:	080073bf 	.word	0x080073bf
 8007110:	080073bf 	.word	0x080073bf
 8007114:	080073bf 	.word	0x080073bf
 8007118:	080073bf 	.word	0x080073bf
 800711c:	080073bf 	.word	0x080073bf
 8007120:	080073bf 	.word	0x080073bf
 8007124:	080073bf 	.word	0x080073bf
 8007128:	080073bf 	.word	0x080073bf
 800712c:	080073bf 	.word	0x080073bf
 8007130:	080073bf 	.word	0x080073bf
 8007134:	080073bf 	.word	0x080073bf
 8007138:	080073bf 	.word	0x080073bf
 800713c:	080073bf 	.word	0x080073bf
 8007140:	080073b1 	.word	0x080073b1
 8007144:	080073bf 	.word	0x080073bf
 8007148:	080073bf 	.word	0x080073bf
 800714c:	080073bf 	.word	0x080073bf
 8007150:	080073bf 	.word	0x080073bf
 8007154:	080073bf 	.word	0x080073bf
 8007158:	080073bf 	.word	0x080073bf
 800715c:	080073bf 	.word	0x080073bf
 8007160:	080073bf 	.word	0x080073bf
 8007164:	0800730b 	.word	0x0800730b
 8007168:	0800732d 	.word	0x0800732d
 800716c:	0800734f 	.word	0x0800734f
 8007170:	08007371 	.word	0x08007371
 8007174:	08007393 	.word	0x08007393
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8007178:	2301      	movs	r3, #1
 800717a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800717c:	e126      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	2244      	movs	r2, #68	; 0x44
 8007184:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8007186:	2301      	movs	r3, #1
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800718a:	e11f      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8007192:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 800719a:	7cfb      	ldrb	r3, [r7, #19]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <CO_LSSslave_process+0x1dc>
 80071a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da02      	bge.n	80071ae <CO_LSSslave_process+0x1e2>
 80071a8:	7cfb      	ldrb	r3, [r7, #19]
 80071aa:	2bff      	cmp	r3, #255	; 0xff
 80071ac:	d104      	bne.n	80071b8 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	7cfa      	ldrb	r2, [r7, #19]
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	e002      	b.n	80071be <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80071c8:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80071d2:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 80071d4:	2301      	movs	r3, #1
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80071d8:	e0f8      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 80ef 	beq.w	80073c2 <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80071ea:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80071f2:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8007200:	7f7b      	ldrb	r3, [r7, #29]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d121      	bne.n	800724a <CO_LSSslave_process+0x27e>
 8007206:	7f3b      	ldrb	r3, [r7, #28]
 8007208:	2b05      	cmp	r3, #5
 800720a:	d01e      	beq.n	800724a <CO_LSSslave_process+0x27e>
 800720c:	7f3b      	ldrb	r3, [r7, #28]
 800720e:	2b09      	cmp	r3, #9
 8007210:	d81b      	bhi.n	800724a <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8007212:	7f3b      	ldrb	r3, [r7, #28]
 8007214:	4a77      	ldr	r2, [pc, #476]	; (80073f4 <CO_LSSslave_process+0x428>)
 8007216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800721a:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007224:	8b79      	ldrh	r1, [r7, #26]
 8007226:	4610      	mov	r0, r2
 8007228:	4798      	blx	r3
 800722a:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	8b7a      	ldrh	r2, [r7, #26]
 8007238:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800723a:	e009      	b.n	8007250 <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 800723c:	23ff      	movs	r3, #255	; 0xff
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8007242:	2301      	movs	r3, #1
 8007244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8007248:	e002      	b.n	8007250 <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800725a:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007264:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800726e:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8007270:	2301      	movs	r3, #1
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007274:	e0aa      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80a3 	beq.w	80073c6 <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80a0 	beq.w	80073ca <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007290:	b29b      	uxth	r3, r3
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800729c:	b29a      	uxth	r2, r3
 800729e:	8bfb      	ldrh	r3, [r7, #30]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80072ac:	8bf9      	ldrh	r1, [r7, #30]
 80072ae:	4610      	mov	r0, r2
 80072b0:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 80072b2:	e08a      	b.n	80073ca <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c8:	e011      	b.n	80072ee <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80072d6:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80072dc:	8812      	ldrh	r2, [r2, #0]
 80072de:	4798      	blx	r3
 80072e0:	6238      	str	r0, [r7, #32]
                if (!result) {
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 80072e8:	2302      	movs	r3, #2
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80072f8:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007302:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8007304:	2301      	movs	r3, #1
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007308:	e060      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8007314:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007320:	3306      	adds	r3, #6
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8007326:	2301      	movs	r3, #1
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800732a:	e04f      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8007336:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	3306      	adds	r3, #6
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8007348:	2301      	movs	r3, #1
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800734c:	e03e      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8007358:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007364:	3306      	adds	r3, #6
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800736a:	2301      	movs	r3, #1
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800736e:	e02d      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800737a:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	3306      	adds	r3, #6
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800738c:	2301      	movs	r3, #1
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007390:	e01c      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800739c:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80073a8:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 80073aa:	2301      	movs	r3, #1
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80073ae:	e00d      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b4:	224f      	movs	r2, #79	; 0x4f
 80073b6:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 80073b8:	2301      	movs	r3, #1
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80073bc:	e006      	b.n	80073cc <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 80073be:	bf00      	nop
 80073c0:	e004      	b.n	80073cc <CO_LSSslave_process+0x400>
                break;
 80073c2:	bf00      	nop
 80073c4:	e002      	b.n	80073cc <CO_LSSslave_process+0x400>
                break;
 80073c6:	bf00      	nop
 80073c8:	e000      	b.n	80073cc <CO_LSSslave_process+0x400>
            break;
 80073ca:	bf00      	nop
        }
        }

        if(CANsend) {
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f001 fa4f 	bl	8008880 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3730      	adds	r7, #48	; 0x30
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	08010cdc 	.word	0x08010cdc

080073f8 <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	08db      	lsrs	r3, r3, #3
 8007408:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	2201      	movs	r2, #1
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b09      	cmp	r3, #9
 8007422:	d807      	bhi.n	8007434 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	5cd2      	ldrb	r2, [r2, r3]
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	4013      	ands	r3, r2
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <CO_isError+0x40>
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <CO_isError+0x42>
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <CO_getErrorRegister+0x1e>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <CO_getErrorRegister+0x1e>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	e000      	b.n	8007466 <CO_getErrorRegister+0x20>
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <CO_NMT_getInternalState+0x16>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f993 3000 	ldrsb.w	r3, [r3]
 8007486:	e000      	b.n	800748a <CO_NMT_getInternalState+0x18>
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <CO_LSSslave_getState+0x14>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	7c1b      	ldrb	r3, [r3, #16]
 80074a8:	e000      	b.n	80074ac <CO_LSSslave_getState+0x16>
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80074ce:	2140      	movs	r1, #64	; 0x40
 80074d0:	2001      	movs	r0, #1
 80074d2:	f007 f87b 	bl	800e5cc <calloc>
 80074d6:	4603      	mov	r3, r0
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8105 	beq.w	80076ec <CO_new+0x234>
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	3340      	adds	r3, #64	; 0x40
 80074e6:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80074e8:	212c      	movs	r1, #44	; 0x2c
 80074ea:	2001      	movs	r0, #1
 80074ec:	f007 f86e 	bl	800e5cc <calloc>
 80074f0:	4603      	mov	r3, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	611a      	str	r2, [r3, #16]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80f7 	beq.w	80076f0 <CO_new+0x238>
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	332c      	adds	r3, #44	; 0x2c
 8007506:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8007508:	2308      	movs	r3, #8
 800750a:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 800750c:	2130      	movs	r1, #48	; 0x30
 800750e:	2001      	movs	r0, #1
 8007510:	f007 f85c 	bl	800e5cc <calloc>
 8007514:	4603      	mov	r3, r0
 8007516:	461a      	mov	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	615a      	str	r2, [r3, #20]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 80e7 	beq.w	80076f4 <CO_new+0x23c>
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3330      	adds	r3, #48	; 0x30
 800752a:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	2110      	movs	r1, #16
 8007530:	4618      	mov	r0, r3
 8007532:	f007 f84b 	bl	800e5cc <calloc>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	619a      	str	r2, [r3, #24]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 80d8 	beq.w	80076f8 <CO_new+0x240>
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4413      	add	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8007552:	2150      	movs	r1, #80	; 0x50
 8007554:	2001      	movs	r0, #1
 8007556:	f007 f839 	bl	800e5cc <calloc>
 800755a:	4603      	mov	r3, r0
 800755c:	461a      	mov	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	61da      	str	r2, [r3, #28]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80c8 	beq.w	80076fc <CO_new+0x244>
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	3350      	adds	r3, #80	; 0x50
 8007570:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8007572:	2311      	movs	r3, #17
 8007574:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8007576:	7abb      	ldrb	r3, [r7, #10]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d912      	bls.n	80075a2 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 800757c:	7abb      	ldrb	r3, [r7, #10]
 800757e:	2108      	movs	r1, #8
 8007580:	4618      	mov	r0, r3
 8007582:	f007 f823 	bl	800e5cc <calloc>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	621a      	str	r2, [r3, #32]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 80b4 	beq.w	8007700 <CO_new+0x248>
 8007598:	7abb      	ldrb	r3, [r7, #10]
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	4413      	add	r3, r2
 80075a0:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80075a2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80075a6:	2001      	movs	r0, #1
 80075a8:	f007 f810 	bl	800e5cc <calloc>
 80075ac:	4603      	mov	r3, r0
 80075ae:	461a      	mov	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80a3 	beq.w	8007704 <CO_new+0x24c>
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80075c4:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80075c6:	212c      	movs	r1, #44	; 0x2c
 80075c8:	2001      	movs	r0, #1
 80075ca:	f006 ffff 	bl	800e5cc <calloc>
 80075ce:	4603      	mov	r3, r0
 80075d0:	461a      	mov	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	629a      	str	r2, [r3, #40]	; 0x28
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 8094 	beq.w	8007708 <CO_new+0x250>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	332c      	adds	r3, #44	; 0x2c
 80075e4:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80075e6:	2160      	movs	r1, #96	; 0x60
 80075e8:	2001      	movs	r0, #1
 80075ea:	f006 ffef 	bl	800e5cc <calloc>
 80075ee:	4603      	mov	r3, r0
 80075f0:	461a      	mov	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8086 	beq.w	800770c <CO_new+0x254>
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	3360      	adds	r3, #96	; 0x60
 8007604:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8007606:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800760a:	2004      	movs	r0, #4
 800760c:	f006 ffde 	bl	800e5cc <calloc>
 8007610:	4603      	mov	r3, r0
 8007612:	461a      	mov	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	2b00      	cmp	r3, #0
 800761e:	d077      	beq.n	8007710 <CO_new+0x258>
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8007626:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8007628:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800762c:	2004      	movs	r0, #4
 800762e:	f006 ffcd 	bl	800e5cc <calloc>
 8007632:	4603      	mov	r3, r0
 8007634:	461a      	mov	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	635a      	str	r2, [r3, #52]	; 0x34
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763e:	2b00      	cmp	r3, #0
 8007640:	d068      	beq.n	8007714 <CO_new+0x25c>
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8007648:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 800764a:	210c      	movs	r1, #12
 800764c:	2001      	movs	r0, #1
 800764e:	f006 ffbd 	bl	800e5cc <calloc>
 8007652:	4603      	mov	r3, r0
 8007654:	461a      	mov	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	639a      	str	r2, [r3, #56]	; 0x38
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	2b00      	cmp	r3, #0
 8007660:	d05a      	beq.n	8007718 <CO_new+0x260>
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	330c      	adds	r3, #12
 8007666:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8007668:	2174      	movs	r1, #116	; 0x74
 800766a:	2001      	movs	r0, #1
 800766c:	f006 ffae 	bl	800e5cc <calloc>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	63da      	str	r2, [r3, #60]	; 0x3c
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d04d      	beq.n	800771c <CO_new+0x264>
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	3374      	adds	r3, #116	; 0x74
 8007684:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8007686:	2138      	movs	r1, #56	; 0x38
 8007688:	2001      	movs	r0, #1
 800768a:	f006 ff9f 	bl	800e5cc <calloc>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d040      	beq.n	8007720 <CO_new+0x268>
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3338      	adds	r3, #56	; 0x38
 80076a2:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80076a4:	210c      	movs	r1, #12
 80076a6:	2011      	movs	r0, #17
 80076a8:	f006 ff90 	bl	800e5cc <calloc>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461a      	mov	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	609a      	str	r2, [r3, #8]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d033      	beq.n	8007724 <CO_new+0x26c>
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	33cc      	adds	r3, #204	; 0xcc
 80076c0:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80076c2:	2118      	movs	r1, #24
 80076c4:	2009      	movs	r0, #9
 80076c6:	f006 ff81 	bl	800e5cc <calloc>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	60da      	str	r2, [r3, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d026      	beq.n	8007728 <CO_new+0x270>
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	33d8      	adds	r3, #216	; 0xd8
 80076de:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e01e      	b.n	800772a <CO_new+0x272>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80076ec:	bf00      	nop
 80076ee:	e01c      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80076f0:	bf00      	nop
 80076f2:	e01a      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80076f4:	bf00      	nop
 80076f6:	e018      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80076f8:	bf00      	nop
 80076fa:	e016      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80076fc:	bf00      	nop
 80076fe:	e014      	b.n	800772a <CO_new+0x272>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8007700:	bf00      	nop
 8007702:	e012      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8007704:	bf00      	nop
 8007706:	e010      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8007708:	bf00      	nop
 800770a:	e00e      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 800770c:	bf00      	nop
 800770e:	e00c      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8007710:	bf00      	nop
 8007712:	e00a      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8007714:	bf00      	nop
 8007716:	e008      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8007718:	bf00      	nop
 800771a:	e006      	b.n	800772a <CO_new+0x272>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 800771c:	bf00      	nop
 800771e:	e004      	b.n	800772a <CO_new+0x272>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8007720:	bf00      	nop
 8007722:	e002      	b.n	800772a <CO_new+0x272>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <CO_new+0x272>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8007728:	bf00      	nop
    } while (false);

    if (coFinal == NULL) {
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <CO_new+0x27e>
        CO_delete(co);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f80b 	bl	800774c <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <CO_new+0x28a>
        *heapMemoryUsed = mem;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8007742:	697b      	ldr	r3, [r7, #20]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <CO_delete>:

void CO_delete(CO_t *co) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d053      	beq.n	8007802 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	4618      	mov	r0, r3
 8007760:	f000 ffa0 	bl	80086a4 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	4618      	mov	r0, r3
 800776a:	f007 f92f 	bl	800e9cc <free>
    CO_free(co->CANrx);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	4618      	mov	r0, r3
 8007774:	f007 f92a 	bl	800e9cc <free>
    CO_free(co->CANmodule);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	4618      	mov	r0, r3
 800777e:	f007 f925 	bl	800e9cc <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	4618      	mov	r0, r3
 8007788:	f007 f920 	bl	800e9cc <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	4618      	mov	r0, r3
 8007792:	f007 f91b 	bl	800e9cc <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	4618      	mov	r0, r3
 800779c:	f007 f916 	bl	800e9cc <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	4618      	mov	r0, r3
 80077a6:	f007 f911 	bl	800e9cc <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	4618      	mov	r0, r3
 80077b0:	f007 f90c 	bl	800e9cc <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	4618      	mov	r0, r3
 80077ba:	f007 f907 	bl	800e9cc <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	4618      	mov	r0, r3
 80077c4:	f007 f902 	bl	800e9cc <free>

    /* Emergency */
    CO_free(co->em);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f007 f8fd 	bl	800e9cc <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f007 f8f8 	bl	800e9cc <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f007 f8f3 	bl	800e9cc <free>
    CO_free(co->HBcons);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f007 f8ee 	bl	800e9cc <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f007 f8e9 	bl	800e9cc <free>

    /* CANopen object */
    CO_free(co);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f007 f8e6 	bl	800e9cc <free>
 8007800:	e000      	b.n	8007804 <CO_delete+0xb8>
        return;
 8007802:	bf00      	nop
}
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 800780a:	b580      	push	{r7, lr}
 800780c:	b08a      	sub	sp, #40	; 0x28
 800780e:	af04      	add	r7, sp, #16
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <CO_CANinit+0x1a>
 800781e:	f04f 33ff 	mov.w	r3, #4294967295
 8007822:	e01a      	b.n	800785a <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800782c:	68b8      	ldr	r0, [r7, #8]
 800782e:	f000 fe49 	bl	80084c4 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6858      	ldr	r0, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6899      	ldr	r1, [r3, #8]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	88fa      	ldrh	r2, [r7, #6]
 8007840:	9202      	str	r2, [sp, #8]
 8007842:	2209      	movs	r2, #9
 8007844:	9201      	str	r2, [sp, #4]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	2311      	movs	r3, #17
 800784a:	460a      	mov	r2, r1
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	f000 fe61 	bl	8008514 <CO_CANmodule_init>
 8007852:	4603      	mov	r3, r0
 8007854:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8007856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3718      	adds	r7, #24
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b08c      	sub	sp, #48	; 0x30
 8007866:	af06      	add	r7, sp, #24
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007876:	f04f 33ff 	mov.w	r3, #4294967295
 800787a:	e01a      	b.n	80078b2 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	6852      	ldr	r2, [r2, #4]
 8007888:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800788c:	9105      	str	r1, [sp, #20]
 800788e:	2108      	movs	r1, #8
 8007890:	9104      	str	r1, [sp, #16]
 8007892:	9203      	str	r2, [sp, #12]
 8007894:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8007898:	9202      	str	r2, [sp, #8]
 800789a:	2210      	movs	r2, #16
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	f7ff fb1b 	bl	8006ee0 <CO_LSSslave_init>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 80078ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 80078bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078be:	b091      	sub	sp, #68	; 0x44
 80078c0:	af0a      	add	r7, sp, #40	; 0x28
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d102      	bne.n	80078d6 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80078d0:	f04f 33ff 	mov.w	r3, #4294967295
 80078d4:	e135      	b.n	8007b42 <CO_CANopenInit+0x286>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <CO_CANopenInit+0x26>
        em = co->em;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 80078e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80078ec:	2bff      	cmp	r3, #255	; 0xff
 80078ee:	d103      	bne.n	80078f8 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	e00a      	b.n	800790e <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 80078f8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <CO_CANopenInit+0x4c>
 8007900:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8007904:	2b00      	cmp	r3, #0
 8007906:	da02      	bge.n	800790e <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007908:	f04f 33ff 	mov.w	r3, #4294967295
 800790c:	e119      	b.n	8007b42 <CO_CANopenInit+0x286>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe ffce 	bl	80068b4 <CO_LEDs_init>
 8007918:	4603      	mov	r3, r0
 800791a:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 800791c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <CO_CANopenInit+0x6e>
 8007924:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007928:	e10b      	b.n	8007b42 <CO_CANopenInit+0x286>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8007932:	f06f 0312 	mvn.w	r3, #18
 8007936:	e104      	b.n	8007b42 <CO_CANopenInit+0x286>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	69d8      	ldr	r0, [r3, #28]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8007940:	4b82      	ldr	r3, [pc, #520]	; (8007b4c <CO_CANopenInit+0x290>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 800794e:	4b7f      	ldr	r3, [pc, #508]	; (8007b4c <CO_CANopenInit+0x290>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8007954:	3390      	adds	r3, #144	; 0x90
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8007956:	4a7d      	ldr	r2, [pc, #500]	; (8007b4c <CO_CANopenInit+0x290>)
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 800795c:	3218      	adds	r2, #24
 800795e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007960:	9105      	str	r1, [sp, #20]
 8007962:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8007966:	9104      	str	r1, [sp, #16]
 8007968:	9203      	str	r2, [sp, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	9202      	str	r2, [sp, #8]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	2311      	movs	r3, #17
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4633      	mov	r3, r6
 8007976:	462a      	mov	r2, r5
 8007978:	4621      	mov	r1, r4
 800797a:	f7f9 fb27 	bl	8000fcc <CO_EM_init>
 800797e:	4603      	mov	r3, r0
 8007980:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8007982:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <CO_CANopenInit+0xd4>
 800798a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800798e:	e0d8      	b.n	8007b42 <CO_CANopenInit+0x286>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8007994:	4b6d      	ldr	r3, [pc, #436]	; (8007b4c <CO_CANopenInit+0x290>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 800799a:	f103 05b4 	add.w	r5, r3, #180	; 0xb4
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	6852      	ldr	r2, [r2, #4]
 80079a6:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 80079aa:	b289      	uxth	r1, r1
 80079ac:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 80079b0:	b289      	uxth	r1, r1
 80079b2:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 80079b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80079b8:	9008      	str	r0, [sp, #32]
 80079ba:	9107      	str	r1, [sp, #28]
 80079bc:	2107      	movs	r1, #7
 80079be:	9106      	str	r1, [sp, #24]
 80079c0:	9205      	str	r2, [sp, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	9204      	str	r2, [sp, #16]
 80079c6:	2200      	movs	r2, #0
 80079c8:	9203      	str	r2, [sp, #12]
 80079ca:	9302      	str	r3, [sp, #8]
 80079cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	4633      	mov	r3, r6
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4629      	mov	r1, r5
 80079da:	4620      	mov	r0, r4
 80079dc:	f7fa f986 	bl	8001cec <CO_NMT_init>
 80079e0:	4603      	mov	r3, r0
 80079e2:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 80079e4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <CO_CANopenInit+0x136>
 80079ec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80079f0:	e0a7      	b.n	8007b42 <CO_CANopenInit+0x286>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6958      	ldr	r0, [r3, #20]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 80079fa:	4b54      	ldr	r3, [pc, #336]	; (8007b4c <CO_CANopenInit+0x290>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 8007a00:	33a8      	adds	r3, #168	; 0xa8
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	6852      	ldr	r2, [r2, #4]
 8007a06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a08:	9103      	str	r1, [sp, #12]
 8007a0a:	2108      	movs	r1, #8
 8007a0c:	9102      	str	r1, [sp, #8]
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	2308      	movs	r3, #8
 8007a14:	4622      	mov	r2, r4
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	f7f9 fe6c 	bl	80016f4 <CO_HBconsumer_init>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 8007a20:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <CO_CANopenInit+0x172>
 8007a28:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007a2c:	e089      	b.n	8007b42 <CO_CANopenInit+0x286>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8007a2e:	4b47      	ldr	r3, [pc, #284]	; (8007b4c <CO_CANopenInit+0x290>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	33d8      	adds	r3, #216	; 0xd8
 8007a36:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8007a38:	2300      	movs	r3, #0
 8007a3a:	827b      	strh	r3, [r7, #18]
 8007a3c:	e034      	b.n	8007aa8 <CO_CANopenInit+0x1ec>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a42:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007a46:	4613      	mov	r3, r2
 8007a48:	015b      	lsls	r3, r3, #5
 8007a4a:	4413      	add	r3, r2
 8007a4c:	015b      	lsls	r3, r3, #5
 8007a4e:	18ce      	adds	r6, r1, r3
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	f102 030c 	add.w	r3, r2, #12
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	8a79      	ldrh	r1, [r7, #18]
 8007a5e:	3107      	adds	r1, #7
 8007a60:	b289      	uxth	r1, r1
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	6840      	ldr	r0, [r0, #4]
 8007a66:	8a7c      	ldrh	r4, [r7, #18]
 8007a68:	3406      	adds	r4, #6
 8007a6a:	b2a4      	uxth	r4, r4
 8007a6c:	f897 c048 	ldrb.w	ip, [r7, #72]	; 0x48
 8007a70:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8007a72:	9505      	str	r5, [sp, #20]
 8007a74:	9404      	str	r4, [sp, #16]
 8007a76:	9003      	str	r0, [sp, #12]
 8007a78:	9102      	str	r1, [sp, #8]
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	4663      	mov	r3, ip
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	4630      	mov	r0, r6
 8007a86:	f7fc fc25 	bl	80042d4 <CO_SDOserver_init>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8007a8e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <CO_CANopenInit+0x1e0>
 8007a96:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007a9a:	e052      	b.n	8007b42 <CO_CANopenInit+0x286>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8007a9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	827b      	strh	r3, [r7, #18]
 8007aa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	ddc6      	ble.n	8007a3e <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8007ab4:	4b25      	ldr	r3, [pc, #148]	; (8007b4c <CO_CANopenInit+0x290>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8007aba:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	f7fe fdce 	bl	8006668 <CO_TIME_init>
 8007acc:	4603      	mov	r3, r0
 8007ace:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 8007ad0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <CO_CANopenInit+0x222>
 8007ad8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007adc:	e031      	b.n	8007b42 <CO_CANopenInit+0x286>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6add      	ldr	r5, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 8007ae2:	4b1a      	ldr	r3, [pc, #104]	; (8007b4c <CO_CANopenInit+0x290>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8007ae8:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8007aec:	4b17      	ldr	r3, [pc, #92]	; (8007b4c <CO_CANopenInit+0x290>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8007af2:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8007af6:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <CO_CANopenInit+0x290>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8007afc:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8007afe:	4a13      	ldr	r2, [pc, #76]	; (8007b4c <CO_CANopenInit+0x290>)
 8007b00:	6812      	ldr	r2, [r2, #0]
 8007b02:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 8007b04:	32cc      	adds	r2, #204	; 0xcc
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	6849      	ldr	r1, [r1, #4]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	6840      	ldr	r0, [r0, #4]
 8007b0e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8007b10:	9406      	str	r4, [sp, #24]
 8007b12:	2400      	movs	r4, #0
 8007b14:	9405      	str	r4, [sp, #20]
 8007b16:	9004      	str	r0, [sp, #16]
 8007b18:	2001      	movs	r0, #1
 8007b1a:	9003      	str	r0, [sp, #12]
 8007b1c:	9102      	str	r1, [sp, #8]
 8007b1e:	9201      	str	r2, [sp, #4]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	4663      	mov	r3, ip
 8007b24:	4632      	mov	r2, r6
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f7fe fad5 	bl	80060d8 <CO_SYNC_init>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8007b32:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <CO_CANopenInit+0x284>
 8007b3a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007b3e:	e000      	b.n	8007b42 <CO_CANopenInit+0x286>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000440 	.word	0x20000440

08007b50 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8007b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b52:	b093      	sub	sp, #76	; 0x4c
 8007b54:	af06      	add	r7, sp, #24
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007b64:	f04f 33ff 	mov.w	r3, #4294967295
 8007b68:	e0c4      	b.n	8007cf4 <CO_CANopenInitPDO+0x1a4>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <CO_CANopenInitPDO+0x30>
 8007b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	db03      	blt.n	8007b80 <CO_CANopenInitPDO+0x30>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d009      	beq.n	8007b94 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <CO_CANopenInitPDO+0x3e>
 8007b88:	f06f 0312 	mvn.w	r3, #18
 8007b8c:	e0b2      	b.n	8007cf4 <CO_CANopenInitPDO+0x1a4>
 8007b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b92:	e0af      	b.n	8007cf4 <CO_CANopenInitPDO+0x1a4>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8007b94:	4b59      	ldr	r3, [pc, #356]	; (8007cfc <CO_CANopenInitPDO+0x1ac>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	33f0      	adds	r3, #240	; 0xf0
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8007b9e:	4b57      	ldr	r3, [pc, #348]	; (8007cfc <CO_CANopenInitPDO+0x1ac>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007ba8:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007baa:	2300      	movs	r3, #0
 8007bac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007bae:	e044      	b.n	8007c3a <CO_CANopenInitPDO+0xea>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8007bb4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	dc09      	bgt.n	8007bd0 <CO_CANopenInitPDO+0x80>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8007bbc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	4413      	add	r3, r2
 8007bce:	84bb      	strh	r3, [r7, #36]	; 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007bd8:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007bdc:	fb01 f303 	mul.w	r3, r1, r3
 8007be0:	18d5      	adds	r5, r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	f103 020c 	add.w	r2, r3, #12
 8007bec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bf0:	f102 010c 	add.w	r1, r2, #12
 8007bf4:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	6849      	ldr	r1, [r1, #4]
 8007bfa:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8007bfc:	3003      	adds	r0, #3
 8007bfe:	b280      	uxth	r0, r0
 8007c00:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8007c02:	9405      	str	r4, [sp, #20]
 8007c04:	9004      	str	r0, [sp, #16]
 8007c06:	9103      	str	r1, [sp, #12]
 8007c08:	9202      	str	r2, [sp, #8]
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4633      	mov	r3, r6
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	4628      	mov	r0, r5
 8007c18:	f7fb f9ae 	bl	8002f78 <CO_RPDO_init>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 8007c20:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <CO_CANopenInitPDO+0xde>
 8007c28:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007c2c:	e062      	b.n	8007cf4 <CO_CANopenInitPDO+0x1a4>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007c2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	3301      	adds	r3, #1
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	ddb6      	ble.n	8007bb0 <CO_CANopenInitPDO+0x60>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <CO_CANopenInitPDO+0x1ac>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c4c:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8007c4e:	4b2b      	ldr	r3, [pc, #172]	; (8007cfc <CO_CANopenInitPDO+0x1ac>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007c58:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	837b      	strh	r3, [r7, #26]
 8007c5e:	e044      	b.n	8007cea <CO_CANopenInitPDO+0x19a>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8007c64:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	dc09      	bgt.n	8007c80 <CO_CANopenInitPDO+0x130>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8007c6c:	8b7b      	ldrh	r3, [r7, #26]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4413      	add	r3, r2
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007c7e:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007c88:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007c8c:	fb01 f303 	mul.w	r3, r1, r3
 8007c90:	18d5      	adds	r5, r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f103 020c 	add.w	r2, r3, #12
 8007c9c:	623a      	str	r2, [r7, #32]
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	f102 010c 	add.w	r1, r2, #12
 8007ca4:	61f9      	str	r1, [r7, #28]
 8007ca6:	68f9      	ldr	r1, [r7, #12]
 8007ca8:	6849      	ldr	r1, [r1, #4]
 8007caa:	8b78      	ldrh	r0, [r7, #26]
 8007cac:	3002      	adds	r0, #2
 8007cae:	b280      	uxth	r0, r0
 8007cb0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8007cb2:	9405      	str	r4, [sp, #20]
 8007cb4:	9004      	str	r0, [sp, #16]
 8007cb6:	9103      	str	r1, [sp, #12]
 8007cb8:	9202      	str	r2, [sp, #8]
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	8b3b      	ldrh	r3, [r7, #24]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4633      	mov	r3, r6
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f7fb fd22 	bl	8003710 <CO_TPDO_init>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 8007cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <CO_CANopenInitPDO+0x18e>
 8007cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cdc:	e00a      	b.n	8007cf4 <CO_CANopenInitPDO+0x1a4>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007cde:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	837b      	strh	r3, [r7, #26]
 8007cea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	ddb6      	ble.n	8007c60 <CO_CANopenInitPDO+0x110>
        }
    }
#endif

    return CO_ERROR_NO;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3734      	adds	r7, #52	; 0x34
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfc:	20000440 	.word	0x20000440

08007d00 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8007d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d02:	b097      	sub	sp, #92	; 0x5c
 8007d04:	af08      	add	r7, sp, #32
 8007d06:	61f8      	str	r0, [r7, #28]
 8007d08:	61b9      	str	r1, [r7, #24]
 8007d0a:	617a      	str	r2, [r7, #20]
 8007d0c:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff fbaa 	bl	8007472 <CO_NMT_getInternalState>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007d24:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8007d28:	2b7f      	cmp	r3, #127	; 0x7f
 8007d2a:	d003      	beq.n	8007d34 <CO_process+0x34>
 8007d2c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8007d30:	2b05      	cmp	r3, #5
 8007d32:	d101      	bne.n	8007d38 <CO_process+0x38>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <CO_process+0x3a>
 8007d38:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 fe46 	bl	80089d2 <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff f93e 	bl	8006fcc <CO_LSSslave_process>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8007d56:	2301      	movs	r3, #1
 8007d58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	8a5b      	ldrh	r3, [r3, #18]
 8007d68:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff fb8f 	bl	8007496 <CO_LSSslave_getState>
 8007d78:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <CO_process+0x92>
 8007d8c:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 8007d90:	e000      	b.n	8007d94 <CO_process+0x94>
 8007d92:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8007d94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007d96:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bf14      	ite	ne
 8007d9e:	2301      	movne	r3, #1
 8007da0:	2300      	moveq	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8007da6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007da8:	f240 3303 	movw	r3, #771	; 0x303
 8007dac:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bf14      	ite	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	2300      	moveq	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	60bb      	str	r3, [r7, #8]
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d107      	bne.n	8007dd0 <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	2118      	movs	r1, #24
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff fb16 	bl	80073f8 <CO_isError>
 8007dcc:	4605      	mov	r5, r0
 8007dce:	e000      	b.n	8007dd2 <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 8007dd0:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d113      	bne.n	8007e00 <CO_process+0x100>
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	211b      	movs	r1, #27
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fb0a 	bl	80073f8 <CO_isError>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d108      	bne.n	8007dfc <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	211c      	movs	r1, #28
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff fb01 	bl	80073f8 <CO_isError>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <CO_process+0x102>
 8007e00:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 8007e02:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff fb1c 	bl	8007446 <CO_getErrorRegister>
 8007e0e:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bf14      	ite	ne
 8007e14:	2301      	movne	r3, #1
 8007e16:	2300      	moveq	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	2300      	movs	r3, #0
 8007e22:	9306      	str	r3, [sp, #24]
 8007e24:	9205      	str	r2, [sp, #20]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	9503      	str	r5, [sp, #12]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	6979      	ldr	r1, [r7, #20]
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f7fe fd50 	bl	80068e4 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <CO_process+0x152>
        return reset;
 8007e4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e50:	e048      	b.n	8007ee4 <CO_process+0x1e4>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	69d8      	ldr	r0, [r3, #28]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e5c:	f7f9 f996 	bl	800118c <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	6918      	ldr	r0, [r3, #16]
 8007e64:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	f7f9 fffc 	bl	8001e68 <CO_NMT_process>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007e76:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8007e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e7c:	d003      	beq.n	8007e86 <CO_process+0x186>
 8007e7e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	d101      	bne.n	8007e8a <CO_process+0x18a>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <CO_process+0x18c>
 8007e8a:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007e8c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007e94:	e012      	b.n	8007ebc <CO_process+0x1bc>
        CO_SDOserver_process(&co->SDOserver[i],
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e9a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	015b      	lsls	r3, r3, #5
 8007ea2:	4413      	add	r3, r2
 8007ea4:	015b      	lsls	r3, r3, #5
 8007ea6:	18c8      	adds	r0, r1, r3
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eae:	f7fc fd4f 	bl	8004950 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8007eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0e8      	beq.n	8007e96 <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	6958      	ldr	r0, [r3, #20]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ece:	f7f9 fd55 	bl	800197c <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe fc44 	bl	8006768 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 8007ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	373c      	adds	r7, #60	; 0x3c
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007eec <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d12d      	bne.n	8007f60 <CO_process_SYNC+0x74>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff fab2 	bl	8007472 <CO_NMT_getInternalState>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 8007f12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f16:	2b7f      	cmp	r3, #127	; 0x7f
 8007f18:	d003      	beq.n	8007f22 <CO_process_SYNC+0x36>
 8007f1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	d101      	bne.n	8007f26 <CO_process_SYNC+0x3a>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e000      	b.n	8007f28 <CO_process_SYNC+0x3c>
 8007f26:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007f28:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	6979      	ldr	r1, [r7, #20]
 8007f34:	f7fe f9f8 	bl	8006328 <CO_SYNC_process>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8007f3c:	7cfb      	ldrb	r3, [r7, #19]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d008      	beq.n	8007f54 <CO_process_SYNC+0x68>
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	dc0f      	bgt.n	8007f66 <CO_process_SYNC+0x7a>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00c      	beq.n	8007f64 <CO_process_SYNC+0x78>
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d10b      	bne.n	8007f66 <CO_process_SYNC+0x7a>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61fb      	str	r3, [r7, #28]
                break;
 8007f52:	e008      	b.n	8007f66 <CO_process_SYNC+0x7a>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fcd4 	bl	8008906 <CO_CANclearPendingSyncPDOs>
                break;
 8007f5e:	e002      	b.n	8007f66 <CO_process_SYNC+0x7a>
        }
    }
 8007f60:	bf00      	nop
 8007f62:	e000      	b.n	8007f66 <CO_process_SYNC+0x7a>
                break;
 8007f64:	bf00      	nop

    return syncWas;
 8007f66:	69fb      	ldr	r3, [r7, #28]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d129      	bne.n	8007fda <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff fa71 	bl	8007472 <CO_NMT_getInternalState>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	bf0c      	ite	eq
 8007f96:	2301      	moveq	r3, #1
 8007f98:	2300      	movne	r3, #0
 8007f9a:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8007f9c:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	82fb      	strh	r3, [r7, #22]
 8007fa2:	e015      	b.n	8007fd0 <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fa8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007fac:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	18d0      	adds	r0, r2, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	f7fb f920 	bl	8003204 <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007fc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3301      	adds	r3, #1
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	82fb      	strh	r3, [r7, #22]
 8007fd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	dde5      	ble.n	8007fa4 <CO_process_RPDO+0x34>
 8007fd8:	e000      	b.n	8007fdc <CO_process_RPDO+0x6c>
        return;
 8007fda:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b088      	sub	sp, #32
 8007fe6:	af02      	add	r7, sp, #8
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d129      	bne.n	800804c <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff fa38 	bl	8007472 <CO_NMT_getInternalState>
 8008002:	4603      	mov	r3, r0
 8008004:	2b05      	cmp	r3, #5
 8008006:	bf0c      	ite	eq
 8008008:	2301      	moveq	r3, #1
 800800a:	2300      	movne	r3, #0
 800800c:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 800800e:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8008010:	2300      	movs	r3, #0
 8008012:	82fb      	strh	r3, [r7, #22]
 8008014:	e015      	b.n	8008042 <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800801a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800801e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	18d0      	adds	r0, r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	f7fb fd8b 	bl	8003b4c <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8008036:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800803a:	b29b      	uxth	r3, r3
 800803c:	3301      	adds	r3, #1
 800803e:	b29b      	uxth	r3, r3
 8008040:	82fb      	strh	r3, [r7, #22]
 8008042:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008046:	2b03      	cmp	r3, #3
 8008048:	dde5      	ble.n	8008016 <CO_process_TPDO+0x34>
 800804a:	e000      	b.n	800804e <CO_process_TPDO+0x6c>
        return;
 800804c:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 800805c:	4a13      	ldr	r2, [pc, #76]	; (80080ac <canopen_app_init+0x58>)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8008066:	f107 0308 	add.w	r3, r7, #8
 800806a:	4619      	mov	r1, r3
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fa23 	bl	80074b8 <CO_new>
 8008072:	4603      	mov	r3, r0
 8008074:	4a0e      	ldr	r2, [pc, #56]	; (80080b0 <canopen_app_init+0x5c>)
 8008076:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8008078:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <canopen_app_init+0x5c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8008080:	480c      	ldr	r0, [pc, #48]	; (80080b4 <canopen_app_init+0x60>)
 8008082:	f006 fe57 	bl	800ed34 <puts>
        return 1;
 8008086:	2301      	movs	r3, #1
 8008088:	e00c      	b.n	80080a4 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4619      	mov	r1, r3
 800808e:	480a      	ldr	r0, [pc, #40]	; (80080b8 <canopen_app_init+0x64>)
 8008090:	f006 fdca 	bl	800ec28 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <canopen_app_init+0x58>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a05      	ldr	r2, [pc, #20]	; (80080b0 <canopen_app_init+0x5c>)
 800809a:	6812      	ldr	r2, [r2, #0]
 800809c:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 800809e:	f000 f80d 	bl	80080bc <canopen_app_resetCommunication>
    return 0;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	200004d4 	.word	0x200004d4
 80080b0:	200004d8 	.word	0x200004d8
 80080b4:	08010880 	.word	0x08010880
 80080b8:	080108a0 	.word	0x080108a0

080080bc <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 80080bc:	b590      	push	{r4, r7, lr}
 80080be:	b08f      	sub	sp, #60	; 0x3c
 80080c0:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 80080c2:	487d      	ldr	r0, [pc, #500]	; (80082b8 <canopen_app_resetCommunication+0x1fc>)
 80080c4:	f006 fe36 	bl	800ed34 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 80080c8:	4b7c      	ldr	r3, [pc, #496]	; (80082bc <canopen_app_resetCommunication+0x200>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80080d2:	4b7b      	ldr	r3, [pc, #492]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f9f4 	bl	80084c4 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 80080dc:	4b77      	ldr	r3, [pc, #476]	; (80082bc <canopen_app_resetCommunication+0x200>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fade 	bl	80086a4 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 80080e8:	4b74      	ldr	r3, [pc, #464]	; (80082bc <canopen_app_resetCommunication+0x200>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a74      	ldr	r2, [pc, #464]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 80080ee:	6811      	ldr	r1, [r2, #0]
 80080f0:	2200      	movs	r2, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff fb89 	bl	800780a <CO_CANinit>
 80080f8:	4603      	mov	r3, r0
 80080fa:	461a      	mov	r2, r3
 80080fc:	4b71      	ldr	r3, [pc, #452]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 80080fe:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8008100:	4b70      	ldr	r3, [pc, #448]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 8008102:	f993 3000 	ldrsb.w	r3, [r3]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 800810a:	4b6e      	ldr	r3, [pc, #440]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 800810c:	f993 3000 	ldrsb.w	r3, [r3]
 8008110:	4619      	mov	r1, r3
 8008112:	486d      	ldr	r0, [pc, #436]	; (80082c8 <canopen_app_resetCommunication+0x20c>)
 8008114:	f006 fd88 	bl	800ec28 <iprintf>
        return 1;
 8008118:	2301      	movs	r3, #1
 800811a:	e0c8      	b.n	80082ae <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800811c:	4b6b      	ldr	r3, [pc, #428]	; (80082cc <canopen_app_resetCommunication+0x210>)
 800811e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008120:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8008122:	4b6a      	ldr	r3, [pc, #424]	; (80082cc <canopen_app_resetCommunication+0x210>)
 8008124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8008126:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8008128:	4b68      	ldr	r3, [pc, #416]	; (80082cc <canopen_app_resetCommunication+0x210>)
 800812a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800812c:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 800812e:	4b67      	ldr	r3, [pc, #412]	; (80082cc <canopen_app_resetCommunication+0x210>)
 8008130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8008132:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8008134:	4b61      	ldr	r3, [pc, #388]	; (80082bc <canopen_app_resetCommunication+0x200>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	4b61      	ldr	r3, [pc, #388]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	4b60      	ldr	r3, [pc, #384]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3302      	adds	r3, #2
 8008144:	f107 0108 	add.w	r1, r7, #8
 8008148:	f7ff fb8b 	bl	8007862 <CO_LSSinit>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	4b5c      	ldr	r3, [pc, #368]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 8008152:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8008154:	4b5b      	ldr	r3, [pc, #364]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 8008156:	f993 3000 	ldrsb.w	r3, [r3]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 800815e:	4b59      	ldr	r3, [pc, #356]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 8008160:	f993 3000 	ldrsb.w	r3, [r3]
 8008164:	4619      	mov	r1, r3
 8008166:	485a      	ldr	r0, [pc, #360]	; (80082d0 <canopen_app_resetCommunication+0x214>)
 8008168:	f006 fd5e 	bl	800ec28 <iprintf>
        return 2;
 800816c:	2302      	movs	r3, #2
 800816e:	e09e      	b.n	80082ae <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8008170:	4b53      	ldr	r3, [pc, #332]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	4b52      	ldr	r3, [pc, #328]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8008180:	4b4e      	ldr	r3, [pc, #312]	; (80082bc <canopen_app_resetCommunication+0x200>)
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	4b53      	ldr	r3, [pc, #332]	; (80082d4 <canopen_app_resetCommunication+0x218>)
 8008186:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8008188:	4b4d      	ldr	r3, [pc, #308]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 800818a:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	1d3a      	adds	r2, r7, #4
 8008190:	9207      	str	r2, [sp, #28]
 8008192:	9306      	str	r3, [sp, #24]
 8008194:	2300      	movs	r3, #0
 8008196:	9305      	str	r3, [sp, #20]
 8008198:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081a2:	9303      	str	r3, [sp, #12]
 80081a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80081a8:	9302      	str	r3, [sp, #8]
 80081aa:	f242 1311 	movw	r3, #8465	; 0x2111
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	2300      	movs	r3, #0
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	460b      	mov	r3, r1
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	f7ff fb7f 	bl	80078bc <CO_CANopenInit>
 80081be:	4603      	mov	r3, r0
 80081c0:	461a      	mov	r2, r3
 80081c2:	4b40      	ldr	r3, [pc, #256]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 80081c4:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 80081c6:	4b3f      	ldr	r3, [pc, #252]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 80081c8:	f993 3000 	ldrsb.w	r3, [r3]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01a      	beq.n	8008206 <canopen_app_resetCommunication+0x14a>
 80081d0:	4b3c      	ldr	r3, [pc, #240]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 80081d2:	f993 3000 	ldrsb.w	r3, [r3]
 80081d6:	f113 0f13 	cmn.w	r3, #19
 80081da:	d014      	beq.n	8008206 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80081dc:	4b39      	ldr	r3, [pc, #228]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 80081de:	f993 3000 	ldrsb.w	r3, [r3]
 80081e2:	f113 0f0c 	cmn.w	r3, #12
 80081e6:	d105      	bne.n	80081f4 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4619      	mov	r1, r3
 80081ec:	483a      	ldr	r0, [pc, #232]	; (80082d8 <canopen_app_resetCommunication+0x21c>)
 80081ee:	f006 fd1b 	bl	800ec28 <iprintf>
 80081f2:	e006      	b.n	8008202 <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 80081f4:	4b33      	ldr	r3, [pc, #204]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 80081f6:	f993 3000 	ldrsb.w	r3, [r3]
 80081fa:	4619      	mov	r1, r3
 80081fc:	4837      	ldr	r0, [pc, #220]	; (80082dc <canopen_app_resetCommunication+0x220>)
 80081fe:	f006 fd13 	bl	800ec28 <iprintf>
        }
        return 3;
 8008202:	2303      	movs	r3, #3
 8008204:	e053      	b.n	80082ae <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8008206:	4b2d      	ldr	r3, [pc, #180]	; (80082bc <canopen_app_resetCommunication+0x200>)
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	4b2c      	ldr	r3, [pc, #176]	; (80082bc <canopen_app_resetCommunication+0x200>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69d9      	ldr	r1, [r3, #28]
 8008210:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <canopen_app_resetCommunication+0x218>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	4b2a      	ldr	r3, [pc, #168]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	785c      	ldrb	r4, [r3, #1]
 800821a:	1d3b      	adds	r3, r7, #4
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	4623      	mov	r3, r4
 8008220:	f7ff fc96 	bl	8007b50 <CO_CANopenInitPDO>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	4b26      	ldr	r3, [pc, #152]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 800822a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 800822c:	4b25      	ldr	r3, [pc, #148]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 800822e:	f993 3000 	ldrsb.w	r3, [r3]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d014      	beq.n	8008260 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8008236:	4b23      	ldr	r3, [pc, #140]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 8008238:	f993 3000 	ldrsb.w	r3, [r3]
 800823c:	f113 0f0c 	cmn.w	r3, #12
 8008240:	d105      	bne.n	800824e <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4619      	mov	r1, r3
 8008246:	4824      	ldr	r0, [pc, #144]	; (80082d8 <canopen_app_resetCommunication+0x21c>)
 8008248:	f006 fcee 	bl	800ec28 <iprintf>
 800824c:	e006      	b.n	800825c <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 800824e:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <canopen_app_resetCommunication+0x208>)
 8008250:	f993 3000 	ldrsb.w	r3, [r3]
 8008254:	4619      	mov	r1, r3
 8008256:	4822      	ldr	r0, [pc, #136]	; (80082e0 <canopen_app_resetCommunication+0x224>)
 8008258:	f006 fce6 	bl	800ec28 <iprintf>
        }
        return 4;
 800825c:	2304      	movs	r3, #4
 800825e:	e026      	b.n	80082ae <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8008260:	4b17      	ldr	r3, [pc, #92]	; (80082c0 <canopen_app_resetCommunication+0x204>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	4618      	mov	r0, r3
 8008268:	f003 f8f4 	bl	800b454 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 800826c:	4b13      	ldr	r3, [pc, #76]	; (80082bc <canopen_app_resetCommunication+0x200>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8008276:	481b      	ldr	r0, [pc, #108]	; (80082e4 <canopen_app_resetCommunication+0x228>)
 8008278:	f006 fd5c 	bl	800ed34 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <canopen_app_resetCommunication+0x200>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 f92e 	bl	80084e4 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8008288:	4817      	ldr	r0, [pc, #92]	; (80082e8 <canopen_app_resetCommunication+0x22c>)
 800828a:	f006 fd53 	bl	800ed34 <puts>
    fflush(stdout);
 800828e:	4b17      	ldr	r3, [pc, #92]	; (80082ec <canopen_app_resetCommunication+0x230>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	4618      	mov	r0, r3
 8008296:	f006 fa69 	bl	800e76c <fflush>
    time_old = time_current = HAL_GetTick();
 800829a:	f001 fa5d 	bl	8009758 <HAL_GetTick>
 800829e:	4603      	mov	r3, r0
 80082a0:	4a13      	ldr	r2, [pc, #76]	; (80082f0 <canopen_app_resetCommunication+0x234>)
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <canopen_app_resetCommunication+0x234>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a12      	ldr	r2, [pc, #72]	; (80082f4 <canopen_app_resetCommunication+0x238>)
 80082aa:	6013      	str	r3, [r2, #0]
    return 0;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd90      	pop	{r4, r7, pc}
 80082b6:	bf00      	nop
 80082b8:	080108c8 	.word	0x080108c8
 80082bc:	200004d8 	.word	0x200004d8
 80082c0:	200004d4 	.word	0x200004d4
 80082c4:	200004e4 	.word	0x200004e4
 80082c8:	080108f0 	.word	0x080108f0
 80082cc:	20000000 	.word	0x20000000
 80082d0:	08010918 	.word	0x08010918
 80082d4:	20000440 	.word	0x20000440
 80082d8:	08010944 	.word	0x08010944
 80082dc:	0801096c 	.word	0x0801096c
 80082e0:	08010998 	.word	0x08010998
 80082e4:	080109c0 	.word	0x080109c0
 80082e8:	080109e8 	.word	0x080109e8
 80082ec:	20000454 	.word	0x20000454
 80082f0:	200004e0 	.word	0x200004e0
 80082f4:	200004dc 	.word	0x200004dc

080082f8 <canopen_app_process>:

void
canopen_app_process() {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 80082fe:	f001 fa2b 	bl	8009758 <HAL_GetTick>
 8008302:	4603      	mov	r3, r0
 8008304:	4a2c      	ldr	r2, [pc, #176]	; (80083b8 <canopen_app_process+0xc0>)
 8008306:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8008308:	4b2b      	ldr	r3, [pc, #172]	; (80083b8 <canopen_app_process+0xc0>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <canopen_app_process+0xc4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d04c      	beq.n	80083ae <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8008314:	4b28      	ldr	r3, [pc, #160]	; (80083b8 <canopen_app_process+0xc0>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	4b28      	ldr	r3, [pc, #160]	; (80083bc <canopen_app_process+0xc4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8008328:	4b23      	ldr	r3, [pc, #140]	; (80083b8 <canopen_app_process+0xc0>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a23      	ldr	r2, [pc, #140]	; (80083bc <canopen_app_process+0xc4>)
 800832e:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8008330:	4b23      	ldr	r3, [pc, #140]	; (80083c0 <canopen_app_process+0xc8>)
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	2100      	movs	r1, #0
 800833a:	f7ff fce1 	bl	8007d00 <CO_process>
 800833e:	4603      	mov	r3, r0
 8008340:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8008342:	4b1f      	ldr	r3, [pc, #124]	; (80083c0 <canopen_app_process+0xc8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	7a5a      	ldrb	r2, [r3, #9]
 800834a:	4b1e      	ldr	r3, [pc, #120]	; (80083c4 <canopen_app_process+0xcc>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	09d2      	lsrs	r2, r2, #7
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8008354:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <canopen_app_process+0xc8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	7a9a      	ldrb	r2, [r3, #10]
 800835c:	4b19      	ldr	r3, [pc, #100]	; (80083c4 <canopen_app_process+0xcc>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	09d2      	lsrs	r2, r2, #7
 8008362:	b2d2      	uxtb	r2, r2
 8008364:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d118      	bne.n	800839e <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 800836c:	4b15      	ldr	r3, [pc, #84]	; (80083c4 <canopen_app_process+0xcc>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	4618      	mov	r0, r3
 8008374:	f003 f8de 	bl	800b534 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8008378:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <canopen_app_process+0xcc>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4618      	mov	r0, r3
 800837e:	f000 f8a1 	bl	80084c4 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8008382:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <canopen_app_process+0xc8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff f9e0 	bl	800774c <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 800838c:	480e      	ldr	r0, [pc, #56]	; (80083c8 <canopen_app_process+0xd0>)
 800838e:	f006 fcd1 	bl	800ed34 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8008392:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <canopen_app_process+0xcc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff fe5c 	bl	8008054 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 800839c:	e007      	b.n	80083ae <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d104      	bne.n	80083ae <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 80083a4:	4809      	ldr	r0, [pc, #36]	; (80083cc <canopen_app_process+0xd4>)
 80083a6:	f006 fcc5 	bl	800ed34 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 80083aa:	f002 f992 	bl	800a6d2 <HAL_NVIC_SystemReset>
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200004e0 	.word	0x200004e0
 80083bc:	200004dc 	.word	0x200004dc
 80083c0:	200004d8 	.word	0x200004d8
 80083c4:	200004d4 	.word	0x200004d4
 80083c8:	08010a04 	.word	0x08010a04
 80083cc:	08010a2c 	.word	0x08010a2c

080083d0 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 80083d6:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <canopen_app_interrupt+0x80>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083dc:	f3ef 8210 	mrs	r2, PRIMASK
 80083e0:	607a      	str	r2, [r7, #4]
  return(result);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80083e6:	b672      	cpsid	i
}
 80083e8:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 80083ea:	4b19      	ldr	r3, [pc, #100]	; (8008450 <canopen_app_interrupt+0x80>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d120      	bne.n	8008436 <canopen_app_interrupt+0x66>
 80083f4:	4b16      	ldr	r3, [pc, #88]	; (8008450 <canopen_app_interrupt+0x80>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01a      	beq.n	8008436 <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8008404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008408:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 800840a:	4b11      	ldr	r3, [pc, #68]	; (8008450 <canopen_app_interrupt+0x80>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2200      	movs	r2, #0
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff fd6a 	bl	8007eec <CO_process_SYNC>
 8008418:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 800841a:	4b0d      	ldr	r3, [pc, #52]	; (8008450 <canopen_app_interrupt+0x80>)
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	2300      	movs	r3, #0
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	68f9      	ldr	r1, [r7, #12]
 8008424:	f7ff fda4 	bl	8007f70 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8008428:	4b09      	ldr	r3, [pc, #36]	; (8008450 <canopen_app_interrupt+0x80>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	2300      	movs	r3, #0
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	68f9      	ldr	r1, [r7, #12]
 8008432:	f7ff fdd6 	bl	8007fe2 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8008436:	4b06      	ldr	r3, [pc, #24]	; (8008450 <canopen_app_interrupt+0x80>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	f383 8810 	msr	PRIMASK, r3
}
 8008446:	bf00      	nop
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	200004d8 	.word	0x200004d8

08008454 <OD_writeDomain>:
 */

#include "CO_domain_STM32.h"

ODR_t OD_writeDomain(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten) { // countWritten - total size
 8008454:	b480      	push	{r7}
 8008456:	b089      	sub	sp, #36	; 0x24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]

  static OD_size_t written = 0;
  OD_size_t total_size_ind = *countWritten;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	61bb      	str	r3, [r7, #24]

  if (count > 0) {
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d010      	beq.n	8008490 <OD_writeDomain+0x3c>

    uint8_t data = 0x0;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < count; i++) {
 8008472:	2300      	movs	r3, #0
 8008474:	61fb      	str	r3, [r7, #28]
 8008476:	e007      	b.n	8008488 <OD_writeDomain+0x34>
      data = ((uint8_t*) buf)[i];
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	4413      	add	r3, r2
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < count; i++) {
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	3301      	adds	r3, #1
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	429a      	cmp	r2, r3
 800848e:	d8f3      	bhi.n	8008478 <OD_writeDomain+0x24>
    }

  }

  written += count;
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <OD_writeDomain+0x6c>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4413      	add	r3, r2
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <OD_writeDomain+0x6c>)
 800849a:	6013      	str	r3, [r2, #0]
  if (written < total_size_ind) {
 800849c:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <OD_writeDomain+0x6c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d902      	bls.n	80084ac <OD_writeDomain+0x58>
    return ODR_PARTIAL;
 80084a6:	f04f 33ff 	mov.w	r3, #4294967295
 80084aa:	e003      	b.n	80084b4 <OD_writeDomain+0x60>
  } else {
    written = 0;
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <OD_writeDomain+0x6c>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80084b2:	2300      	movs	r3, #0
  }

}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3724      	adds	r7, #36	; 0x24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	200004e8 	.word	0x200004e8

080084c4 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fb6a 	bl	8009bb0 <HAL_CAN_Stop>
#endif
    }
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fb14 	bl	8009b28 <HAL_CAN_Start>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	615a      	str	r2, [r3, #20]
        }
    }
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8008514:	b580      	push	{r7, lr}
 8008516:	b090      	sub	sp, #64	; 0x40
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <CO_CANmodule_init+0x20>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <CO_CANmodule_init+0x20>
 800852e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8008534:	f04f 33ff 	mov.w	r3, #4294967295
 8008538:	e0ab      	b.n	8008692 <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8008540:	4a56      	ldr	r2, [pc, #344]	; (800869c <CO_CANmodule_init+0x188>)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	887a      	ldrh	r2, [r7, #2]
 8008550:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008556:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800855e:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 800858a:	2300      	movs	r3, #0
 800858c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800858e:	e02b      	b.n	80085e8 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8008590:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008592:	4613      	mov	r3, r2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	461a      	mov	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4413      	add	r3, r2
 80085a0:	2200      	movs	r2, #0
 80085a2:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80085a4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80085a6:	4613      	mov	r3, r2
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	461a      	mov	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4413      	add	r3, r2
 80085b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085b8:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 80085ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80085bc:	4613      	mov	r3, r2
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	461a      	mov	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	2200      	movs	r2, #0
 80085cc:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 80085ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80085d0:	4613      	mov	r3, r2
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	461a      	mov	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	2200      	movs	r2, #0
 80085e0:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 80085e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80085e4:	3301      	adds	r3, #1
 80085e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80085e8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80085ea:	887b      	ldrh	r3, [r7, #2]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d3cf      	bcc.n	8008590 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 80085f0:	2300      	movs	r3, #0
 80085f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80085f4:	e00c      	b.n	8008610 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 80085f6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80085f8:	4613      	mov	r3, r2
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	4413      	add	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	461a      	mov	r2, r3
 8008602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008604:	4413      	add	r3, r2
 8008606:	2200      	movs	r2, #0
 8008608:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 800860a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800860c:	3301      	adds	r3, #1
 800860e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008610:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008612:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008616:	429a      	cmp	r2, r3
 8008618:	d3ed      	bcc.n	80085f6 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a1d      	ldr	r2, [pc, #116]	; (80086a0 <CO_CANmodule_init+0x18c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d102      	bne.n	8008634 <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 800862e:	2300      	movs	r3, #0
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28
 8008632:	e001      	b.n	8008638 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 8008634:	230e      	movs	r3, #14
 8008636:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8008638:	2300      	movs	r3, #0
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800863c:	2301      	movs	r3, #1
 800863e:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 8008644:	2300      	movs	r3, #0
 8008646:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8008648:	2300      	movs	r3, #0
 800864a:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 800864c:	2300      	movs	r3, #0
 800864e:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8008650:	2300      	movs	r3, #0
 8008652:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 8008654:	2301      	movs	r3, #1
 8008656:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8008658:	230e      	movs	r3, #14
 800865a:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f107 0214 	add.w	r2, r7, #20
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f001 f97e 	bl	8009968 <HAL_CAN_ConfigFilter>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8008672:	f04f 33ff 	mov.w	r3, #4294967295
 8008676:	e00c      	b.n	8008692 <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2113      	movs	r1, #19
 800867e:	4618      	mov	r0, r3
 8008680:	f001 fd01 	bl	800a086 <HAL_CAN_ActivateNotification>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800868a:	f04f 33ff 	mov.w	r3, #4294967295
 800868e:	e000      	b.n	8008692 <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3740      	adds	r7, #64	; 0x40
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	200004ec 	.word	0x200004ec
 80086a0:	40006400 	.word	0x40006400

080086a4 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <CO_CANmodule_disable+0x22>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f001 fa75 	bl	8009bb0 <HAL_CAN_Stop>
#endif
    }
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	4608      	mov	r0, r1
 80086da:	4611      	mov	r1, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	4603      	mov	r3, r0
 80086e0:	817b      	strh	r3, [r7, #10]
 80086e2:	460b      	mov	r3, r1
 80086e4:	813b      	strh	r3, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80086ea:	2300      	movs	r3, #0
 80086ec:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d03c      	beq.n	800876e <CO_CANrxBufferInit+0x9e>
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d039      	beq.n	800876e <CO_CANrxBufferInit+0x9e>
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d036      	beq.n	800876e <CO_CANrxBufferInit+0x9e>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	891b      	ldrh	r3, [r3, #8]
 8008704:	897a      	ldrh	r2, [r7, #10]
 8008706:	429a      	cmp	r2, r3
 8008708:	d231      	bcs.n	800876e <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6859      	ldr	r1, [r3, #4]
 800870e:	897a      	ldrh	r2, [r7, #10]
 8008710:	4613      	mov	r3, r2
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008720:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008726:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8008728:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800872c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008730:	b21b      	sxth	r3, r3
 8008732:	6a3a      	ldr	r2, [r7, #32]
 8008734:	2a00      	cmp	r2, #0
 8008736:	d001      	beq.n	800873c <CO_CANrxBufferInit+0x6c>
 8008738:	4a13      	ldr	r2, [pc, #76]	; (8008788 <CO_CANrxBufferInit+0xb8>)
 800873a:	e000      	b.n	800873e <CO_CANrxBufferInit+0x6e>
 800873c:	2200      	movs	r2, #0
 800873e:	4313      	orrs	r3, r2
 8008740:	b21b      	sxth	r3, r3
 8008742:	b29a      	uxth	r2, r3
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8008748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800874c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008750:	b21b      	sxth	r3, r3
 8008752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800875a:	b21b      	sxth	r3, r3
 800875c:	b29a      	uxth	r2, r3
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d004      	beq.n	8008774 <CO_CANrxBufferInit+0xa4>
            __NOP();
 800876a:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 800876c:	e002      	b.n	8008774 <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800876e:	23ff      	movs	r3, #255	; 0xff
 8008770:	75fb      	strb	r3, [r7, #23]
 8008772:	e000      	b.n	8008776 <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8008774:	bf00      	nop
    }

    return ret;
 8008776:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800877a:	4618      	mov	r0, r3
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	ffff8000 	.word	0xffff8000

0800878c <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	817b      	strh	r3, [r7, #10]
 800879a:	4613      	mov	r3, r2
 800879c:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d024      	beq.n	80087f2 <CO_CANtxBufferInit+0x66>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8a1b      	ldrh	r3, [r3, #16]
 80087ac:	897a      	ldrh	r2, [r7, #10]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d21f      	bcs.n	80087f2 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68d9      	ldr	r1, [r3, #12]
 80087b6:	897a      	ldrh	r2, [r7, #10]
 80087b8:	4613      	mov	r3, r2
 80087ba:	005b      	lsls	r3, r3, #1
 80087bc:	4413      	add	r3, r2
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	440b      	add	r3, r1
 80087c2:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 80087c4:	893b      	ldrh	r3, [r7, #8]
 80087c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	d002      	beq.n	80087d6 <CO_CANtxBufferInit+0x4a>
 80087d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80087d4:	e000      	b.n	80087d8 <CO_CANtxBufferInit+0x4c>
 80087d6:	2200      	movs	r2, #0
 80087d8:	431a      	orrs	r2, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80087e4:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2200      	movs	r2, #0
 80087ea:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 80087f2:	697b      	ldr	r3, [r7, #20]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	371c      	adds	r7, #28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	f001 faef 	bl	8009df8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d028      	beq.n	8008872 <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 8008820:	4b16      	ldr	r3, [pc, #88]	; (800887c <prv_send_can_message+0x7c>)
 8008822:	2200      	movs	r2, #0
 8008824:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 8008826:	4b15      	ldr	r3, [pc, #84]	; (800887c <prv_send_can_message+0x7c>)
 8008828:	2200      	movs	r2, #0
 800882a:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	791b      	ldrb	r3, [r3, #4]
 8008830:	461a      	mov	r2, r3
 8008832:	4b12      	ldr	r3, [pc, #72]	; (800887c <prv_send_can_message+0x7c>)
 8008834:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800883e:	4a0f      	ldr	r2, [pc, #60]	; (800887c <prv_send_can_message+0x7c>)
 8008840:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	0b9b      	lsrs	r3, r3, #14
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	4a0b      	ldr	r2, [pc, #44]	; (800887c <prv_send_can_message+0x7c>)
 800884e:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6898      	ldr	r0, [r3, #8]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	1d5a      	adds	r2, r3, #5
 800885a:	f107 0308 	add.w	r3, r7, #8
 800885e:	4907      	ldr	r1, [pc, #28]	; (800887c <prv_send_can_message+0x7c>)
 8008860:	f001 f9ef 	bl	8009c42 <HAL_CAN_AddTxMessage>
 8008864:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8008866:	2b00      	cmp	r3, #0
 8008868:	bf0c      	ite	eq
 800886a:	2301      	moveq	r3, #1
 800886c:	2300      	movne	r3, #0
 800886e:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8008870:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	200004f0 	.word	0x200004f0

08008880 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00c      	beq.n	80088b0 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	8a5b      	ldrh	r3, [r3, #18]
 80088a2:	f043 0308 	orr.w	r3, r3, #8
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 80088ac:	23f7      	movs	r3, #247	; 0xf7
 80088ae:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b0:	f3ef 8310 	mrs	r3, PRIMASK
 80088b4:	613b      	str	r3, [r7, #16]
  return(result);
 80088b6:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80088bc:	b672      	cpsid	i
}
 80088be:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7ff ff9c 	bl	8008800 <prv_send_can_message>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	695a      	ldr	r2, [r3, #20]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	61da      	str	r2, [r3, #28]
 80088d6:	e009      	b.n	80088ec <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2201      	movs	r2, #1
 80088dc:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3301      	adds	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f383 8810 	msr	PRIMASK, r3
}
 80088f8:	bf00      	nop

    return err;
 80088fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 8008906:	b480      	push	{r7}
 8008908:	b087      	sub	sp, #28
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008912:	f3ef 8310 	mrs	r3, PRIMASK
 8008916:	60fb      	str	r3, [r7, #12]
  return(result);
 8008918:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800891e:	b672      	cpsid	i
}
 8008920:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d004      	beq.n	8008934 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8008930:	2301      	movs	r3, #1
 8008932:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d032      	beq.n	80089a4 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	8a1b      	ldrh	r3, [r3, #16]
 8008942:	827b      	strh	r3, [r7, #18]
 8008944:	e02b      	b.n	800899e <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68d9      	ldr	r1, [r3, #12]
 800894a:	8a7a      	ldrh	r2, [r7, #18]
 800894c:	4613      	mov	r3, r2
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	4413      	add	r3, r2
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	440b      	add	r3, r1
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01d      	beq.n	8008998 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68d9      	ldr	r1, [r3, #12]
 8008960:	8a7a      	ldrh	r2, [r7, #18]
 8008962:	4613      	mov	r3, r2
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	4413      	add	r3, r2
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	440b      	add	r3, r1
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d012      	beq.n	8008998 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68d9      	ldr	r1, [r3, #12]
 8008976:	8a7a      	ldrh	r2, [r7, #18]
 8008978:	4613      	mov	r3, r2
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	4413      	add	r3, r2
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	440b      	add	r3, r1
 8008982:	2200      	movs	r2, #0
 8008984:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 8008994:	2302      	movs	r3, #2
 8008996:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8008998:	8a7b      	ldrh	r3, [r7, #18]
 800899a:	3b01      	subs	r3, #1
 800899c:	827b      	strh	r3, [r7, #18]
 800899e:	8a7b      	ldrh	r3, [r7, #18]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1d0      	bne.n	8008946 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f383 8810 	msr	PRIMASK, r3
}
 80089b0:	bf00      	nop
    if (tpdoDeleted) {
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d006      	beq.n	80089c6 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	8a5b      	ldrh	r3, [r3, #18]
 80089bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	825a      	strh	r2, [r3, #18]
    }
}
 80089c6:	bf00      	nop
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d02e      	beq.n	8008a56 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	8a5b      	ldrh	r3, [r3, #18]
 80089fc:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f003 0304 	and.w	r3, r3, #4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d004      	beq.n	8008a18 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 8008a0e:	89fb      	ldrh	r3, [r7, #14]
 8008a10:	f043 0304 	orr.w	r3, r3, #4
 8008a14:	81fb      	strh	r3, [r7, #14]
 8008a16:	e01b      	b.n	8008a50 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8008a18:	89fb      	ldrh	r3, [r7, #14]
 8008a1a:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8008a1e:	f023 0303 	bic.w	r3, r3, #3
 8008a22:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 8008a2e:	89fb      	ldrh	r3, [r7, #14]
 8008a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8008a44:	89fb      	ldrh	r3, [r7, #14]
 8008a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a4a:	f043 0302 	orr.w	r3, r3, #2
 8008a4e:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	89fa      	ldrh	r2, [r7, #14]
 8008a54:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	; 0x30
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8008a70:	2300      	movs	r3, #0
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8008a7a:	f107 0314 	add.w	r3, r7, #20
 8008a7e:	3305      	adds	r3, #5
 8008a80:	4a2c      	ldr	r2, [pc, #176]	; (8008b34 <prv_read_can_received_msg+0xd0>)
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f001 f9ec 	bl	8009e62 <HAL_CAN_GetRxMessage>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d14c      	bne.n	8008b2a <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8008a90:	4b28      	ldr	r3, [pc, #160]	; (8008b34 <prv_read_can_received_msg+0xd0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a27      	ldr	r2, [pc, #156]	; (8008b34 <prv_read_can_received_msg+0xd0>)
 8008a96:	68d2      	ldr	r2, [r2, #12]
 8008a98:	2a02      	cmp	r2, #2
 8008a9a:	d102      	bne.n	8008aa2 <prv_read_can_received_msg+0x3e>
 8008a9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008aa0:	e000      	b.n	8008aa4 <prv_read_can_received_msg+0x40>
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8008aa8:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <prv_read_can_received_msg+0xd0>)
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8008ab4:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <prv_read_can_received_msg+0xd4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 8008abe:	be00      	bkpt	0x0000
 8008ac0:	e01f      	b.n	8008b02 <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8008ac2:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <prv_read_can_received_msg+0xd4>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8008aca:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <prv_read_can_received_msg+0xd4>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	891b      	ldrh	r3, [r3, #8]
 8008ad0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008ad2:	e013      	b.n	8008afc <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	4053      	eors	r3, r2
 8008ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae0:	8852      	ldrh	r2, [r2, #2]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8008aee:	e008      	b.n	8008b02 <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8008af0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008af2:	3b01      	subs	r3, #1
 8008af4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	330c      	adds	r3, #12
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008afc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e8      	bne.n	8008ad4 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8008b02:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d010      	beq.n	8008b2c <prv_read_can_received_msg+0xc8>
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00d      	beq.n	8008b2c <prv_read_can_received_msg+0xc8>
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d009      	beq.n	8008b2c <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1e:	6852      	ldr	r2, [r2, #4]
 8008b20:	f107 0114 	add.w	r1, r7, #20
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	e000      	b.n	8008b2c <prv_read_can_received_msg+0xc8>
        return;
 8008b2a:	bf00      	nop
    }
}
 8008b2c:	3730      	adds	r7, #48	; 0x30
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20000508 	.word	0x20000508
 8008b38:	200004ec 	.word	0x200004ec

08008b3c <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 8008b44:	2200      	movs	r2, #0
 8008b46:	2100      	movs	r1, #0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ff8b 	bl	8008a64 <prv_read_can_received_msg>
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2101      	movs	r1, #1
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff ff7e 	bl	8008a64 <prv_read_can_received_msg>
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d03d      	beq.n	8008c0c <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b96:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b9c:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8008ba2:	b672      	cpsid	i
}
 8008ba4:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	8a1b      	ldrh	r3, [r3, #16]
 8008baa:	827b      	strh	r3, [r7, #18]
 8008bac:	e01e      	b.n	8008bec <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d014      	beq.n	8008be0 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 8008bb6:	6979      	ldr	r1, [r7, #20]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fe21 	bl	8008800 <prv_send_can_message>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00d      	beq.n	8008be0 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	695a      	ldr	r2, [r3, #20]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8008be0:	8a7b      	ldrh	r3, [r7, #18]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	827b      	strh	r3, [r7, #18]
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	3318      	adds	r3, #24
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	8a7b      	ldrh	r3, [r7, #18]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1dd      	bne.n	8008bae <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8008bf2:	8a7b      	ldrh	r3, [r7, #18]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f383 8810 	msr	PRIMASK, r3
}
 8008c0a:	bf00      	nop
    }
}
 8008c0c:	bf00      	nop
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2101      	movs	r1, #1
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff ffa4 	bl	8008b70 <CO_CANinterrupt_TX>
}
 8008c28:	bf00      	nop
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	200004ec 	.word	0x200004ec

08008c34 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8008c3c:	4b04      	ldr	r3, [pc, #16]	; (8008c50 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2101      	movs	r1, #1
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff ff94 	bl	8008b70 <CO_CANinterrupt_TX>
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	200004ec 	.word	0x200004ec

08008c54 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2101      	movs	r1, #1
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff ff84 	bl	8008b70 <CO_CANinterrupt_TX>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	200004ec 	.word	0x200004ec

08008c74 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8008c78:	4b17      	ldr	r3, [pc, #92]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008c7a:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <MX_CAN1_Init+0x68>)
 8008c7c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8008c7e:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008c80:	2215      	movs	r2, #21
 8008c82:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008c84:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008c8a:	4b13      	ldr	r3, [pc, #76]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8008c90:	4b11      	ldr	r3, [pc, #68]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008c92:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8008c96:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8008c98:	4b0f      	ldr	r3, [pc, #60]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008c9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c9e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008ca8:	2201      	movs	r2, #1
 8008caa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8008cac:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8008cb2:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008cbe:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008cc4:	4804      	ldr	r0, [pc, #16]	; (8008cd8 <MX_CAN1_Init+0x64>)
 8008cc6:	f000 fd53 	bl	8009770 <HAL_CAN_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8008cd0:	f000 face 	bl	8009270 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8008cd4:	bf00      	nop
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	20000524 	.word	0x20000524
 8008cdc:	40006400 	.word	0x40006400

08008ce0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08a      	sub	sp, #40	; 0x28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ce8:	f107 0314 	add.w	r3, r7, #20
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	605a      	str	r2, [r3, #4]
 8008cf2:	609a      	str	r2, [r3, #8]
 8008cf4:	60da      	str	r2, [r3, #12]
 8008cf6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a29      	ldr	r2, [pc, #164]	; (8008da4 <HAL_CAN_MspInit+0xc4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d14c      	bne.n	8008d9c <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008d02:	2300      	movs	r3, #0
 8008d04:	613b      	str	r3, [r7, #16]
 8008d06:	4b28      	ldr	r3, [pc, #160]	; (8008da8 <HAL_CAN_MspInit+0xc8>)
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	4a27      	ldr	r2, [pc, #156]	; (8008da8 <HAL_CAN_MspInit+0xc8>)
 8008d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d10:	6413      	str	r3, [r2, #64]	; 0x40
 8008d12:	4b25      	ldr	r3, [pc, #148]	; (8008da8 <HAL_CAN_MspInit+0xc8>)
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	4b21      	ldr	r3, [pc, #132]	; (8008da8 <HAL_CAN_MspInit+0xc8>)
 8008d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d26:	4a20      	ldr	r2, [pc, #128]	; (8008da8 <HAL_CAN_MspInit+0xc8>)
 8008d28:	f043 0302 	orr.w	r3, r3, #2
 8008d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d2e:	4b1e      	ldr	r3, [pc, #120]	; (8008da8 <HAL_CAN_MspInit+0xc8>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d40:	2302      	movs	r3, #2
 8008d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008d4c:	2309      	movs	r3, #9
 8008d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d50:	f107 0314 	add.w	r3, r7, #20
 8008d54:	4619      	mov	r1, r3
 8008d56:	4815      	ldr	r0, [pc, #84]	; (8008dac <HAL_CAN_MspInit+0xcc>)
 8008d58:	f001 fcc0 	bl	800a6dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2105      	movs	r1, #5
 8008d60:	2013      	movs	r0, #19
 8008d62:	f001 fc8c 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8008d66:	2013      	movs	r0, #19
 8008d68:	f001 fca5 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	2105      	movs	r1, #5
 8008d70:	2014      	movs	r0, #20
 8008d72:	f001 fc84 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008d76:	2014      	movs	r0, #20
 8008d78:	f001 fc9d 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2105      	movs	r1, #5
 8008d80:	2015      	movs	r0, #21
 8008d82:	f001 fc7c 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008d86:	2015      	movs	r0, #21
 8008d88:	f001 fc95 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2105      	movs	r1, #5
 8008d90:	2016      	movs	r0, #22
 8008d92:	f001 fc74 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8008d96:	2016      	movs	r0, #22
 8008d98:	f001 fc8d 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	3728      	adds	r7, #40	; 0x28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	40006400 	.word	0x40006400
 8008da8:	40023800 	.word	0x40023800
 8008dac:	40020400 	.word	0x40020400

08008db0 <OD_extension_init>:
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <OD_extension_init+0x14>
 8008dc0:	2305      	movs	r3, #5
 8008dc2:	e003      	b.n	8008dcc <OD_extension_init+0x1c>
    entry->extension = extension;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8008ddc:	4a08      	ldr	r2, [pc, #32]	; (8008e00 <MX_FREERTOS_Init+0x28>)
 8008dde:	2100      	movs	r1, #0
 8008de0:	4808      	ldr	r0, [pc, #32]	; (8008e04 <MX_FREERTOS_Init+0x2c>)
 8008de2:	f002 fec5 	bl	800bb70 <osThreadNew>
 8008de6:	4603      	mov	r3, r0
 8008de8:	4a07      	ldr	r2, [pc, #28]	; (8008e08 <MX_FREERTOS_Init+0x30>)
 8008dea:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(startLedTask, NULL, &ledTask_attributes);
 8008dec:	4a07      	ldr	r2, [pc, #28]	; (8008e0c <MX_FREERTOS_Init+0x34>)
 8008dee:	2100      	movs	r1, #0
 8008df0:	4807      	ldr	r0, [pc, #28]	; (8008e10 <MX_FREERTOS_Init+0x38>)
 8008df2:	f002 febd 	bl	800bb70 <osThreadNew>
 8008df6:	4603      	mov	r3, r0
 8008df8:	4a06      	ldr	r2, [pc, #24]	; (8008e14 <MX_FREERTOS_Init+0x3c>)
 8008dfa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8008dfc:	bf00      	nop
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	08011418 	.word	0x08011418
 8008e04:	08008e19 	.word	0x08008e19
 8008e08:	2000054c 	.word	0x2000054c
 8008e0c:	0801143c 	.word	0x0801143c
 8008e10:	08008eb9 	.word	0x08008eb9
 8008e14:	20000550 	.word	0x20000550

08008e18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08c      	sub	sp, #48	; 0x30
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8008e20:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <StartDefaultTask+0x84>)
 8008e22:	623b      	str	r3, [r7, #32]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8008e24:	4b1e      	ldr	r3, [pc, #120]	; (8008ea0 <StartDefaultTask+0x88>)
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
  canOpenNodeSTM32.timerHandle = &htim6;
 8008e28:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <StartDefaultTask+0x8c>)
 8008e2a:	61fb      	str	r3, [r7, #28]
  canOpenNodeSTM32.desiredNodeID = 1;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	763b      	strb	r3, [r7, #24]
  canOpenNodeSTM32.baudrate = 125;
 8008e30:	237d      	movs	r3, #125	; 0x7d
 8008e32:	837b      	strh	r3, [r7, #26]
  canopen_app_init(&canOpenNodeSTM32);
 8008e34:	f107 0318 	add.w	r3, r7, #24
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff f90b 	bl	8008054 <canopen_app_init>
  OD_extension_t OD_domain_extension;
  OD_domain_extension.object = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60bb      	str	r3, [r7, #8]
  OD_domain_extension.read = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
  OD_domain_extension.write = OD_writeDomain;
 8008e46:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <StartDefaultTask+0x90>)
 8008e48:	613b      	str	r3, [r7, #16]
  OD_extension_init(OD_ENTRY_H3002, &OD_domain_extension);
 8008e4a:	4b18      	ldr	r3, [pc, #96]	; (8008eac <StartDefaultTask+0x94>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008e54:	f107 0208 	add.w	r2, r7, #8
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff ffa8 	bl	8008db0 <OD_extension_init>
  for(;;)
  {
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, !canOpenNodeSTM32.outStatusLEDRed);
 8008e60:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bf0c      	ite	eq
 8008e68:	2301      	moveq	r3, #1
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	2120      	movs	r1, #32
 8008e72:	480f      	ldr	r0, [pc, #60]	; (8008eb0 <StartDefaultTask+0x98>)
 8008e74:	f001 fdce 	bl	800aa14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, !canOpenNodeSTM32.outStatusLEDGreen);
 8008e78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bf0c      	ite	eq
 8008e80:	2301      	moveq	r3, #1
 8008e82:	2300      	movne	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	461a      	mov	r2, r3
 8008e88:	2110      	movs	r1, #16
 8008e8a:	4809      	ldr	r0, [pc, #36]	; (8008eb0 <StartDefaultTask+0x98>)
 8008e8c:	f001 fdc2 	bl	800aa14 <HAL_GPIO_WritePin>
    canopen_app_process();
 8008e90:	f7ff fa32 	bl	80082f8 <canopen_app_process>
	vTaskDelay(pdMS_TO_TICKS(1));
 8008e94:	2001      	movs	r0, #1
 8008e96:	f003 fea5 	bl	800cbe4 <vTaskDelay>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, !canOpenNodeSTM32.outStatusLEDRed);
 8008e9a:	e7e1      	b.n	8008e60 <StartDefaultTask+0x48>
 8008e9c:	20000524 	.word	0x20000524
 8008ea0:	08008c75 	.word	0x08008c75
 8008ea4:	2000085c 	.word	0x2000085c
 8008ea8:	08008455 	.word	0x08008455
 8008eac:	20000440 	.word	0x20000440
 8008eb0:	40020800 	.word	0x40020800
 8008eb4:	00000000 	.word	0x00000000

08008eb8 <startLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLedTask */
void startLedTask(void *argument)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startLedTask */
  float freq = 1.0;
 8008ec0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008ec4:	613b      	str	r3, [r7, #16]
  float time = 0.0;
 8008ec6:	f04f 0300 	mov.w	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  float sine = 0.0;
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
  const float pi = 3.14159265;
 8008ed2:	4b65      	ldr	r3, [pc, #404]	; (8009068 <startLedTask+0x1b0>)
 8008ed4:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    freq = 1.0;
 8008ed6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008eda:	613b      	str	r3, [r7, #16]
    sine = sin(2 * pi * freq * time);
 8008edc:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ee0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008ee4:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eec:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef4:	ee17 0a90 	vmov	r0, s15
 8008ef8:	f7f7 fc50 	bl	800079c <__aeabi_f2d>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	ec43 2b10 	vmov	d0, r2, r3
 8008f04:	f006 fc64 	bl	800f7d0 <sin>
 8008f08:	ec53 2b10 	vmov	r2, r3, d0
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4619      	mov	r1, r3
 8008f10:	f7f7 fd4c 	bl	80009ac <__aeabi_d2f>
 8008f14:	4603      	mov	r3, r0
 8008f16:	60fb      	str	r3, [r7, #12]
    OD_TEST.x3001_testSignals.sin1Hz = sine;
 8008f18:	4a54      	ldr	r2, [pc, #336]	; (800906c <startLedTask+0x1b4>)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6053      	str	r3, [r2, #4]

    freq = 5.0;
 8008f1e:	4b54      	ldr	r3, [pc, #336]	; (8009070 <startLedTask+0x1b8>)
 8008f20:	613b      	str	r3, [r7, #16]
    sine = sin(2 * pi * freq * time);
 8008f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3a:	ee17 0a90 	vmov	r0, s15
 8008f3e:	f7f7 fc2d 	bl	800079c <__aeabi_f2d>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	ec43 2b10 	vmov	d0, r2, r3
 8008f4a:	f006 fc41 	bl	800f7d0 <sin>
 8008f4e:	ec53 2b10 	vmov	r2, r3, d0
 8008f52:	4610      	mov	r0, r2
 8008f54:	4619      	mov	r1, r3
 8008f56:	f7f7 fd29 	bl	80009ac <__aeabi_d2f>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	60fb      	str	r3, [r7, #12]
    OD_TEST.x3001_testSignals.sin5Hz = sine;
 8008f5e:	4a43      	ldr	r2, [pc, #268]	; (800906c <startLedTask+0x1b4>)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6093      	str	r3, [r2, #8]

    freq = 10.0;
 8008f64:	4b43      	ldr	r3, [pc, #268]	; (8009074 <startLedTask+0x1bc>)
 8008f66:	613b      	str	r3, [r7, #16]
    sine = sin(2 * pi * freq * time);
 8008f68:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f78:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f80:	ee17 0a90 	vmov	r0, s15
 8008f84:	f7f7 fc0a 	bl	800079c <__aeabi_f2d>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	ec43 2b10 	vmov	d0, r2, r3
 8008f90:	f006 fc1e 	bl	800f7d0 <sin>
 8008f94:	ec53 2b10 	vmov	r2, r3, d0
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	f7f7 fd06 	bl	80009ac <__aeabi_d2f>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	60fb      	str	r3, [r7, #12]
    OD_TEST.x3001_testSignals.sin10Hz = sine;
 8008fa4:	4a31      	ldr	r2, [pc, #196]	; (800906c <startLedTask+0x1b4>)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	60d3      	str	r3, [r2, #12]

    freq = 50.0;
 8008faa:	4b33      	ldr	r3, [pc, #204]	; (8009078 <startLedTask+0x1c0>)
 8008fac:	613b      	str	r3, [r7, #16]
    sine = sin(2 * pi * freq * time);
 8008fae:	edd7 7a02 	vldr	s15, [r7, #8]
 8008fb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8008fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc6:	ee17 0a90 	vmov	r0, s15
 8008fca:	f7f7 fbe7 	bl	800079c <__aeabi_f2d>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	ec43 2b10 	vmov	d0, r2, r3
 8008fd6:	f006 fbfb 	bl	800f7d0 <sin>
 8008fda:	ec53 2b10 	vmov	r2, r3, d0
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f7f7 fce3 	bl	80009ac <__aeabi_d2f>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	60fb      	str	r3, [r7, #12]
    OD_TEST.x3001_testSignals.sin50Hz = sine;
 8008fea:	4a20      	ldr	r2, [pc, #128]	; (800906c <startLedTask+0x1b4>)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6113      	str	r3, [r2, #16]

    freq = 100.0;
 8008ff0:	4b22      	ldr	r3, [pc, #136]	; (800907c <startLedTask+0x1c4>)
 8008ff2:	613b      	str	r3, [r7, #16]
    sine = sin(2 * pi * freq * time);
 8008ff4:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ff8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008ffc:	edd7 7a04 	vldr	s15, [r7, #16]
 8009000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009004:	edd7 7a05 	vldr	s15, [r7, #20]
 8009008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900c:	ee17 0a90 	vmov	r0, s15
 8009010:	f7f7 fbc4 	bl	800079c <__aeabi_f2d>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	ec43 2b10 	vmov	d0, r2, r3
 800901c:	f006 fbd8 	bl	800f7d0 <sin>
 8009020:	ec53 2b10 	vmov	r2, r3, d0
 8009024:	4610      	mov	r0, r2
 8009026:	4619      	mov	r1, r3
 8009028:	f7f7 fcc0 	bl	80009ac <__aeabi_d2f>
 800902c:	4603      	mov	r3, r0
 800902e:	60fb      	str	r3, [r7, #12]
    OD_TEST.x3001_testSignals.sin100Hz = sine;
 8009030:	4a0e      	ldr	r2, [pc, #56]	; (800906c <startLedTask+0x1b4>)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6153      	str	r3, [r2, #20]

    time += 1.0 / 1000.0;
 8009036:	6978      	ldr	r0, [r7, #20]
 8009038:	f7f7 fbb0 	bl	800079c <__aeabi_f2d>
 800903c:	a308      	add	r3, pc, #32	; (adr r3, 8009060 <startLedTask+0x1a8>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 fa4d 	bl	80004e0 <__adddf3>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4610      	mov	r0, r2
 800904c:	4619      	mov	r1, r3
 800904e:	f7f7 fcad 	bl	80009ac <__aeabi_d2f>
 8009052:	4603      	mov	r3, r0
 8009054:	617b      	str	r3, [r7, #20]
    osDelay(1);
 8009056:	2001      	movs	r0, #1
 8009058:	f002 fe1c 	bl	800bc94 <osDelay>
    freq = 1.0;
 800905c:	e73b      	b.n	8008ed6 <startLedTask+0x1e>
 800905e:	bf00      	nop
 8009060:	d2f1a9fc 	.word	0xd2f1a9fc
 8009064:	3f50624d 	.word	0x3f50624d
 8009068:	40490fdb 	.word	0x40490fdb
 800906c:	20000240 	.word	0x20000240
 8009070:	40a00000 	.word	0x40a00000
 8009074:	41200000 	.word	0x41200000
 8009078:	42480000 	.word	0x42480000
 800907c:	42c80000 	.word	0x42c80000

08009080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	; 0x28
 8009084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009086:	f107 0314 	add.w	r3, r7, #20
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	609a      	str	r2, [r3, #8]
 8009092:	60da      	str	r2, [r3, #12]
 8009094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]
 800909a:	4b26      	ldr	r3, [pc, #152]	; (8009134 <MX_GPIO_Init+0xb4>)
 800909c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909e:	4a25      	ldr	r2, [pc, #148]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a4:	6313      	str	r3, [r2, #48]	; 0x30
 80090a6:	4b23      	ldr	r3, [pc, #140]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ae:	613b      	str	r3, [r7, #16]
 80090b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	4b1f      	ldr	r3, [pc, #124]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	4a1e      	ldr	r2, [pc, #120]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090bc:	f043 0304 	orr.w	r3, r3, #4
 80090c0:	6313      	str	r3, [r2, #48]	; 0x30
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80090ce:	2300      	movs	r3, #0
 80090d0:	60bb      	str	r3, [r7, #8]
 80090d2:	4b18      	ldr	r3, [pc, #96]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	4a17      	ldr	r2, [pc, #92]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090d8:	f043 0301 	orr.w	r3, r3, #1
 80090dc:	6313      	str	r3, [r2, #48]	; 0x30
 80090de:	4b15      	ldr	r3, [pc, #84]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	60bb      	str	r3, [r7, #8]
 80090e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80090ea:	2300      	movs	r3, #0
 80090ec:	607b      	str	r3, [r7, #4]
 80090ee:	4b11      	ldr	r3, [pc, #68]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	4a10      	ldr	r2, [pc, #64]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090f4:	f043 0302 	orr.w	r3, r3, #2
 80090f8:	6313      	str	r3, [r2, #48]	; 0x30
 80090fa:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <MX_GPIO_Init+0xb4>)
 80090fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	607b      	str	r3, [r7, #4]
 8009104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8009106:	2200      	movs	r2, #0
 8009108:	2130      	movs	r1, #48	; 0x30
 800910a:	480b      	ldr	r0, [pc, #44]	; (8009138 <MX_GPIO_Init+0xb8>)
 800910c:	f001 fc82 	bl	800aa14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8009110:	2330      	movs	r3, #48	; 0x30
 8009112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009114:	2301      	movs	r3, #1
 8009116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009118:	2300      	movs	r3, #0
 800911a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800911c:	2300      	movs	r3, #0
 800911e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009120:	f107 0314 	add.w	r3, r7, #20
 8009124:	4619      	mov	r1, r3
 8009126:	4804      	ldr	r0, [pc, #16]	; (8009138 <MX_GPIO_Init+0xb8>)
 8009128:	f001 fad8 	bl	800a6dc <HAL_GPIO_Init>

}
 800912c:	bf00      	nop
 800912e:	3728      	adds	r7, #40	; 0x28
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	40023800 	.word	0x40023800
 8009138:	40020800 	.word	0x40020800

0800913c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009140:	f000 fad4 	bl	80096ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009144:	f000 f80e 	bl	8009164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009148:	f7ff ff9a 	bl	8009080 <MX_GPIO_Init>
  MX_TIM6_Init();
 800914c:	f000 fa46 	bl	80095dc <MX_TIM6_Init>
  MX_CAN1_Init();
 8009150:	f7ff fd90 	bl	8008c74 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8009154:	f002 fcc2 	bl	800badc <osKernelInitialize>
  MX_FREERTOS_Init();
 8009158:	f7ff fe3e 	bl	8008dd8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800915c:	f002 fce2 	bl	800bb24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8009160:	e7fe      	b.n	8009160 <main+0x24>
	...

08009164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b094      	sub	sp, #80	; 0x50
 8009168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800916a:	f107 0320 	add.w	r3, r7, #32
 800916e:	2230      	movs	r2, #48	; 0x30
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f005 fc5a 	bl	800ea2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009178:	f107 030c 	add.w	r3, r7, #12
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	605a      	str	r2, [r3, #4]
 8009182:	609a      	str	r2, [r3, #8]
 8009184:	60da      	str	r2, [r3, #12]
 8009186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009188:	2300      	movs	r3, #0
 800918a:	60bb      	str	r3, [r7, #8]
 800918c:	4b28      	ldr	r3, [pc, #160]	; (8009230 <SystemClock_Config+0xcc>)
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	4a27      	ldr	r2, [pc, #156]	; (8009230 <SystemClock_Config+0xcc>)
 8009192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009196:	6413      	str	r3, [r2, #64]	; 0x40
 8009198:	4b25      	ldr	r3, [pc, #148]	; (8009230 <SystemClock_Config+0xcc>)
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091a0:	60bb      	str	r3, [r7, #8]
 80091a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80091a4:	2300      	movs	r3, #0
 80091a6:	607b      	str	r3, [r7, #4]
 80091a8:	4b22      	ldr	r3, [pc, #136]	; (8009234 <SystemClock_Config+0xd0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a21      	ldr	r2, [pc, #132]	; (8009234 <SystemClock_Config+0xd0>)
 80091ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	4b1f      	ldr	r3, [pc, #124]	; (8009234 <SystemClock_Config+0xd0>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091bc:	607b      	str	r3, [r7, #4]
 80091be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80091c0:	2302      	movs	r3, #2
 80091c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80091c4:	2301      	movs	r3, #1
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80091c8:	2310      	movs	r3, #16
 80091ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091cc:	2302      	movs	r3, #2
 80091ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80091d0:	2300      	movs	r3, #0
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80091d4:	2308      	movs	r3, #8
 80091d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80091d8:	23a8      	movs	r3, #168	; 0xa8
 80091da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80091dc:	2302      	movs	r3, #2
 80091de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80091e0:	2304      	movs	r3, #4
 80091e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091e4:	f107 0320 	add.w	r3, r7, #32
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 fc2d 	bl	800aa48 <HAL_RCC_OscConfig>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80091f4:	f000 f83c 	bl	8009270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091f8:	230f      	movs	r3, #15
 80091fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091fc:	2302      	movs	r3, #2
 80091fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009200:	2300      	movs	r3, #0
 8009202:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009204:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800920a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800920e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009210:	f107 030c 	add.w	r3, r7, #12
 8009214:	2105      	movs	r1, #5
 8009216:	4618      	mov	r0, r3
 8009218:	f001 fe8e 	bl	800af38 <HAL_RCC_ClockConfig>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009222:	f000 f825 	bl	8009270 <Error_Handler>
  }
}
 8009226:	bf00      	nop
 8009228:	3750      	adds	r7, #80	; 0x50
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40023800 	.word	0x40023800
 8009234:	40007000 	.word	0x40007000

08009238 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a08      	ldr	r2, [pc, #32]	; (8009268 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d101      	bne.n	800924e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800924a:	f000 fa71 	bl	8009730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == canopenNodeSTM32->timerHandle) {
 800924e:	4b07      	ldr	r3, [pc, #28]	; (800926c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	429a      	cmp	r2, r3
 8009258:	d101      	bne.n	800925e <HAL_TIM_PeriodElapsedCallback+0x26>
       canopen_app_interrupt();
 800925a:	f7ff f8b9 	bl	80083d0 <canopen_app_interrupt>
  }
  /* USER CODE END Callback 1 */
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	40001400 	.word	0x40001400
 800926c:	200004d4 	.word	0x200004d4

08009270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009274:	b672      	cpsid	i
}
 8009276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009278:	e7fe      	b.n	8009278 <Error_Handler+0x8>
	...

0800927c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009282:	2300      	movs	r3, #0
 8009284:	607b      	str	r3, [r7, #4]
 8009286:	4b12      	ldr	r3, [pc, #72]	; (80092d0 <HAL_MspInit+0x54>)
 8009288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928a:	4a11      	ldr	r2, [pc, #68]	; (80092d0 <HAL_MspInit+0x54>)
 800928c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009290:	6453      	str	r3, [r2, #68]	; 0x44
 8009292:	4b0f      	ldr	r3, [pc, #60]	; (80092d0 <HAL_MspInit+0x54>)
 8009294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800929a:	607b      	str	r3, [r7, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800929e:	2300      	movs	r3, #0
 80092a0:	603b      	str	r3, [r7, #0]
 80092a2:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <HAL_MspInit+0x54>)
 80092a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a6:	4a0a      	ldr	r2, [pc, #40]	; (80092d0 <HAL_MspInit+0x54>)
 80092a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ac:	6413      	str	r3, [r2, #64]	; 0x40
 80092ae:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <HAL_MspInit+0x54>)
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80092ba:	2200      	movs	r2, #0
 80092bc:	210f      	movs	r1, #15
 80092be:	f06f 0001 	mvn.w	r0, #1
 80092c2:	f001 f9dc 	bl	800a67e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	40023800 	.word	0x40023800

080092d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08e      	sub	sp, #56	; 0x38
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	4b33      	ldr	r3, [pc, #204]	; (80093b8 <HAL_InitTick+0xe4>)
 80092ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ec:	4a32      	ldr	r2, [pc, #200]	; (80093b8 <HAL_InitTick+0xe4>)
 80092ee:	f043 0320 	orr.w	r3, r3, #32
 80092f2:	6413      	str	r3, [r2, #64]	; 0x40
 80092f4:	4b30      	ldr	r3, [pc, #192]	; (80093b8 <HAL_InitTick+0xe4>)
 80092f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009300:	f107 0210 	add.w	r2, r7, #16
 8009304:	f107 0314 	add.w	r3, r7, #20
 8009308:	4611      	mov	r1, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f002 f820 	bl	800b350 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d103      	bne.n	8009322 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800931a:	f002 f805 	bl	800b328 <HAL_RCC_GetPCLK1Freq>
 800931e:	6378      	str	r0, [r7, #52]	; 0x34
 8009320:	e004      	b.n	800932c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8009322:	f002 f801 	bl	800b328 <HAL_RCC_GetPCLK1Freq>
 8009326:	4603      	mov	r3, r0
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	4a23      	ldr	r2, [pc, #140]	; (80093bc <HAL_InitTick+0xe8>)
 8009330:	fba2 2303 	umull	r2, r3, r2, r3
 8009334:	0c9b      	lsrs	r3, r3, #18
 8009336:	3b01      	subs	r3, #1
 8009338:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800933a:	4b21      	ldr	r3, [pc, #132]	; (80093c0 <HAL_InitTick+0xec>)
 800933c:	4a21      	ldr	r2, [pc, #132]	; (80093c4 <HAL_InitTick+0xf0>)
 800933e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8009340:	4b1f      	ldr	r3, [pc, #124]	; (80093c0 <HAL_InitTick+0xec>)
 8009342:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009346:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8009348:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <HAL_InitTick+0xec>)
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800934e:	4b1c      	ldr	r3, [pc, #112]	; (80093c0 <HAL_InitTick+0xec>)
 8009350:	2200      	movs	r2, #0
 8009352:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009354:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <HAL_InitTick+0xec>)
 8009356:	2200      	movs	r2, #0
 8009358:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800935a:	4b19      	ldr	r3, [pc, #100]	; (80093c0 <HAL_InitTick+0xec>)
 800935c:	2200      	movs	r2, #0
 800935e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8009360:	4817      	ldr	r0, [pc, #92]	; (80093c0 <HAL_InitTick+0xec>)
 8009362:	f002 f827 	bl	800b3b4 <HAL_TIM_Base_Init>
 8009366:	4603      	mov	r3, r0
 8009368:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800936c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009370:	2b00      	cmp	r3, #0
 8009372:	d11b      	bne.n	80093ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8009374:	4812      	ldr	r0, [pc, #72]	; (80093c0 <HAL_InitTick+0xec>)
 8009376:	f002 f86d 	bl	800b454 <HAL_TIM_Base_Start_IT>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8009380:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009384:	2b00      	cmp	r3, #0
 8009386:	d111      	bne.n	80093ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009388:	2037      	movs	r0, #55	; 0x37
 800938a:	f001 f994 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b0f      	cmp	r3, #15
 8009392:	d808      	bhi.n	80093a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8009394:	2200      	movs	r2, #0
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	2037      	movs	r0, #55	; 0x37
 800939a:	f001 f970 	bl	800a67e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800939e:	4a0a      	ldr	r2, [pc, #40]	; (80093c8 <HAL_InitTick+0xf4>)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	e002      	b.n	80093ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80093ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3738      	adds	r7, #56	; 0x38
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	40023800 	.word	0x40023800
 80093bc:	431bde83 	.word	0x431bde83
 80093c0:	20000810 	.word	0x20000810
 80093c4:	40001400 	.word	0x40001400
 80093c8:	20000448 	.word	0x20000448

080093cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80093d0:	e7fe      	b.n	80093d0 <NMI_Handler+0x4>

080093d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80093d2:	b480      	push	{r7}
 80093d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80093d6:	e7fe      	b.n	80093d6 <HardFault_Handler+0x4>

080093d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80093dc:	e7fe      	b.n	80093dc <MemManage_Handler+0x4>

080093de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80093de:	b480      	push	{r7}
 80093e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80093e2:	e7fe      	b.n	80093e2 <BusFault_Handler+0x4>

080093e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80093e4:	b480      	push	{r7}
 80093e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80093e8:	e7fe      	b.n	80093e8 <UsageFault_Handler+0x4>

080093ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80093ea:	b480      	push	{r7}
 80093ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80093ee:	bf00      	nop
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80093fc:	4802      	ldr	r0, [pc, #8]	; (8009408 <CAN1_TX_IRQHandler+0x10>)
 80093fe:	f000 fe68 	bl	800a0d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8009402:	bf00      	nop
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000524 	.word	0x20000524

0800940c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009410:	4802      	ldr	r0, [pc, #8]	; (800941c <CAN1_RX0_IRQHandler+0x10>)
 8009412:	f000 fe5e 	bl	800a0d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8009416:	bf00      	nop
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20000524 	.word	0x20000524

08009420 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009424:	4802      	ldr	r0, [pc, #8]	; (8009430 <CAN1_RX1_IRQHandler+0x10>)
 8009426:	f000 fe54 	bl	800a0d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800942a:	bf00      	nop
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000524 	.word	0x20000524

08009434 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009438:	4802      	ldr	r0, [pc, #8]	; (8009444 <CAN1_SCE_IRQHandler+0x10>)
 800943a:	f000 fe4a 	bl	800a0d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800943e:	bf00      	nop
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000524 	.word	0x20000524

08009448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800944c:	4802      	ldr	r0, [pc, #8]	; (8009458 <TIM6_DAC_IRQHandler+0x10>)
 800944e:	f002 f8a0 	bl	800b592 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009452:	bf00      	nop
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	2000085c 	.word	0x2000085c

0800945c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009460:	4802      	ldr	r0, [pc, #8]	; (800946c <TIM7_IRQHandler+0x10>)
 8009462:	f002 f896 	bl	800b592 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009466:	bf00      	nop
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000810 	.word	0x20000810

08009470 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	e00a      	b.n	8009498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009482:	f3af 8000 	nop.w
 8009486:	4601      	mov	r1, r0
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	60ba      	str	r2, [r7, #8]
 800948e:	b2ca      	uxtb	r2, r1
 8009490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	3301      	adds	r3, #1
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	dbf0      	blt.n	8009482 <_read+0x12>
	}

return len;
 80094a0:	687b      	ldr	r3, [r7, #4]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b086      	sub	sp, #24
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094b6:	2300      	movs	r3, #0
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	e009      	b.n	80094d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	1c5a      	adds	r2, r3, #1
 80094c0:	60ba      	str	r2, [r7, #8]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	3301      	adds	r3, #1
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	dbf1      	blt.n	80094bc <_write+0x12>
	}
	return len;
 80094d8:	687b      	ldr	r3, [r7, #4]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <_close>:

int _close(int file)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
	return -1;
 80094ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800950a:	605a      	str	r2, [r3, #4]
	return 0;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <_isatty>:

int _isatty(int file)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
	return 1;
 8009522:	2301      	movs	r3, #1
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
	return 0;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009554:	4a14      	ldr	r2, [pc, #80]	; (80095a8 <_sbrk+0x5c>)
 8009556:	4b15      	ldr	r3, [pc, #84]	; (80095ac <_sbrk+0x60>)
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009560:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <_sbrk+0x64>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d102      	bne.n	800956e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009568:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <_sbrk+0x64>)
 800956a:	4a12      	ldr	r2, [pc, #72]	; (80095b4 <_sbrk+0x68>)
 800956c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800956e:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <_sbrk+0x64>)
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4413      	add	r3, r2
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	429a      	cmp	r2, r3
 800957a:	d207      	bcs.n	800958c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800957c:	f005 f82e 	bl	800e5dc <__errno>
 8009580:	4603      	mov	r3, r0
 8009582:	220c      	movs	r2, #12
 8009584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009586:	f04f 33ff 	mov.w	r3, #4294967295
 800958a:	e009      	b.n	80095a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800958c:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <_sbrk+0x64>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009592:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <_sbrk+0x64>)
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4413      	add	r3, r2
 800959a:	4a05      	ldr	r2, [pc, #20]	; (80095b0 <_sbrk+0x64>)
 800959c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800959e:	68fb      	ldr	r3, [r7, #12]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20020000 	.word	0x20020000
 80095ac:	00004000 	.word	0x00004000
 80095b0:	20000858 	.word	0x20000858
 80095b4:	200052c8 	.word	0x200052c8

080095b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80095bc:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <SystemInit+0x20>)
 80095be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c2:	4a05      	ldr	r2, [pc, #20]	; (80095d8 <SystemInit+0x20>)
 80095c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80095cc:	bf00      	nop
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	e000ed00 	.word	0xe000ed00

080095dc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095e2:	463b      	mov	r3, r7
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80095ea:	4b15      	ldr	r3, [pc, #84]	; (8009640 <MX_TIM6_Init+0x64>)
 80095ec:	4a15      	ldr	r2, [pc, #84]	; (8009644 <MX_TIM6_Init+0x68>)
 80095ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 80095f0:	4b13      	ldr	r3, [pc, #76]	; (8009640 <MX_TIM6_Init+0x64>)
 80095f2:	2253      	movs	r2, #83	; 0x53
 80095f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095f6:	4b12      	ldr	r3, [pc, #72]	; (8009640 <MX_TIM6_Init+0x64>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80095fc:	4b10      	ldr	r3, [pc, #64]	; (8009640 <MX_TIM6_Init+0x64>)
 80095fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009602:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009604:	4b0e      	ldr	r3, [pc, #56]	; (8009640 <MX_TIM6_Init+0x64>)
 8009606:	2200      	movs	r2, #0
 8009608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800960a:	480d      	ldr	r0, [pc, #52]	; (8009640 <MX_TIM6_Init+0x64>)
 800960c:	f001 fed2 	bl	800b3b4 <HAL_TIM_Base_Init>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8009616:	f7ff fe2b 	bl	8009270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800961a:	2300      	movs	r3, #0
 800961c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800961e:	2300      	movs	r3, #0
 8009620:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009622:	463b      	mov	r3, r7
 8009624:	4619      	mov	r1, r3
 8009626:	4806      	ldr	r0, [pc, #24]	; (8009640 <MX_TIM6_Init+0x64>)
 8009628:	f002 f984 	bl	800b934 <HAL_TIMEx_MasterConfigSynchronization>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8009632:	f7ff fe1d 	bl	8009270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	2000085c 	.word	0x2000085c
 8009644:	40001000 	.word	0x40001000

08009648 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a0e      	ldr	r2, [pc, #56]	; (8009690 <HAL_TIM_Base_MspInit+0x48>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d115      	bne.n	8009686 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <HAL_TIM_Base_MspInit+0x4c>)
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	4a0c      	ldr	r2, [pc, #48]	; (8009694 <HAL_TIM_Base_MspInit+0x4c>)
 8009664:	f043 0310 	orr.w	r3, r3, #16
 8009668:	6413      	str	r3, [r2, #64]	; 0x40
 800966a:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <HAL_TIM_Base_MspInit+0x4c>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	f003 0310 	and.w	r3, r3, #16
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8009676:	2200      	movs	r2, #0
 8009678:	2105      	movs	r1, #5
 800967a:	2036      	movs	r0, #54	; 0x36
 800967c:	f000 ffff 	bl	800a67e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009680:	2036      	movs	r0, #54	; 0x36
 8009682:	f001 f818 	bl	800a6b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	40001000 	.word	0x40001000
 8009694:	40023800 	.word	0x40023800

08009698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800969c:	480d      	ldr	r0, [pc, #52]	; (80096d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800969e:	490e      	ldr	r1, [pc, #56]	; (80096d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80096a0:	4a0e      	ldr	r2, [pc, #56]	; (80096dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80096a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80096a4:	e002      	b.n	80096ac <LoopCopyDataInit>

080096a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80096a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80096a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80096aa:	3304      	adds	r3, #4

080096ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80096ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80096ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80096b0:	d3f9      	bcc.n	80096a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80096b2:	4a0b      	ldr	r2, [pc, #44]	; (80096e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80096b4:	4c0b      	ldr	r4, [pc, #44]	; (80096e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80096b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80096b8:	e001      	b.n	80096be <LoopFillZerobss>

080096ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80096ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80096bc:	3204      	adds	r2, #4

080096be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80096be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80096c0:	d3fb      	bcc.n	80096ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80096c2:	f7ff ff79 	bl	80095b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096c6:	f005 f959 	bl	800e97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096ca:	f7ff fd37 	bl	800913c <main>
  bx  lr    
 80096ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80096d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80096d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80096d8:	200004b8 	.word	0x200004b8
  ldr r2, =_sidata
 80096dc:	080116f8 	.word	0x080116f8
  ldr r2, =_sbss
 80096e0:	200004b8 	.word	0x200004b8
  ldr r4, =_ebss
 80096e4:	200052c8 	.word	0x200052c8

080096e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80096e8:	e7fe      	b.n	80096e8 <ADC_IRQHandler>
	...

080096ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80096f0:	4b0e      	ldr	r3, [pc, #56]	; (800972c <HAL_Init+0x40>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <HAL_Init+0x40>)
 80096f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <HAL_Init+0x40>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <HAL_Init+0x40>)
 8009702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009708:	4b08      	ldr	r3, [pc, #32]	; (800972c <HAL_Init+0x40>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a07      	ldr	r2, [pc, #28]	; (800972c <HAL_Init+0x40>)
 800970e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009714:	2003      	movs	r0, #3
 8009716:	f000 ffa7 	bl	800a668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800971a:	200f      	movs	r0, #15
 800971c:	f7ff fdda 	bl	80092d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009720:	f7ff fdac 	bl	800927c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	40023c00 	.word	0x40023c00

08009730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009734:	4b06      	ldr	r3, [pc, #24]	; (8009750 <HAL_IncTick+0x20>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <HAL_IncTick+0x24>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4413      	add	r3, r2
 8009740:	4a04      	ldr	r2, [pc, #16]	; (8009754 <HAL_IncTick+0x24>)
 8009742:	6013      	str	r3, [r2, #0]
}
 8009744:	bf00      	nop
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	2000044c 	.word	0x2000044c
 8009754:	200008a4 	.word	0x200008a4

08009758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
  return uwTick;
 800975c:	4b03      	ldr	r3, [pc, #12]	; (800976c <HAL_GetTick+0x14>)
 800975e:	681b      	ldr	r3, [r3, #0]
}
 8009760:	4618      	mov	r0, r3
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	200008a4 	.word	0x200008a4

08009770 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e0ed      	b.n	800995e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d102      	bne.n	8009794 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff faa6 	bl	8008ce0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097a4:	f7ff ffd8 	bl	8009758 <HAL_GetTick>
 80097a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097aa:	e012      	b.n	80097d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80097ac:	f7ff ffd4 	bl	8009758 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b0a      	cmp	r3, #10
 80097b8:	d90b      	bls.n	80097d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2205      	movs	r2, #5
 80097ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e0c5      	b.n	800995e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0e5      	beq.n	80097ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0202 	bic.w	r2, r2, #2
 80097ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097f0:	f7ff ffb2 	bl	8009758 <HAL_GetTick>
 80097f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80097f6:	e012      	b.n	800981e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80097f8:	f7ff ffae 	bl	8009758 <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	2b0a      	cmp	r3, #10
 8009804:	d90b      	bls.n	800981e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2205      	movs	r2, #5
 8009816:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e09f      	b.n	800995e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f003 0302 	and.w	r3, r3, #2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e5      	bne.n	80097f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	7e1b      	ldrb	r3, [r3, #24]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d108      	bne.n	8009846 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	e007      	b.n	8009856 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009854:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7e5b      	ldrb	r3, [r3, #25]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d108      	bne.n	8009870 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	e007      	b.n	8009880 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800987e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	7e9b      	ldrb	r3, [r3, #26]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d108      	bne.n	800989a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f042 0220 	orr.w	r2, r2, #32
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	e007      	b.n	80098aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f022 0220 	bic.w	r2, r2, #32
 80098a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	7edb      	ldrb	r3, [r3, #27]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d108      	bne.n	80098c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f022 0210 	bic.w	r2, r2, #16
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e007      	b.n	80098d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0210 	orr.w	r2, r2, #16
 80098d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	7f1b      	ldrb	r3, [r3, #28]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d108      	bne.n	80098ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f042 0208 	orr.w	r2, r2, #8
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	e007      	b.n	80098fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0208 	bic.w	r2, r2, #8
 80098fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	7f5b      	ldrb	r3, [r3, #29]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d108      	bne.n	8009918 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f042 0204 	orr.w	r2, r2, #4
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	e007      	b.n	8009928 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0204 	bic.w	r2, r2, #4
 8009926:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	ea42 0103 	orr.w	r1, r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	1e5a      	subs	r2, r3, #1
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800997e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009980:	7cfb      	ldrb	r3, [r7, #19]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d003      	beq.n	800998e <HAL_CAN_ConfigFilter+0x26>
 8009986:	7cfb      	ldrb	r3, [r7, #19]
 8009988:	2b02      	cmp	r3, #2
 800998a:	f040 80be 	bne.w	8009b0a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800998e:	4b65      	ldr	r3, [pc, #404]	; (8009b24 <HAL_CAN_ConfigFilter+0x1bc>)
 8009990:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009998:	f043 0201 	orr.w	r2, r3, #1
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	021b      	lsls	r3, r3, #8
 80099be:	431a      	orrs	r2, r3
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	f003 031f 	and.w	r3, r3, #31
 80099ce:	2201      	movs	r2, #1
 80099d0:	fa02 f303 	lsl.w	r3, r2, r3
 80099d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	43db      	mvns	r3, r3
 80099e0:	401a      	ands	r2, r3
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d123      	bne.n	8009a38 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	43db      	mvns	r3, r3
 80099fa:	401a      	ands	r2, r3
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009a12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	3248      	adds	r2, #72	; 0x48
 8009a18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a2e:	6979      	ldr	r1, [r7, #20]
 8009a30:	3348      	adds	r3, #72	; 0x48
 8009a32:	00db      	lsls	r3, r3, #3
 8009a34:	440b      	add	r3, r1
 8009a36:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d122      	bne.n	8009a86 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009a60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	3248      	adds	r2, #72	; 0x48
 8009a66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009a7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009a7c:	6979      	ldr	r1, [r7, #20]
 8009a7e:	3348      	adds	r3, #72	; 0x48
 8009a80:	00db      	lsls	r3, r3, #3
 8009a82:	440b      	add	r3, r1
 8009a84:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	43db      	mvns	r3, r3
 8009a98:	401a      	ands	r2, r3
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009aa0:	e007      	b.n	8009ab2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d109      	bne.n	8009ace <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	43db      	mvns	r3, r3
 8009ac4:	401a      	ands	r2, r3
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009acc:	e007      	b.n	8009ade <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d107      	bne.n	8009af6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	431a      	orrs	r2, r3
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009afc:	f023 0201 	bic.w	r2, r3, #1
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	e006      	b.n	8009b18 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
  }
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	371c      	adds	r7, #28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	40006400 	.word	0x40006400

08009b28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d12e      	bne.n	8009b9a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 0201 	bic.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b54:	f7ff fe00 	bl	8009758 <HAL_GetTick>
 8009b58:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009b5a:	e012      	b.n	8009b82 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009b5c:	f7ff fdfc 	bl	8009758 <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	2b0a      	cmp	r3, #10
 8009b68:	d90b      	bls.n	8009b82 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2205      	movs	r2, #5
 8009b7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e012      	b.n	8009ba8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e5      	bne.n	8009b5c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e006      	b.n	8009ba8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
  }
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d133      	bne.n	8009c2c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0201 	orr.w	r2, r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bd4:	f7ff fdc0 	bl	8009758 <HAL_GetTick>
 8009bd8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009bda:	e012      	b.n	8009c02 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009bdc:	f7ff fdbc 	bl	8009758 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b0a      	cmp	r3, #10
 8009be8:	d90b      	bls.n	8009c02 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2205      	movs	r2, #5
 8009bfa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e01b      	b.n	8009c3a <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0e5      	beq.n	8009bdc <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0202 	bic.w	r2, r2, #2
 8009c1e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e006      	b.n	8009c3a <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
  }
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b089      	sub	sp, #36	; 0x24
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	607a      	str	r2, [r7, #4]
 8009c4e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c56:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009c60:	7ffb      	ldrb	r3, [r7, #31]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d003      	beq.n	8009c6e <HAL_CAN_AddTxMessage+0x2c>
 8009c66:	7ffb      	ldrb	r3, [r7, #31]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	f040 80b8 	bne.w	8009dde <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d105      	bne.n	8009c8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 80a0 	beq.w	8009dce <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	0e1b      	lsrs	r3, r3, #24
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d907      	bls.n	8009cae <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e09e      	b.n	8009dec <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009cae:	2201      	movs	r2, #1
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	409a      	lsls	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10d      	bne.n	8009cdc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	6809      	ldr	r1, [r1, #0]
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	3318      	adds	r3, #24
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	440b      	add	r3, r1
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	e00f      	b.n	8009cfc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009ce6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009cec:	68f9      	ldr	r1, [r7, #12]
 8009cee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009cf0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	3318      	adds	r3, #24
 8009cf6:	011b      	lsls	r3, r3, #4
 8009cf8:	440b      	add	r3, r1
 8009cfa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6819      	ldr	r1, [r3, #0]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	691a      	ldr	r2, [r3, #16]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	3318      	adds	r3, #24
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	440b      	add	r3, r1
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	7d1b      	ldrb	r3, [r3, #20]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d111      	bne.n	8009d3c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3318      	adds	r3, #24
 8009d20:	011b      	lsls	r3, r3, #4
 8009d22:	4413      	add	r3, r2
 8009d24:	3304      	adds	r3, #4
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	6811      	ldr	r1, [r2, #0]
 8009d2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	3318      	adds	r3, #24
 8009d34:	011b      	lsls	r3, r3, #4
 8009d36:	440b      	add	r3, r1
 8009d38:	3304      	adds	r3, #4
 8009d3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3307      	adds	r3, #7
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	061a      	lsls	r2, r3, #24
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3306      	adds	r3, #6
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	041b      	lsls	r3, r3, #16
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3305      	adds	r3, #5
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	021b      	lsls	r3, r3, #8
 8009d56:	4313      	orrs	r3, r2
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	3204      	adds	r2, #4
 8009d5c:	7812      	ldrb	r2, [r2, #0]
 8009d5e:	4610      	mov	r0, r2
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	6811      	ldr	r1, [r2, #0]
 8009d64:	ea43 0200 	orr.w	r2, r3, r0
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	011b      	lsls	r3, r3, #4
 8009d6c:	440b      	add	r3, r1
 8009d6e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009d72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3303      	adds	r3, #3
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	061a      	lsls	r2, r3, #24
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3302      	adds	r3, #2
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	431a      	orrs	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	021b      	lsls	r3, r3, #8
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	7812      	ldrb	r2, [r2, #0]
 8009d94:	4610      	mov	r0, r2
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	6811      	ldr	r1, [r2, #0]
 8009d9a:	ea43 0200 	orr.w	r2, r3, r0
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	011b      	lsls	r3, r3, #4
 8009da2:	440b      	add	r3, r1
 8009da4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009da8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	3318      	adds	r3, #24
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	4413      	add	r3, r2
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	6811      	ldr	r1, [r2, #0]
 8009dbc:	f043 0201 	orr.w	r2, r3, #1
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	3318      	adds	r3, #24
 8009dc4:	011b      	lsls	r3, r3, #4
 8009dc6:	440b      	add	r3, r1
 8009dc8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e00e      	b.n	8009dec <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e006      	b.n	8009dec <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
  }
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3724      	adds	r7, #36	; 0x24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8009e00:	2300      	movs	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e0a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8009e0c:	7afb      	ldrb	r3, [r7, #11]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d002      	beq.n	8009e18 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8009e12:	7afb      	ldrb	r3, [r7, #11]
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d11d      	bne.n	8009e54 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3301      	adds	r3, #1
 8009e52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8009e54:	68fb      	ldr	r3, [r7, #12]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009e62:	b480      	push	{r7}
 8009e64:	b087      	sub	sp, #28
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
 8009e6e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e76:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d003      	beq.n	8009e86 <HAL_CAN_GetRxMessage+0x24>
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	f040 80f3 	bne.w	800a06c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10e      	bne.n	8009eaa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d116      	bne.n	8009ec8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e0e7      	b.n	800a07a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	f003 0303 	and.w	r3, r3, #3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d107      	bne.n	8009ec8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e0d8      	b.n	800a07a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	331b      	adds	r3, #27
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	4413      	add	r3, r2
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0204 	and.w	r2, r3, #4
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10c      	bne.n	8009f00 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	331b      	adds	r3, #27
 8009eee:	011b      	lsls	r3, r3, #4
 8009ef0:	4413      	add	r3, r2
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	0d5b      	lsrs	r3, r3, #21
 8009ef6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	e00b      	b.n	8009f18 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	331b      	adds	r3, #27
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	4413      	add	r3, r2
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	08db      	lsrs	r3, r3, #3
 8009f10:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	331b      	adds	r3, #27
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	4413      	add	r3, r2
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0202 	and.w	r2, r3, #2
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	331b      	adds	r3, #27
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	4413      	add	r3, r2
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 020f 	and.w	r2, r3, #15
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	331b      	adds	r3, #27
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	4413      	add	r3, r2
 8009f52:	3304      	adds	r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	331b      	adds	r3, #27
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	4413      	add	r3, r2
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	0c1b      	lsrs	r3, r3, #16
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	011b      	lsls	r3, r3, #4
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	0a1a      	lsrs	r2, r3, #8
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	b2d2      	uxtb	r2, r2
 8009fa4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	0c1a      	lsrs	r2, r3, #16
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	3302      	adds	r3, #2
 8009fbc:	b2d2      	uxtb	r2, r2
 8009fbe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	0e1a      	lsrs	r2, r3, #24
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	3303      	adds	r3, #3
 8009fd6:	b2d2      	uxtb	r2, r2
 8009fd8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	3304      	adds	r3, #4
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	0a1a      	lsrs	r2, r3, #8
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	3305      	adds	r3, #5
 800a008:	b2d2      	uxtb	r2, r2
 800a00a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	4413      	add	r3, r2
 800a016:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	0c1a      	lsrs	r2, r3, #16
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	3306      	adds	r3, #6
 800a022:	b2d2      	uxtb	r2, r2
 800a024:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	011b      	lsls	r3, r3, #4
 800a02e:	4413      	add	r3, r2
 800a030:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	0e1a      	lsrs	r2, r3, #24
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	3307      	adds	r3, #7
 800a03c:	b2d2      	uxtb	r2, r2
 800a03e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d108      	bne.n	800a058 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f042 0220 	orr.w	r2, r2, #32
 800a054:	60da      	str	r2, [r3, #12]
 800a056:	e007      	b.n	800a068 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	691a      	ldr	r2, [r3, #16]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f042 0220 	orr.w	r2, r2, #32
 800a066:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a068:	2300      	movs	r3, #0
 800a06a:	e006      	b.n	800a07a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
  }
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	371c      	adds	r7, #28
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a096:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d002      	beq.n	800a0a4 <HAL_CAN_ActivateNotification+0x1e>
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d109      	bne.n	800a0b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6959      	ldr	r1, [r3, #20]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	e006      	b.n	800a0c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
  }
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b08a      	sub	sp, #40	; 0x28
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d07c      	beq.n	800a212 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d023      	beq.n	800a16a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2201      	movs	r2, #1
 800a128:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7fe fd6d 	bl	8008c14 <HAL_CAN_TxMailbox0CompleteCallback>
 800a13a:	e016      	b.n	800a16a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	f003 0304 	and.w	r3, r3, #4
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
 800a14e:	e00c      	b.n	800a16a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	f003 0308 	and.w	r3, r3, #8
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
 800a162:	e002      	b.n	800a16a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f96b 	bl	800a440 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a170:	2b00      	cmp	r3, #0
 800a172:	d024      	beq.n	800a1be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a17c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f7fe fd53 	bl	8008c34 <HAL_CAN_TxMailbox1CompleteCallback>
 800a18e:	e016      	b.n	800a1be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1a2:	e00c      	b.n	800a1be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d004      	beq.n	800a1b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1b6:	e002      	b.n	800a1be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f94b 	bl	800a454 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d024      	beq.n	800a212 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a1d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7fe fd39 	bl	8008c54 <HAL_CAN_TxMailbox2CompleteCallback>
 800a1e2:	e016      	b.n	800a212 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1f6:	e00c      	b.n	800a212 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
 800a20a:	e002      	b.n	800a212 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f92b 	bl	800a468 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	f003 0308 	and.w	r3, r3, #8
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00c      	beq.n	800a236 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f003 0310 	and.w	r3, r3, #16
 800a222:	2b00      	cmp	r3, #0
 800a224:	d007      	beq.n	800a236 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2210      	movs	r2, #16
 800a234:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00b      	beq.n	800a258 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f003 0308 	and.w	r3, r3, #8
 800a246:	2b00      	cmp	r3, #0
 800a248:	d006      	beq.n	800a258 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2208      	movs	r2, #8
 800a250:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f912 	bl	800a47c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d009      	beq.n	800a276 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7fe fc63 	bl	8008b3c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00c      	beq.n	800a29a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f003 0310 	and.w	r3, r3, #16
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a290:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2210      	movs	r2, #16
 800a298:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	f003 0320 	and.w	r3, r3, #32
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d006      	beq.n	800a2bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2208      	movs	r2, #8
 800a2b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f8ea 	bl	800a490 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	f003 0310 	and.w	r3, r3, #16
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	f003 0303 	and.w	r3, r3, #3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7fe fc3e 	bl	8008b56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00b      	beq.n	800a2fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	f003 0310 	and.w	r3, r3, #16
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d006      	beq.n	800a2fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2210      	movs	r2, #16
 800a2f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f8d4 	bl	800a4a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	f003 0308 	and.w	r3, r3, #8
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d006      	beq.n	800a31e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2208      	movs	r2, #8
 800a316:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f8cd 	bl	800a4b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d07b      	beq.n	800a420 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d072      	beq.n	800a418 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d008      	beq.n	800a34e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	f043 0301 	orr.w	r3, r3, #1
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a354:	2b00      	cmp	r3, #0
 800a356:	d008      	beq.n	800a36a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	f043 0302 	orr.w	r3, r3, #2
 800a368:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a370:	2b00      	cmp	r3, #0
 800a372:	d008      	beq.n	800a386 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	f043 0304 	orr.w	r3, r3, #4
 800a384:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d043      	beq.n	800a418 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a396:	2b00      	cmp	r3, #0
 800a398:	d03e      	beq.n	800a418 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3a0:	2b60      	cmp	r3, #96	; 0x60
 800a3a2:	d02b      	beq.n	800a3fc <HAL_CAN_IRQHandler+0x32a>
 800a3a4:	2b60      	cmp	r3, #96	; 0x60
 800a3a6:	d82e      	bhi.n	800a406 <HAL_CAN_IRQHandler+0x334>
 800a3a8:	2b50      	cmp	r3, #80	; 0x50
 800a3aa:	d022      	beq.n	800a3f2 <HAL_CAN_IRQHandler+0x320>
 800a3ac:	2b50      	cmp	r3, #80	; 0x50
 800a3ae:	d82a      	bhi.n	800a406 <HAL_CAN_IRQHandler+0x334>
 800a3b0:	2b40      	cmp	r3, #64	; 0x40
 800a3b2:	d019      	beq.n	800a3e8 <HAL_CAN_IRQHandler+0x316>
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	d826      	bhi.n	800a406 <HAL_CAN_IRQHandler+0x334>
 800a3b8:	2b30      	cmp	r3, #48	; 0x30
 800a3ba:	d010      	beq.n	800a3de <HAL_CAN_IRQHandler+0x30c>
 800a3bc:	2b30      	cmp	r3, #48	; 0x30
 800a3be:	d822      	bhi.n	800a406 <HAL_CAN_IRQHandler+0x334>
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d002      	beq.n	800a3ca <HAL_CAN_IRQHandler+0x2f8>
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d005      	beq.n	800a3d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a3c8:	e01d      	b.n	800a406 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	f043 0308 	orr.w	r3, r3, #8
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3d2:	e019      	b.n	800a408 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	f043 0310 	orr.w	r3, r3, #16
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3dc:	e014      	b.n	800a408 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	f043 0320 	orr.w	r3, r3, #32
 800a3e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3e6:	e00f      	b.n	800a408 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3f0:	e00a      	b.n	800a408 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a3fa:	e005      	b.n	800a408 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a402:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a404:	e000      	b.n	800a408 <HAL_CAN_IRQHandler+0x336>
            break;
 800a406:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699a      	ldr	r2, [r3, #24]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a416:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2204      	movs	r2, #4
 800a41e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	2b00      	cmp	r3, #0
 800a424:	d008      	beq.n	800a438 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f84a 	bl	800a4cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a438:	bf00      	nop
 800a43a:	3728      	adds	r7, #40	; 0x28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f003 0307 	and.w	r3, r3, #7
 800a4ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <__NVIC_SetPriorityGrouping+0x44>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a512:	4a04      	ldr	r2, [pc, #16]	; (800a524 <__NVIC_SetPriorityGrouping+0x44>)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	60d3      	str	r3, [r2, #12]
}
 800a518:	bf00      	nop
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	e000ed00 	.word	0xe000ed00

0800a528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a528:	b480      	push	{r7}
 800a52a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a52c:	4b04      	ldr	r3, [pc, #16]	; (800a540 <__NVIC_GetPriorityGrouping+0x18>)
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	0a1b      	lsrs	r3, r3, #8
 800a532:	f003 0307 	and.w	r3, r3, #7
}
 800a536:	4618      	mov	r0, r3
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	e000ed00 	.word	0xe000ed00

0800a544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a54e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a552:	2b00      	cmp	r3, #0
 800a554:	db0b      	blt.n	800a56e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	f003 021f 	and.w	r2, r3, #31
 800a55c:	4907      	ldr	r1, [pc, #28]	; (800a57c <__NVIC_EnableIRQ+0x38>)
 800a55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a562:	095b      	lsrs	r3, r3, #5
 800a564:	2001      	movs	r0, #1
 800a566:	fa00 f202 	lsl.w	r2, r0, r2
 800a56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a56e:	bf00      	nop
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	e000e100 	.word	0xe000e100

0800a580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a58c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a590:	2b00      	cmp	r3, #0
 800a592:	db0a      	blt.n	800a5aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	b2da      	uxtb	r2, r3
 800a598:	490c      	ldr	r1, [pc, #48]	; (800a5cc <__NVIC_SetPriority+0x4c>)
 800a59a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a59e:	0112      	lsls	r2, r2, #4
 800a5a0:	b2d2      	uxtb	r2, r2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a5a8:	e00a      	b.n	800a5c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	4908      	ldr	r1, [pc, #32]	; (800a5d0 <__NVIC_SetPriority+0x50>)
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	3b04      	subs	r3, #4
 800a5b8:	0112      	lsls	r2, r2, #4
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	440b      	add	r3, r1
 800a5be:	761a      	strb	r2, [r3, #24]
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	e000e100 	.word	0xe000e100
 800a5d0:	e000ed00 	.word	0xe000ed00

0800a5d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b089      	sub	sp, #36	; 0x24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	f1c3 0307 	rsb	r3, r3, #7
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	bf28      	it	cs
 800a5f2:	2304      	movcs	r3, #4
 800a5f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	2b06      	cmp	r3, #6
 800a5fc:	d902      	bls.n	800a604 <NVIC_EncodePriority+0x30>
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	3b03      	subs	r3, #3
 800a602:	e000      	b.n	800a606 <NVIC_EncodePriority+0x32>
 800a604:	2300      	movs	r3, #0
 800a606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a608:	f04f 32ff 	mov.w	r2, #4294967295
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	fa02 f303 	lsl.w	r3, r2, r3
 800a612:	43da      	mvns	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	401a      	ands	r2, r3
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a61c:	f04f 31ff 	mov.w	r1, #4294967295
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	fa01 f303 	lsl.w	r3, r1, r3
 800a626:	43d9      	mvns	r1, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a62c:	4313      	orrs	r3, r2
         );
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3724      	adds	r7, #36	; 0x24
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
	...

0800a63c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a63c:	b480      	push	{r7}
 800a63e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a640:	f3bf 8f4f 	dsb	sy
}
 800a644:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a646:	4b06      	ldr	r3, [pc, #24]	; (800a660 <__NVIC_SystemReset+0x24>)
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a64e:	4904      	ldr	r1, [pc, #16]	; (800a660 <__NVIC_SystemReset+0x24>)
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <__NVIC_SystemReset+0x28>)
 800a652:	4313      	orrs	r3, r2
 800a654:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a656:	f3bf 8f4f 	dsb	sy
}
 800a65a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <__NVIC_SystemReset+0x20>
 800a660:	e000ed00 	.word	0xe000ed00
 800a664:	05fa0004 	.word	0x05fa0004

0800a668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ff35 	bl	800a4e0 <__NVIC_SetPriorityGrouping>
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a67e:	b580      	push	{r7, lr}
 800a680:	b086      	sub	sp, #24
 800a682:	af00      	add	r7, sp, #0
 800a684:	4603      	mov	r3, r0
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a690:	f7ff ff4a 	bl	800a528 <__NVIC_GetPriorityGrouping>
 800a694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	68b9      	ldr	r1, [r7, #8]
 800a69a:	6978      	ldr	r0, [r7, #20]
 800a69c:	f7ff ff9a 	bl	800a5d4 <NVIC_EncodePriority>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff ff69 	bl	800a580 <__NVIC_SetPriority>
}
 800a6ae:	bf00      	nop
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	4603      	mov	r3, r0
 800a6be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a6c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff ff3d 	bl	800a544 <__NVIC_EnableIRQ>
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a6d6:	f7ff ffb1 	bl	800a63c <__NVIC_SystemReset>
	...

0800a6dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b089      	sub	sp, #36	; 0x24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	61fb      	str	r3, [r7, #28]
 800a6f6:	e16b      	b.n	800a9d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	4013      	ands	r3, r2
 800a70a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	429a      	cmp	r2, r3
 800a712:	f040 815a 	bne.w	800a9ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d005      	beq.n	800a72e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d130      	bne.n	800a790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	2203      	movs	r2, #3
 800a73a:	fa02 f303 	lsl.w	r3, r2, r3
 800a73e:	43db      	mvns	r3, r3
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	4013      	ands	r3, r2
 800a744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68da      	ldr	r2, [r3, #12]
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	005b      	lsls	r3, r3, #1
 800a74e:	fa02 f303 	lsl.w	r3, r2, r3
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	4313      	orrs	r3, r2
 800a756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	69ba      	ldr	r2, [r7, #24]
 800a75c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a764:	2201      	movs	r2, #1
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	fa02 f303 	lsl.w	r3, r2, r3
 800a76c:	43db      	mvns	r3, r3
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	4013      	ands	r3, r2
 800a772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	091b      	lsrs	r3, r3, #4
 800a77a:	f003 0201 	and.w	r2, r3, #1
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	fa02 f303 	lsl.w	r3, r2, r3
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	4313      	orrs	r3, r2
 800a788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d017      	beq.n	800a7cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ac:	43db      	mvns	r3, r3
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	689a      	ldr	r2, [r3, #8]
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	005b      	lsls	r3, r3, #1
 800a7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f003 0303 	and.w	r3, r3, #3
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d123      	bne.n	800a820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	08da      	lsrs	r2, r3, #3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3208      	adds	r2, #8
 800a7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	f003 0307 	and.w	r3, r3, #7
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	220f      	movs	r2, #15
 800a7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f4:	43db      	mvns	r3, r3
 800a7f6:	69ba      	ldr	r2, [r7, #24]
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	fa02 f303 	lsl.w	r3, r2, r3
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	4313      	orrs	r3, r2
 800a810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	08da      	lsrs	r2, r3, #3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	3208      	adds	r2, #8
 800a81a:	69b9      	ldr	r1, [r7, #24]
 800a81c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	2203      	movs	r2, #3
 800a82c:	fa02 f303 	lsl.w	r3, r2, r3
 800a830:	43db      	mvns	r3, r3
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	4013      	ands	r3, r2
 800a836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	f003 0203 	and.w	r2, r3, #3
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	fa02 f303 	lsl.w	r3, r2, r3
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f000 80b4 	beq.w	800a9ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a862:	2300      	movs	r3, #0
 800a864:	60fb      	str	r3, [r7, #12]
 800a866:	4b60      	ldr	r3, [pc, #384]	; (800a9e8 <HAL_GPIO_Init+0x30c>)
 800a868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a86a:	4a5f      	ldr	r2, [pc, #380]	; (800a9e8 <HAL_GPIO_Init+0x30c>)
 800a86c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a870:	6453      	str	r3, [r2, #68]	; 0x44
 800a872:	4b5d      	ldr	r3, [pc, #372]	; (800a9e8 <HAL_GPIO_Init+0x30c>)
 800a874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a87e:	4a5b      	ldr	r2, [pc, #364]	; (800a9ec <HAL_GPIO_Init+0x310>)
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	089b      	lsrs	r3, r3, #2
 800a884:	3302      	adds	r3, #2
 800a886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a88a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	220f      	movs	r2, #15
 800a896:	fa02 f303 	lsl.w	r3, r2, r3
 800a89a:	43db      	mvns	r3, r3
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	4013      	ands	r3, r2
 800a8a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a52      	ldr	r2, [pc, #328]	; (800a9f0 <HAL_GPIO_Init+0x314>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d02b      	beq.n	800a902 <HAL_GPIO_Init+0x226>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a51      	ldr	r2, [pc, #324]	; (800a9f4 <HAL_GPIO_Init+0x318>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d025      	beq.n	800a8fe <HAL_GPIO_Init+0x222>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a50      	ldr	r2, [pc, #320]	; (800a9f8 <HAL_GPIO_Init+0x31c>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d01f      	beq.n	800a8fa <HAL_GPIO_Init+0x21e>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a4f      	ldr	r2, [pc, #316]	; (800a9fc <HAL_GPIO_Init+0x320>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d019      	beq.n	800a8f6 <HAL_GPIO_Init+0x21a>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a4e      	ldr	r2, [pc, #312]	; (800aa00 <HAL_GPIO_Init+0x324>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d013      	beq.n	800a8f2 <HAL_GPIO_Init+0x216>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a4d      	ldr	r2, [pc, #308]	; (800aa04 <HAL_GPIO_Init+0x328>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d00d      	beq.n	800a8ee <HAL_GPIO_Init+0x212>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a4c      	ldr	r2, [pc, #304]	; (800aa08 <HAL_GPIO_Init+0x32c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d007      	beq.n	800a8ea <HAL_GPIO_Init+0x20e>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a4b      	ldr	r2, [pc, #300]	; (800aa0c <HAL_GPIO_Init+0x330>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d101      	bne.n	800a8e6 <HAL_GPIO_Init+0x20a>
 800a8e2:	2307      	movs	r3, #7
 800a8e4:	e00e      	b.n	800a904 <HAL_GPIO_Init+0x228>
 800a8e6:	2308      	movs	r3, #8
 800a8e8:	e00c      	b.n	800a904 <HAL_GPIO_Init+0x228>
 800a8ea:	2306      	movs	r3, #6
 800a8ec:	e00a      	b.n	800a904 <HAL_GPIO_Init+0x228>
 800a8ee:	2305      	movs	r3, #5
 800a8f0:	e008      	b.n	800a904 <HAL_GPIO_Init+0x228>
 800a8f2:	2304      	movs	r3, #4
 800a8f4:	e006      	b.n	800a904 <HAL_GPIO_Init+0x228>
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e004      	b.n	800a904 <HAL_GPIO_Init+0x228>
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	e002      	b.n	800a904 <HAL_GPIO_Init+0x228>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <HAL_GPIO_Init+0x228>
 800a902:	2300      	movs	r3, #0
 800a904:	69fa      	ldr	r2, [r7, #28]
 800a906:	f002 0203 	and.w	r2, r2, #3
 800a90a:	0092      	lsls	r2, r2, #2
 800a90c:	4093      	lsls	r3, r2
 800a90e:	69ba      	ldr	r2, [r7, #24]
 800a910:	4313      	orrs	r3, r2
 800a912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a914:	4935      	ldr	r1, [pc, #212]	; (800a9ec <HAL_GPIO_Init+0x310>)
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	089b      	lsrs	r3, r3, #2
 800a91a:	3302      	adds	r3, #2
 800a91c:	69ba      	ldr	r2, [r7, #24]
 800a91e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a922:	4b3b      	ldr	r3, [pc, #236]	; (800aa10 <HAL_GPIO_Init+0x334>)
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	43db      	mvns	r3, r3
 800a92c:	69ba      	ldr	r2, [r7, #24]
 800a92e:	4013      	ands	r3, r2
 800a930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	4313      	orrs	r3, r2
 800a944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a946:	4a32      	ldr	r2, [pc, #200]	; (800aa10 <HAL_GPIO_Init+0x334>)
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a94c:	4b30      	ldr	r3, [pc, #192]	; (800aa10 <HAL_GPIO_Init+0x334>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	43db      	mvns	r3, r3
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	4013      	ands	r3, r2
 800a95a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d003      	beq.n	800a970 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a970:	4a27      	ldr	r2, [pc, #156]	; (800aa10 <HAL_GPIO_Init+0x334>)
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a976:	4b26      	ldr	r3, [pc, #152]	; (800aa10 <HAL_GPIO_Init+0x334>)
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	43db      	mvns	r3, r3
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	4013      	ands	r3, r2
 800a984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	4313      	orrs	r3, r2
 800a998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a99a:	4a1d      	ldr	r2, [pc, #116]	; (800aa10 <HAL_GPIO_Init+0x334>)
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a9a0:	4b1b      	ldr	r3, [pc, #108]	; (800aa10 <HAL_GPIO_Init+0x334>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	43db      	mvns	r3, r3
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a9c4:	4a12      	ldr	r2, [pc, #72]	; (800aa10 <HAL_GPIO_Init+0x334>)
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	61fb      	str	r3, [r7, #28]
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	2b0f      	cmp	r3, #15
 800a9d4:	f67f ae90 	bls.w	800a6f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	3724      	adds	r7, #36	; 0x24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40023800 	.word	0x40023800
 800a9ec:	40013800 	.word	0x40013800
 800a9f0:	40020000 	.word	0x40020000
 800a9f4:	40020400 	.word	0x40020400
 800a9f8:	40020800 	.word	0x40020800
 800a9fc:	40020c00 	.word	0x40020c00
 800aa00:	40021000 	.word	0x40021000
 800aa04:	40021400 	.word	0x40021400
 800aa08:	40021800 	.word	0x40021800
 800aa0c:	40021c00 	.word	0x40021c00
 800aa10:	40013c00 	.word	0x40013c00

0800aa14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	807b      	strh	r3, [r7, #2]
 800aa20:	4613      	mov	r3, r2
 800aa22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aa24:	787b      	ldrb	r3, [r7, #1]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa2a:	887a      	ldrh	r2, [r7, #2]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aa30:	e003      	b.n	800aa3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aa32:	887b      	ldrh	r3, [r7, #2]
 800aa34:	041a      	lsls	r2, r3, #16
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	619a      	str	r2, [r3, #24]
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
	...

0800aa48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e267      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d075      	beq.n	800ab52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa66:	4b88      	ldr	r3, [pc, #544]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	f003 030c 	and.w	r3, r3, #12
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d00c      	beq.n	800aa8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa72:	4b85      	ldr	r3, [pc, #532]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa7a:	2b08      	cmp	r3, #8
 800aa7c:	d112      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa7e:	4b82      	ldr	r3, [pc, #520]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa8a:	d10b      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa8c:	4b7e      	ldr	r3, [pc, #504]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d05b      	beq.n	800ab50 <HAL_RCC_OscConfig+0x108>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d157      	bne.n	800ab50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e242      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaac:	d106      	bne.n	800aabc <HAL_RCC_OscConfig+0x74>
 800aaae:	4b76      	ldr	r3, [pc, #472]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a75      	ldr	r2, [pc, #468]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	e01d      	b.n	800aaf8 <HAL_RCC_OscConfig+0xb0>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aac4:	d10c      	bne.n	800aae0 <HAL_RCC_OscConfig+0x98>
 800aac6:	4b70      	ldr	r3, [pc, #448]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a6f      	ldr	r2, [pc, #444]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aacc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	4b6d      	ldr	r3, [pc, #436]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a6c      	ldr	r2, [pc, #432]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	e00b      	b.n	800aaf8 <HAL_RCC_OscConfig+0xb0>
 800aae0:	4b69      	ldr	r3, [pc, #420]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a68      	ldr	r2, [pc, #416]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	4b66      	ldr	r3, [pc, #408]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a65      	ldr	r2, [pc, #404]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800aaf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d013      	beq.n	800ab28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab00:	f7fe fe2a 	bl	8009758 <HAL_GetTick>
 800ab04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab06:	e008      	b.n	800ab1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab08:	f7fe fe26 	bl	8009758 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2b64      	cmp	r3, #100	; 0x64
 800ab14:	d901      	bls.n	800ab1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e207      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab1a:	4b5b      	ldr	r3, [pc, #364]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0f0      	beq.n	800ab08 <HAL_RCC_OscConfig+0xc0>
 800ab26:	e014      	b.n	800ab52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab28:	f7fe fe16 	bl	8009758 <HAL_GetTick>
 800ab2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab2e:	e008      	b.n	800ab42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab30:	f7fe fe12 	bl	8009758 <HAL_GetTick>
 800ab34:	4602      	mov	r2, r0
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	2b64      	cmp	r3, #100	; 0x64
 800ab3c:	d901      	bls.n	800ab42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	e1f3      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab42:	4b51      	ldr	r3, [pc, #324]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1f0      	bne.n	800ab30 <HAL_RCC_OscConfig+0xe8>
 800ab4e:	e000      	b.n	800ab52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d063      	beq.n	800ac26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab5e:	4b4a      	ldr	r3, [pc, #296]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	f003 030c 	and.w	r3, r3, #12
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00b      	beq.n	800ab82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab6a:	4b47      	ldr	r3, [pc, #284]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab72:	2b08      	cmp	r3, #8
 800ab74:	d11c      	bne.n	800abb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab76:	4b44      	ldr	r3, [pc, #272]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d116      	bne.n	800abb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab82:	4b41      	ldr	r3, [pc, #260]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <HAL_RCC_OscConfig+0x152>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d001      	beq.n	800ab9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e1c7      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab9a:	4b3b      	ldr	r3, [pc, #236]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	4937      	ldr	r1, [pc, #220]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abae:	e03a      	b.n	800ac26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d020      	beq.n	800abfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800abb8:	4b34      	ldr	r3, [pc, #208]	; (800ac8c <HAL_RCC_OscConfig+0x244>)
 800abba:	2201      	movs	r2, #1
 800abbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abbe:	f7fe fdcb 	bl	8009758 <HAL_GetTick>
 800abc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abc4:	e008      	b.n	800abd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abc6:	f7fe fdc7 	bl	8009758 <HAL_GetTick>
 800abca:	4602      	mov	r2, r0
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d901      	bls.n	800abd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800abd4:	2303      	movs	r3, #3
 800abd6:	e1a8      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abd8:	4b2b      	ldr	r3, [pc, #172]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0302 	and.w	r3, r3, #2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0f0      	beq.n	800abc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abe4:	4b28      	ldr	r3, [pc, #160]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	4925      	ldr	r1, [pc, #148]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	600b      	str	r3, [r1, #0]
 800abf8:	e015      	b.n	800ac26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abfa:	4b24      	ldr	r3, [pc, #144]	; (800ac8c <HAL_RCC_OscConfig+0x244>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac00:	f7fe fdaa 	bl	8009758 <HAL_GetTick>
 800ac04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac06:	e008      	b.n	800ac1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac08:	f7fe fda6 	bl	8009758 <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d901      	bls.n	800ac1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e187      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac1a:	4b1b      	ldr	r3, [pc, #108]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1f0      	bne.n	800ac08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 0308 	and.w	r3, r3, #8
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d036      	beq.n	800aca0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d016      	beq.n	800ac68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac3a:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <HAL_RCC_OscConfig+0x248>)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac40:	f7fe fd8a 	bl	8009758 <HAL_GetTick>
 800ac44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac46:	e008      	b.n	800ac5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac48:	f7fe fd86 	bl	8009758 <HAL_GetTick>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d901      	bls.n	800ac5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ac56:	2303      	movs	r3, #3
 800ac58:	e167      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac5a:	4b0b      	ldr	r3, [pc, #44]	; (800ac88 <HAL_RCC_OscConfig+0x240>)
 800ac5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d0f0      	beq.n	800ac48 <HAL_RCC_OscConfig+0x200>
 800ac66:	e01b      	b.n	800aca0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac68:	4b09      	ldr	r3, [pc, #36]	; (800ac90 <HAL_RCC_OscConfig+0x248>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac6e:	f7fe fd73 	bl	8009758 <HAL_GetTick>
 800ac72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac74:	e00e      	b.n	800ac94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac76:	f7fe fd6f 	bl	8009758 <HAL_GetTick>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d907      	bls.n	800ac94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e150      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
 800ac88:	40023800 	.word	0x40023800
 800ac8c:	42470000 	.word	0x42470000
 800ac90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac94:	4b88      	ldr	r3, [pc, #544]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ac96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac98:	f003 0302 	and.w	r3, r3, #2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1ea      	bne.n	800ac76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 8097 	beq.w	800addc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800acae:	2300      	movs	r3, #0
 800acb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acb2:	4b81      	ldr	r3, [pc, #516]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10f      	bne.n	800acde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800acbe:	2300      	movs	r3, #0
 800acc0:	60bb      	str	r3, [r7, #8]
 800acc2:	4b7d      	ldr	r3, [pc, #500]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	4a7c      	ldr	r2, [pc, #496]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800acc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800accc:	6413      	str	r3, [r2, #64]	; 0x40
 800acce:	4b7a      	ldr	r3, [pc, #488]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acd6:	60bb      	str	r3, [r7, #8]
 800acd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800acda:	2301      	movs	r3, #1
 800acdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acde:	4b77      	ldr	r3, [pc, #476]	; (800aebc <HAL_RCC_OscConfig+0x474>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d118      	bne.n	800ad1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800acea:	4b74      	ldr	r3, [pc, #464]	; (800aebc <HAL_RCC_OscConfig+0x474>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a73      	ldr	r2, [pc, #460]	; (800aebc <HAL_RCC_OscConfig+0x474>)
 800acf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acf6:	f7fe fd2f 	bl	8009758 <HAL_GetTick>
 800acfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acfc:	e008      	b.n	800ad10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acfe:	f7fe fd2b 	bl	8009758 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d901      	bls.n	800ad10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e10c      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad10:	4b6a      	ldr	r3, [pc, #424]	; (800aebc <HAL_RCC_OscConfig+0x474>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0f0      	beq.n	800acfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d106      	bne.n	800ad32 <HAL_RCC_OscConfig+0x2ea>
 800ad24:	4b64      	ldr	r3, [pc, #400]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad28:	4a63      	ldr	r2, [pc, #396]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad2a:	f043 0301 	orr.w	r3, r3, #1
 800ad2e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad30:	e01c      	b.n	800ad6c <HAL_RCC_OscConfig+0x324>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	2b05      	cmp	r3, #5
 800ad38:	d10c      	bne.n	800ad54 <HAL_RCC_OscConfig+0x30c>
 800ad3a:	4b5f      	ldr	r3, [pc, #380]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3e:	4a5e      	ldr	r2, [pc, #376]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad40:	f043 0304 	orr.w	r3, r3, #4
 800ad44:	6713      	str	r3, [r2, #112]	; 0x70
 800ad46:	4b5c      	ldr	r3, [pc, #368]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad4a:	4a5b      	ldr	r2, [pc, #364]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad4c:	f043 0301 	orr.w	r3, r3, #1
 800ad50:	6713      	str	r3, [r2, #112]	; 0x70
 800ad52:	e00b      	b.n	800ad6c <HAL_RCC_OscConfig+0x324>
 800ad54:	4b58      	ldr	r3, [pc, #352]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad58:	4a57      	ldr	r2, [pc, #348]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad5a:	f023 0301 	bic.w	r3, r3, #1
 800ad5e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad60:	4b55      	ldr	r3, [pc, #340]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad64:	4a54      	ldr	r2, [pc, #336]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad66:	f023 0304 	bic.w	r3, r3, #4
 800ad6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d015      	beq.n	800ada0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad74:	f7fe fcf0 	bl	8009758 <HAL_GetTick>
 800ad78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad7a:	e00a      	b.n	800ad92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad7c:	f7fe fcec 	bl	8009758 <HAL_GetTick>
 800ad80:	4602      	mov	r2, r0
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e0cb      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad92:	4b49      	ldr	r3, [pc, #292]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ad94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0ee      	beq.n	800ad7c <HAL_RCC_OscConfig+0x334>
 800ad9e:	e014      	b.n	800adca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ada0:	f7fe fcda 	bl	8009758 <HAL_GetTick>
 800ada4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ada6:	e00a      	b.n	800adbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ada8:	f7fe fcd6 	bl	8009758 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d901      	bls.n	800adbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e0b5      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800adbe:	4b3e      	ldr	r3, [pc, #248]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800adc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc2:	f003 0302 	and.w	r3, r3, #2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1ee      	bne.n	800ada8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d105      	bne.n	800addc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800add0:	4b39      	ldr	r3, [pc, #228]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800add2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add4:	4a38      	ldr	r2, [pc, #224]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800add6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 80a1 	beq.w	800af28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ade6:	4b34      	ldr	r3, [pc, #208]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f003 030c 	and.w	r3, r3, #12
 800adee:	2b08      	cmp	r3, #8
 800adf0:	d05c      	beq.n	800aeac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d141      	bne.n	800ae7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adfa:	4b31      	ldr	r3, [pc, #196]	; (800aec0 <HAL_RCC_OscConfig+0x478>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae00:	f7fe fcaa 	bl	8009758 <HAL_GetTick>
 800ae04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae06:	e008      	b.n	800ae1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae08:	f7fe fca6 	bl	8009758 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d901      	bls.n	800ae1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e087      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae1a:	4b27      	ldr	r3, [pc, #156]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1f0      	bne.n	800ae08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	69da      	ldr	r2, [r3, #28]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	019b      	lsls	r3, r3, #6
 800ae36:	431a      	orrs	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3c:	085b      	lsrs	r3, r3, #1
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	041b      	lsls	r3, r3, #16
 800ae42:	431a      	orrs	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae48:	061b      	lsls	r3, r3, #24
 800ae4a:	491b      	ldr	r1, [pc, #108]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae50:	4b1b      	ldr	r3, [pc, #108]	; (800aec0 <HAL_RCC_OscConfig+0x478>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae56:	f7fe fc7f 	bl	8009758 <HAL_GetTick>
 800ae5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae5c:	e008      	b.n	800ae70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae5e:	f7fe fc7b 	bl	8009758 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d901      	bls.n	800ae70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e05c      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae70:	4b11      	ldr	r3, [pc, #68]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0f0      	beq.n	800ae5e <HAL_RCC_OscConfig+0x416>
 800ae7c:	e054      	b.n	800af28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae7e:	4b10      	ldr	r3, [pc, #64]	; (800aec0 <HAL_RCC_OscConfig+0x478>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae84:	f7fe fc68 	bl	8009758 <HAL_GetTick>
 800ae88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae8a:	e008      	b.n	800ae9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae8c:	f7fe fc64 	bl	8009758 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d901      	bls.n	800ae9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e045      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae9e:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <HAL_RCC_OscConfig+0x470>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1f0      	bne.n	800ae8c <HAL_RCC_OscConfig+0x444>
 800aeaa:	e03d      	b.n	800af28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d107      	bne.n	800aec4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e038      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
 800aeb8:	40023800 	.word	0x40023800
 800aebc:	40007000 	.word	0x40007000
 800aec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aec4:	4b1b      	ldr	r3, [pc, #108]	; (800af34 <HAL_RCC_OscConfig+0x4ec>)
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d028      	beq.n	800af24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aedc:	429a      	cmp	r2, r3
 800aede:	d121      	bne.n	800af24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d11a      	bne.n	800af24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aef4:	4013      	ands	r3, r2
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aefa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d111      	bne.n	800af24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0a:	085b      	lsrs	r3, r3, #1
 800af0c:	3b01      	subs	r3, #1
 800af0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af10:	429a      	cmp	r2, r3
 800af12:	d107      	bne.n	800af24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af20:	429a      	cmp	r2, r3
 800af22:	d001      	beq.n	800af28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	e000      	b.n	800af2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	40023800 	.word	0x40023800

0800af38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e0cc      	b.n	800b0e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800af4c:	4b68      	ldr	r3, [pc, #416]	; (800b0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0307 	and.w	r3, r3, #7
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	429a      	cmp	r2, r3
 800af58:	d90c      	bls.n	800af74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af5a:	4b65      	ldr	r3, [pc, #404]	; (800b0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	b2d2      	uxtb	r2, r2
 800af60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af62:	4b63      	ldr	r3, [pc, #396]	; (800b0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 0307 	and.w	r3, r3, #7
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d001      	beq.n	800af74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e0b8      	b.n	800b0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d020      	beq.n	800afc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af8c:	4b59      	ldr	r3, [pc, #356]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	4a58      	ldr	r2, [pc, #352]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800af92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800af96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0308 	and.w	r3, r3, #8
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d005      	beq.n	800afb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800afa4:	4b53      	ldr	r3, [pc, #332]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	4a52      	ldr	r2, [pc, #328]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800afaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800afae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afb0:	4b50      	ldr	r3, [pc, #320]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	494d      	ldr	r1, [pc, #308]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800afbe:	4313      	orrs	r3, r2
 800afc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 0301 	and.w	r3, r3, #1
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d044      	beq.n	800b058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d107      	bne.n	800afe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afd6:	4b47      	ldr	r3, [pc, #284]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d119      	bne.n	800b016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e07f      	b.n	800b0e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d003      	beq.n	800aff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d107      	bne.n	800b006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aff6:	4b3f      	ldr	r3, [pc, #252]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d109      	bne.n	800b016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e06f      	b.n	800b0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b006:	4b3b      	ldr	r3, [pc, #236]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e067      	b.n	800b0e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b016:	4b37      	ldr	r3, [pc, #220]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f023 0203 	bic.w	r2, r3, #3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	4934      	ldr	r1, [pc, #208]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b024:	4313      	orrs	r3, r2
 800b026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b028:	f7fe fb96 	bl	8009758 <HAL_GetTick>
 800b02c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b02e:	e00a      	b.n	800b046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b030:	f7fe fb92 	bl	8009758 <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b03e:	4293      	cmp	r3, r2
 800b040:	d901      	bls.n	800b046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e04f      	b.n	800b0e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b046:	4b2b      	ldr	r3, [pc, #172]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f003 020c 	and.w	r2, r3, #12
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	429a      	cmp	r2, r3
 800b056:	d1eb      	bne.n	800b030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b058:	4b25      	ldr	r3, [pc, #148]	; (800b0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0307 	and.w	r3, r3, #7
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	429a      	cmp	r2, r3
 800b064:	d20c      	bcs.n	800b080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b066:	4b22      	ldr	r3, [pc, #136]	; (800b0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b068:	683a      	ldr	r2, [r7, #0]
 800b06a:	b2d2      	uxtb	r2, r2
 800b06c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b06e:	4b20      	ldr	r3, [pc, #128]	; (800b0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0307 	and.w	r3, r3, #7
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d001      	beq.n	800b080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e032      	b.n	800b0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0304 	and.w	r3, r3, #4
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b08c:	4b19      	ldr	r3, [pc, #100]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	4916      	ldr	r1, [pc, #88]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0308 	and.w	r3, r3, #8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d009      	beq.n	800b0be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b0aa:	4b12      	ldr	r3, [pc, #72]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	490e      	ldr	r1, [pc, #56]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b0be:	f000 f821 	bl	800b104 <HAL_RCC_GetSysClockFreq>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	4b0b      	ldr	r3, [pc, #44]	; (800b0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	091b      	lsrs	r3, r3, #4
 800b0ca:	f003 030f 	and.w	r3, r3, #15
 800b0ce:	490a      	ldr	r1, [pc, #40]	; (800b0f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b0d0:	5ccb      	ldrb	r3, [r1, r3]
 800b0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d6:	4a09      	ldr	r2, [pc, #36]	; (800b0fc <HAL_RCC_ClockConfig+0x1c4>)
 800b0d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b0da:	4b09      	ldr	r3, [pc, #36]	; (800b100 <HAL_RCC_ClockConfig+0x1c8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe f8f8 	bl	80092d4 <HAL_InitTick>

  return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	40023c00 	.word	0x40023c00
 800b0f4:	40023800 	.word	0x40023800
 800b0f8:	08011460 	.word	0x08011460
 800b0fc:	20000444 	.word	0x20000444
 800b100:	20000448 	.word	0x20000448

0800b104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b108:	b094      	sub	sp, #80	; 0x50
 800b10a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	647b      	str	r3, [r7, #68]	; 0x44
 800b110:	2300      	movs	r3, #0
 800b112:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b114:	2300      	movs	r3, #0
 800b116:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b118:	2300      	movs	r3, #0
 800b11a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b11c:	4b79      	ldr	r3, [pc, #484]	; (800b304 <HAL_RCC_GetSysClockFreq+0x200>)
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f003 030c 	and.w	r3, r3, #12
 800b124:	2b08      	cmp	r3, #8
 800b126:	d00d      	beq.n	800b144 <HAL_RCC_GetSysClockFreq+0x40>
 800b128:	2b08      	cmp	r3, #8
 800b12a:	f200 80e1 	bhi.w	800b2f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <HAL_RCC_GetSysClockFreq+0x34>
 800b132:	2b04      	cmp	r3, #4
 800b134:	d003      	beq.n	800b13e <HAL_RCC_GetSysClockFreq+0x3a>
 800b136:	e0db      	b.n	800b2f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b138:	4b73      	ldr	r3, [pc, #460]	; (800b308 <HAL_RCC_GetSysClockFreq+0x204>)
 800b13a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b13c:	e0db      	b.n	800b2f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b13e:	4b73      	ldr	r3, [pc, #460]	; (800b30c <HAL_RCC_GetSysClockFreq+0x208>)
 800b140:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b142:	e0d8      	b.n	800b2f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b144:	4b6f      	ldr	r3, [pc, #444]	; (800b304 <HAL_RCC_GetSysClockFreq+0x200>)
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b14c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b14e:	4b6d      	ldr	r3, [pc, #436]	; (800b304 <HAL_RCC_GetSysClockFreq+0x200>)
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d063      	beq.n	800b222 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b15a:	4b6a      	ldr	r3, [pc, #424]	; (800b304 <HAL_RCC_GetSysClockFreq+0x200>)
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	099b      	lsrs	r3, r3, #6
 800b160:	2200      	movs	r2, #0
 800b162:	63bb      	str	r3, [r7, #56]	; 0x38
 800b164:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16c:	633b      	str	r3, [r7, #48]	; 0x30
 800b16e:	2300      	movs	r3, #0
 800b170:	637b      	str	r3, [r7, #52]	; 0x34
 800b172:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b176:	4622      	mov	r2, r4
 800b178:	462b      	mov	r3, r5
 800b17a:	f04f 0000 	mov.w	r0, #0
 800b17e:	f04f 0100 	mov.w	r1, #0
 800b182:	0159      	lsls	r1, r3, #5
 800b184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b188:	0150      	lsls	r0, r2, #5
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	4621      	mov	r1, r4
 800b190:	1a51      	subs	r1, r2, r1
 800b192:	6139      	str	r1, [r7, #16]
 800b194:	4629      	mov	r1, r5
 800b196:	eb63 0301 	sbc.w	r3, r3, r1
 800b19a:	617b      	str	r3, [r7, #20]
 800b19c:	f04f 0200 	mov.w	r2, #0
 800b1a0:	f04f 0300 	mov.w	r3, #0
 800b1a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1a8:	4659      	mov	r1, fp
 800b1aa:	018b      	lsls	r3, r1, #6
 800b1ac:	4651      	mov	r1, sl
 800b1ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b1b2:	4651      	mov	r1, sl
 800b1b4:	018a      	lsls	r2, r1, #6
 800b1b6:	4651      	mov	r1, sl
 800b1b8:	ebb2 0801 	subs.w	r8, r2, r1
 800b1bc:	4659      	mov	r1, fp
 800b1be:	eb63 0901 	sbc.w	r9, r3, r1
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	f04f 0300 	mov.w	r3, #0
 800b1ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b1d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1d6:	4690      	mov	r8, r2
 800b1d8:	4699      	mov	r9, r3
 800b1da:	4623      	mov	r3, r4
 800b1dc:	eb18 0303 	adds.w	r3, r8, r3
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	eb49 0303 	adc.w	r3, r9, r3
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	f04f 0200 	mov.w	r2, #0
 800b1ee:	f04f 0300 	mov.w	r3, #0
 800b1f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	024b      	lsls	r3, r1, #9
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b200:	4621      	mov	r1, r4
 800b202:	024a      	lsls	r2, r1, #9
 800b204:	4610      	mov	r0, r2
 800b206:	4619      	mov	r1, r3
 800b208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20a:	2200      	movs	r2, #0
 800b20c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b20e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b210:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b214:	f7f5 fc1a 	bl	8000a4c <__aeabi_uldivmod>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	4613      	mov	r3, r2
 800b21e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b220:	e058      	b.n	800b2d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b222:	4b38      	ldr	r3, [pc, #224]	; (800b304 <HAL_RCC_GetSysClockFreq+0x200>)
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	099b      	lsrs	r3, r3, #6
 800b228:	2200      	movs	r2, #0
 800b22a:	4618      	mov	r0, r3
 800b22c:	4611      	mov	r1, r2
 800b22e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b232:	623b      	str	r3, [r7, #32]
 800b234:	2300      	movs	r3, #0
 800b236:	627b      	str	r3, [r7, #36]	; 0x24
 800b238:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b23c:	4642      	mov	r2, r8
 800b23e:	464b      	mov	r3, r9
 800b240:	f04f 0000 	mov.w	r0, #0
 800b244:	f04f 0100 	mov.w	r1, #0
 800b248:	0159      	lsls	r1, r3, #5
 800b24a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b24e:	0150      	lsls	r0, r2, #5
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	4641      	mov	r1, r8
 800b256:	ebb2 0a01 	subs.w	sl, r2, r1
 800b25a:	4649      	mov	r1, r9
 800b25c:	eb63 0b01 	sbc.w	fp, r3, r1
 800b260:	f04f 0200 	mov.w	r2, #0
 800b264:	f04f 0300 	mov.w	r3, #0
 800b268:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b26c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b270:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b274:	ebb2 040a 	subs.w	r4, r2, sl
 800b278:	eb63 050b 	sbc.w	r5, r3, fp
 800b27c:	f04f 0200 	mov.w	r2, #0
 800b280:	f04f 0300 	mov.w	r3, #0
 800b284:	00eb      	lsls	r3, r5, #3
 800b286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b28a:	00e2      	lsls	r2, r4, #3
 800b28c:	4614      	mov	r4, r2
 800b28e:	461d      	mov	r5, r3
 800b290:	4643      	mov	r3, r8
 800b292:	18e3      	adds	r3, r4, r3
 800b294:	603b      	str	r3, [r7, #0]
 800b296:	464b      	mov	r3, r9
 800b298:	eb45 0303 	adc.w	r3, r5, r3
 800b29c:	607b      	str	r3, [r7, #4]
 800b29e:	f04f 0200 	mov.w	r2, #0
 800b2a2:	f04f 0300 	mov.w	r3, #0
 800b2a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	028b      	lsls	r3, r1, #10
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	028a      	lsls	r2, r1, #10
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2be:	2200      	movs	r2, #0
 800b2c0:	61bb      	str	r3, [r7, #24]
 800b2c2:	61fa      	str	r2, [r7, #28]
 800b2c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2c8:	f7f5 fbc0 	bl	8000a4c <__aeabi_uldivmod>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b2d4:	4b0b      	ldr	r3, [pc, #44]	; (800b304 <HAL_RCC_GetSysClockFreq+0x200>)
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	0c1b      	lsrs	r3, r3, #16
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	3301      	adds	r3, #1
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b2e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b2ee:	e002      	b.n	800b2f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b2f0:	4b05      	ldr	r3, [pc, #20]	; (800b308 <HAL_RCC_GetSysClockFreq+0x204>)
 800b2f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b2f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3750      	adds	r7, #80	; 0x50
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b302:	bf00      	nop
 800b304:	40023800 	.word	0x40023800
 800b308:	00f42400 	.word	0x00f42400
 800b30c:	007a1200 	.word	0x007a1200

0800b310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b310:	b480      	push	{r7}
 800b312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b314:	4b03      	ldr	r3, [pc, #12]	; (800b324 <HAL_RCC_GetHCLKFreq+0x14>)
 800b316:	681b      	ldr	r3, [r3, #0]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	20000444 	.word	0x20000444

0800b328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b32c:	f7ff fff0 	bl	800b310 <HAL_RCC_GetHCLKFreq>
 800b330:	4602      	mov	r2, r0
 800b332:	4b05      	ldr	r3, [pc, #20]	; (800b348 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	0a9b      	lsrs	r3, r3, #10
 800b338:	f003 0307 	and.w	r3, r3, #7
 800b33c:	4903      	ldr	r1, [pc, #12]	; (800b34c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b33e:	5ccb      	ldrb	r3, [r1, r3]
 800b340:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b344:	4618      	mov	r0, r3
 800b346:	bd80      	pop	{r7, pc}
 800b348:	40023800 	.word	0x40023800
 800b34c:	08011470 	.word	0x08011470

0800b350 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	220f      	movs	r2, #15
 800b35e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b360:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <HAL_RCC_GetClockConfig+0x5c>)
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f003 0203 	and.w	r2, r3, #3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b36c:	4b0f      	ldr	r3, [pc, #60]	; (800b3ac <HAL_RCC_GetClockConfig+0x5c>)
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b378:	4b0c      	ldr	r3, [pc, #48]	; (800b3ac <HAL_RCC_GetClockConfig+0x5c>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b384:	4b09      	ldr	r3, [pc, #36]	; (800b3ac <HAL_RCC_GetClockConfig+0x5c>)
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	08db      	lsrs	r3, r3, #3
 800b38a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b392:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <HAL_RCC_GetClockConfig+0x60>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0207 	and.w	r2, r3, #7
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	601a      	str	r2, [r3, #0]
}
 800b39e:	bf00      	nop
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	40023800 	.word	0x40023800
 800b3b0:	40023c00 	.word	0x40023c00

0800b3b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d101      	bne.n	800b3c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e041      	b.n	800b44a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d106      	bne.n	800b3e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7fe f934 	bl	8009648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	f000 f9fe 	bl	800b7f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
	...

0800b454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b462:	b2db      	uxtb	r3, r3
 800b464:	2b01      	cmp	r3, #1
 800b466:	d001      	beq.n	800b46c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	e04e      	b.n	800b50a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2202      	movs	r2, #2
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f042 0201 	orr.w	r2, r2, #1
 800b482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a23      	ldr	r2, [pc, #140]	; (800b518 <HAL_TIM_Base_Start_IT+0xc4>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d022      	beq.n	800b4d4 <HAL_TIM_Base_Start_IT+0x80>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b496:	d01d      	beq.n	800b4d4 <HAL_TIM_Base_Start_IT+0x80>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a1f      	ldr	r2, [pc, #124]	; (800b51c <HAL_TIM_Base_Start_IT+0xc8>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d018      	beq.n	800b4d4 <HAL_TIM_Base_Start_IT+0x80>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a1e      	ldr	r2, [pc, #120]	; (800b520 <HAL_TIM_Base_Start_IT+0xcc>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d013      	beq.n	800b4d4 <HAL_TIM_Base_Start_IT+0x80>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a1c      	ldr	r2, [pc, #112]	; (800b524 <HAL_TIM_Base_Start_IT+0xd0>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d00e      	beq.n	800b4d4 <HAL_TIM_Base_Start_IT+0x80>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a1b      	ldr	r2, [pc, #108]	; (800b528 <HAL_TIM_Base_Start_IT+0xd4>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d009      	beq.n	800b4d4 <HAL_TIM_Base_Start_IT+0x80>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a19      	ldr	r2, [pc, #100]	; (800b52c <HAL_TIM_Base_Start_IT+0xd8>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d004      	beq.n	800b4d4 <HAL_TIM_Base_Start_IT+0x80>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a18      	ldr	r2, [pc, #96]	; (800b530 <HAL_TIM_Base_Start_IT+0xdc>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d111      	bne.n	800b4f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	f003 0307 	and.w	r3, r3, #7
 800b4de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b06      	cmp	r3, #6
 800b4e4:	d010      	beq.n	800b508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f042 0201 	orr.w	r2, r2, #1
 800b4f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4f6:	e007      	b.n	800b508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f042 0201 	orr.w	r2, r2, #1
 800b506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	40010000 	.word	0x40010000
 800b51c:	40000400 	.word	0x40000400
 800b520:	40000800 	.word	0x40000800
 800b524:	40000c00 	.word	0x40000c00
 800b528:	40010400 	.word	0x40010400
 800b52c:	40014000 	.word	0x40014000
 800b530:	40001800 	.word	0x40001800

0800b534 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68da      	ldr	r2, [r3, #12]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 0201 	bic.w	r2, r2, #1
 800b54a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6a1a      	ldr	r2, [r3, #32]
 800b552:	f241 1311 	movw	r3, #4369	; 0x1111
 800b556:	4013      	ands	r3, r2
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10f      	bne.n	800b57c <HAL_TIM_Base_Stop_IT+0x48>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6a1a      	ldr	r2, [r3, #32]
 800b562:	f240 4344 	movw	r3, #1092	; 0x444
 800b566:	4013      	ands	r3, r2
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d107      	bne.n	800b57c <HAL_TIM_Base_Stop_IT+0x48>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 0201 	bic.w	r2, r2, #1
 800b57a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	f003 0302 	and.w	r3, r3, #2
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d122      	bne.n	800b5ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d11b      	bne.n	800b5ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f06f 0202 	mvn.w	r2, #2
 800b5be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	f003 0303 	and.w	r3, r3, #3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d003      	beq.n	800b5dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f8ee 	bl	800b7b6 <HAL_TIM_IC_CaptureCallback>
 800b5da:	e005      	b.n	800b5e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f8e0 	bl	800b7a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f8f1 	bl	800b7ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	f003 0304 	and.w	r3, r3, #4
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	d122      	bne.n	800b642 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	f003 0304 	and.w	r3, r3, #4
 800b606:	2b04      	cmp	r3, #4
 800b608:	d11b      	bne.n	800b642 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f06f 0204 	mvn.w	r2, #4
 800b612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f8c4 	bl	800b7b6 <HAL_TIM_IC_CaptureCallback>
 800b62e:	e005      	b.n	800b63c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f8b6 	bl	800b7a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f8c7 	bl	800b7ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	f003 0308 	and.w	r3, r3, #8
 800b64c:	2b08      	cmp	r3, #8
 800b64e:	d122      	bne.n	800b696 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	f003 0308 	and.w	r3, r3, #8
 800b65a:	2b08      	cmp	r3, #8
 800b65c:	d11b      	bne.n	800b696 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f06f 0208 	mvn.w	r2, #8
 800b666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2204      	movs	r2, #4
 800b66c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	69db      	ldr	r3, [r3, #28]
 800b674:	f003 0303 	and.w	r3, r3, #3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f89a 	bl	800b7b6 <HAL_TIM_IC_CaptureCallback>
 800b682:	e005      	b.n	800b690 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f88c 	bl	800b7a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f89d 	bl	800b7ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	f003 0310 	and.w	r3, r3, #16
 800b6a0:	2b10      	cmp	r3, #16
 800b6a2:	d122      	bne.n	800b6ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f003 0310 	and.w	r3, r3, #16
 800b6ae:	2b10      	cmp	r3, #16
 800b6b0:	d11b      	bne.n	800b6ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f06f 0210 	mvn.w	r2, #16
 800b6ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2208      	movs	r2, #8
 800b6c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f870 	bl	800b7b6 <HAL_TIM_IC_CaptureCallback>
 800b6d6:	e005      	b.n	800b6e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f862 	bl	800b7a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f873 	bl	800b7ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d10e      	bne.n	800b716 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	2b01      	cmp	r3, #1
 800b704:	d107      	bne.n	800b716 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f06f 0201 	mvn.w	r2, #1
 800b70e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f7fd fd91 	bl	8009238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b720:	2b80      	cmp	r3, #128	; 0x80
 800b722:	d10e      	bne.n	800b742 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68db      	ldr	r3, [r3, #12]
 800b72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b72e:	2b80      	cmp	r3, #128	; 0x80
 800b730:	d107      	bne.n	800b742 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b73a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f97f 	bl	800ba40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74c:	2b40      	cmp	r3, #64	; 0x40
 800b74e:	d10e      	bne.n	800b76e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b75a:	2b40      	cmp	r3, #64	; 0x40
 800b75c:	d107      	bne.n	800b76e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f838 	bl	800b7de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	f003 0320 	and.w	r3, r3, #32
 800b778:	2b20      	cmp	r3, #32
 800b77a:	d10e      	bne.n	800b79a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	f003 0320 	and.w	r3, r3, #32
 800b786:	2b20      	cmp	r3, #32
 800b788:	d107      	bne.n	800b79a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f06f 0220 	mvn.w	r2, #32
 800b792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f949 	bl	800ba2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b79a:	bf00      	nop
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b083      	sub	sp, #12
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7aa:	bf00      	nop
 800b7ac:	370c      	adds	r7, #12
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b083      	sub	sp, #12
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b7be:	bf00      	nop
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b7d2:	bf00      	nop
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b083      	sub	sp, #12
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a40      	ldr	r2, [pc, #256]	; (800b908 <TIM_Base_SetConfig+0x114>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d013      	beq.n	800b834 <TIM_Base_SetConfig+0x40>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b812:	d00f      	beq.n	800b834 <TIM_Base_SetConfig+0x40>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a3d      	ldr	r2, [pc, #244]	; (800b90c <TIM_Base_SetConfig+0x118>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d00b      	beq.n	800b834 <TIM_Base_SetConfig+0x40>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a3c      	ldr	r2, [pc, #240]	; (800b910 <TIM_Base_SetConfig+0x11c>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d007      	beq.n	800b834 <TIM_Base_SetConfig+0x40>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a3b      	ldr	r2, [pc, #236]	; (800b914 <TIM_Base_SetConfig+0x120>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d003      	beq.n	800b834 <TIM_Base_SetConfig+0x40>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a3a      	ldr	r2, [pc, #232]	; (800b918 <TIM_Base_SetConfig+0x124>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d108      	bne.n	800b846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b83a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a2f      	ldr	r2, [pc, #188]	; (800b908 <TIM_Base_SetConfig+0x114>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d02b      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b854:	d027      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a2c      	ldr	r2, [pc, #176]	; (800b90c <TIM_Base_SetConfig+0x118>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d023      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a2b      	ldr	r2, [pc, #172]	; (800b910 <TIM_Base_SetConfig+0x11c>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d01f      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a2a      	ldr	r2, [pc, #168]	; (800b914 <TIM_Base_SetConfig+0x120>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d01b      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a29      	ldr	r2, [pc, #164]	; (800b918 <TIM_Base_SetConfig+0x124>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d017      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a28      	ldr	r2, [pc, #160]	; (800b91c <TIM_Base_SetConfig+0x128>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d013      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a27      	ldr	r2, [pc, #156]	; (800b920 <TIM_Base_SetConfig+0x12c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d00f      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a26      	ldr	r2, [pc, #152]	; (800b924 <TIM_Base_SetConfig+0x130>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d00b      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a25      	ldr	r2, [pc, #148]	; (800b928 <TIM_Base_SetConfig+0x134>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d007      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a24      	ldr	r2, [pc, #144]	; (800b92c <TIM_Base_SetConfig+0x138>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d003      	beq.n	800b8a6 <TIM_Base_SetConfig+0xb2>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a23      	ldr	r2, [pc, #140]	; (800b930 <TIM_Base_SetConfig+0x13c>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d108      	bne.n	800b8b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a0a      	ldr	r2, [pc, #40]	; (800b908 <TIM_Base_SetConfig+0x114>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_Base_SetConfig+0xf8>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a0c      	ldr	r2, [pc, #48]	; (800b918 <TIM_Base_SetConfig+0x124>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d103      	bne.n	800b8f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	691a      	ldr	r2, [r3, #16]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	615a      	str	r2, [r3, #20]
}
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	40010000 	.word	0x40010000
 800b90c:	40000400 	.word	0x40000400
 800b910:	40000800 	.word	0x40000800
 800b914:	40000c00 	.word	0x40000c00
 800b918:	40010400 	.word	0x40010400
 800b91c:	40014000 	.word	0x40014000
 800b920:	40014400 	.word	0x40014400
 800b924:	40014800 	.word	0x40014800
 800b928:	40001800 	.word	0x40001800
 800b92c:	40001c00 	.word	0x40001c00
 800b930:	40002000 	.word	0x40002000

0800b934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b944:	2b01      	cmp	r3, #1
 800b946:	d101      	bne.n	800b94c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b948:	2302      	movs	r3, #2
 800b94a:	e05a      	b.n	800ba02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2202      	movs	r2, #2
 800b958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a21      	ldr	r2, [pc, #132]	; (800ba10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d022      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b998:	d01d      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a1d      	ldr	r2, [pc, #116]	; (800ba14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d018      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a1b      	ldr	r2, [pc, #108]	; (800ba18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d013      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a1a      	ldr	r2, [pc, #104]	; (800ba1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d00e      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a18      	ldr	r2, [pc, #96]	; (800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d009      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a17      	ldr	r2, [pc, #92]	; (800ba24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d004      	beq.n	800b9d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a15      	ldr	r2, [pc, #84]	; (800ba28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d10c      	bne.n	800b9f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	40010000 	.word	0x40010000
 800ba14:	40000400 	.word	0x40000400
 800ba18:	40000800 	.word	0x40000800
 800ba1c:	40000c00 	.word	0x40000c00
 800ba20:	40010400 	.word	0x40010400
 800ba24:	40014000 	.word	0x40014000
 800ba28:	40001800 	.word	0x40001800

0800ba2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <__NVIC_SetPriority>:
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	6039      	str	r1, [r7, #0]
 800ba5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	db0a      	blt.n	800ba7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	490c      	ldr	r1, [pc, #48]	; (800baa0 <__NVIC_SetPriority+0x4c>)
 800ba6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba72:	0112      	lsls	r2, r2, #4
 800ba74:	b2d2      	uxtb	r2, r2
 800ba76:	440b      	add	r3, r1
 800ba78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ba7c:	e00a      	b.n	800ba94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	4908      	ldr	r1, [pc, #32]	; (800baa4 <__NVIC_SetPriority+0x50>)
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	f003 030f 	and.w	r3, r3, #15
 800ba8a:	3b04      	subs	r3, #4
 800ba8c:	0112      	lsls	r2, r2, #4
 800ba8e:	b2d2      	uxtb	r2, r2
 800ba90:	440b      	add	r3, r1
 800ba92:	761a      	strb	r2, [r3, #24]
}
 800ba94:	bf00      	nop
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	e000e100 	.word	0xe000e100
 800baa4:	e000ed00 	.word	0xe000ed00

0800baa8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800baac:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <SysTick_Handler+0x1c>)
 800baae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bab0:	f001 fd28 	bl	800d504 <xTaskGetSchedulerState>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d001      	beq.n	800babe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800baba:	f002 fb0d 	bl	800e0d8 <xPortSysTickHandler>
  }
}
 800babe:	bf00      	nop
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	e000e010 	.word	0xe000e010

0800bac8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bacc:	2100      	movs	r1, #0
 800bace:	f06f 0004 	mvn.w	r0, #4
 800bad2:	f7ff ffbf 	bl	800ba54 <__NVIC_SetPriority>
#endif
}
 800bad6:	bf00      	nop
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bae2:	f3ef 8305 	mrs	r3, IPSR
 800bae6:	603b      	str	r3, [r7, #0]
  return(result);
 800bae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800baee:	f06f 0305 	mvn.w	r3, #5
 800baf2:	607b      	str	r3, [r7, #4]
 800baf4:	e00c      	b.n	800bb10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800baf6:	4b0a      	ldr	r3, [pc, #40]	; (800bb20 <osKernelInitialize+0x44>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d105      	bne.n	800bb0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bafe:	4b08      	ldr	r3, [pc, #32]	; (800bb20 <osKernelInitialize+0x44>)
 800bb00:	2201      	movs	r2, #1
 800bb02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	607b      	str	r3, [r7, #4]
 800bb08:	e002      	b.n	800bb10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bb0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb10:	687b      	ldr	r3, [r7, #4]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	200008a8 	.word	0x200008a8

0800bb24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb2a:	f3ef 8305 	mrs	r3, IPSR
 800bb2e:	603b      	str	r3, [r7, #0]
  return(result);
 800bb30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d003      	beq.n	800bb3e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bb36:	f06f 0305 	mvn.w	r3, #5
 800bb3a:	607b      	str	r3, [r7, #4]
 800bb3c:	e010      	b.n	800bb60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bb3e:	4b0b      	ldr	r3, [pc, #44]	; (800bb6c <osKernelStart+0x48>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d109      	bne.n	800bb5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb46:	f7ff ffbf 	bl	800bac8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bb4a:	4b08      	ldr	r3, [pc, #32]	; (800bb6c <osKernelStart+0x48>)
 800bb4c:	2202      	movs	r2, #2
 800bb4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb50:	f001 f87c 	bl	800cc4c <vTaskStartScheduler>
      stat = osOK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	607b      	str	r3, [r7, #4]
 800bb58:	e002      	b.n	800bb60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb60:	687b      	ldr	r3, [r7, #4]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	200008a8 	.word	0x200008a8

0800bb70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08e      	sub	sp, #56	; 0x38
 800bb74:	af04      	add	r7, sp, #16
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb80:	f3ef 8305 	mrs	r3, IPSR
 800bb84:	617b      	str	r3, [r7, #20]
  return(result);
 800bb86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d17e      	bne.n	800bc8a <osThreadNew+0x11a>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d07b      	beq.n	800bc8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb92:	2380      	movs	r3, #128	; 0x80
 800bb94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb96:	2318      	movs	r3, #24
 800bb98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bba2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d045      	beq.n	800bc36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <osThreadNew+0x48>
        name = attr->name;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d008      	beq.n	800bbde <osThreadNew+0x6e>
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	2b38      	cmp	r3, #56	; 0x38
 800bbd0:	d805      	bhi.n	800bbde <osThreadNew+0x6e>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <osThreadNew+0x72>
        return (NULL);
 800bbde:	2300      	movs	r3, #0
 800bbe0:	e054      	b.n	800bc8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	089b      	lsrs	r3, r3, #2
 800bbf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00e      	beq.n	800bc18 <osThreadNew+0xa8>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	2bbb      	cmp	r3, #187	; 0xbb
 800bc00:	d90a      	bls.n	800bc18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d006      	beq.n	800bc18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	695b      	ldr	r3, [r3, #20]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <osThreadNew+0xa8>
        mem = 1;
 800bc12:	2301      	movs	r3, #1
 800bc14:	61bb      	str	r3, [r7, #24]
 800bc16:	e010      	b.n	800bc3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10c      	bne.n	800bc3a <osThreadNew+0xca>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d108      	bne.n	800bc3a <osThreadNew+0xca>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d104      	bne.n	800bc3a <osThreadNew+0xca>
          mem = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	61bb      	str	r3, [r7, #24]
 800bc34:	e001      	b.n	800bc3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d110      	bne.n	800bc62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc48:	9202      	str	r2, [sp, #8]
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	6a3a      	ldr	r2, [r7, #32]
 800bc54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 fe0c 	bl	800c874 <xTaskCreateStatic>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	613b      	str	r3, [r7, #16]
 800bc60:	e013      	b.n	800bc8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d110      	bne.n	800bc8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	f107 0310 	add.w	r3, r7, #16
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 fe57 	bl	800c92e <xTaskCreate>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d001      	beq.n	800bc8a <osThreadNew+0x11a>
            hTask = NULL;
 800bc86:	2300      	movs	r3, #0
 800bc88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bc8a:	693b      	ldr	r3, [r7, #16]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3728      	adds	r7, #40	; 0x28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc9c:	f3ef 8305 	mrs	r3, IPSR
 800bca0:	60bb      	str	r3, [r7, #8]
  return(result);
 800bca2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d003      	beq.n	800bcb0 <osDelay+0x1c>
    stat = osErrorISR;
 800bca8:	f06f 0305 	mvn.w	r3, #5
 800bcac:	60fb      	str	r3, [r7, #12]
 800bcae:	e007      	b.n	800bcc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 ff92 	bl	800cbe4 <vTaskDelay>
    }
  }

  return (stat);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	4a07      	ldr	r2, [pc, #28]	; (800bcf8 <vApplicationGetIdleTaskMemory+0x2c>)
 800bcdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	4a06      	ldr	r2, [pc, #24]	; (800bcfc <vApplicationGetIdleTaskMemory+0x30>)
 800bce2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2280      	movs	r2, #128	; 0x80
 800bce8:	601a      	str	r2, [r3, #0]
}
 800bcea:	bf00      	nop
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	200008ac 	.word	0x200008ac
 800bcfc:	20000968 	.word	0x20000968

0800bd00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	4a07      	ldr	r2, [pc, #28]	; (800bd2c <vApplicationGetTimerTaskMemory+0x2c>)
 800bd10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	4a06      	ldr	r2, [pc, #24]	; (800bd30 <vApplicationGetTimerTaskMemory+0x30>)
 800bd16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd1e:	601a      	str	r2, [r3, #0]
}
 800bd20:	bf00      	nop
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	20000b68 	.word	0x20000b68
 800bd30:	20000c24 	.word	0x20000c24

0800bd34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f103 0208 	add.w	r2, r3, #8
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f103 0208 	add.w	r2, r3, #8
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f103 0208 	add.w	r2, r3, #8
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	1c5a      	adds	r2, r3, #1
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	601a      	str	r2, [r3, #0]
}
 800bdca:	bf00      	nop
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b085      	sub	sp, #20
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdec:	d103      	bne.n	800bdf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	60fb      	str	r3, [r7, #12]
 800bdf4:	e00c      	b.n	800be10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	3308      	adds	r3, #8
 800bdfa:	60fb      	str	r3, [r7, #12]
 800bdfc:	e002      	b.n	800be04 <vListInsert+0x2e>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	60fb      	str	r3, [r7, #12]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d2f6      	bcs.n	800bdfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	685a      	ldr	r2, [r3, #4]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	601a      	str	r2, [r3, #0]
}
 800be3c:	bf00      	nop
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	6892      	ldr	r2, [r2, #8]
 800be5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	6852      	ldr	r2, [r2, #4]
 800be68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	429a      	cmp	r2, r3
 800be72:	d103      	bne.n	800be7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	689a      	ldr	r2, [r3, #8]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	1e5a      	subs	r2, r3, #1
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800beb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bec6:	f002 f875 	bl	800dfb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed2:	68f9      	ldr	r1, [r7, #12]
 800bed4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bed6:	fb01 f303 	mul.w	r3, r1, r3
 800beda:	441a      	add	r2, r3
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bef6:	3b01      	subs	r3, #1
 800bef8:	68f9      	ldr	r1, [r7, #12]
 800befa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800befc:	fb01 f303 	mul.w	r3, r1, r3
 800bf00:	441a      	add	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	22ff      	movs	r2, #255	; 0xff
 800bf0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	22ff      	movs	r2, #255	; 0xff
 800bf12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d114      	bne.n	800bf46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01a      	beq.n	800bf5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	3310      	adds	r3, #16
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f001 f929 	bl	800d180 <xTaskRemoveFromEventList>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d012      	beq.n	800bf5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf34:	4b0c      	ldr	r3, [pc, #48]	; (800bf68 <xQueueGenericReset+0xcc>)
 800bf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	e009      	b.n	800bf5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3310      	adds	r3, #16
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7ff fef2 	bl	800bd34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3324      	adds	r3, #36	; 0x24
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff feed 	bl	800bd34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf5a:	f002 f85b 	bl	800e014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf5e:	2301      	movs	r3, #1
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	e000ed04 	.word	0xe000ed04

0800bf6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08e      	sub	sp, #56	; 0x38
 800bf70:	af02      	add	r7, sp, #8
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
 800bf78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10a      	bne.n	800bf96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bf80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10a      	bne.n	800bfb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bf9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfae:	bf00      	nop
 800bfb0:	e7fe      	b.n	800bfb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <xQueueGenericCreateStatic+0x52>
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <xQueueGenericCreateStatic+0x56>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e000      	b.n	800bfc4 <xQueueGenericCreateStatic+0x58>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10a      	bne.n	800bfde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bfc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bfcc:	f383 8811 	msr	BASEPRI, r3
 800bfd0:	f3bf 8f6f 	isb	sy
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	623b      	str	r3, [r7, #32]
}
 800bfda:	bf00      	nop
 800bfdc:	e7fe      	b.n	800bfdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d102      	bne.n	800bfea <xQueueGenericCreateStatic+0x7e>
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d101      	bne.n	800bfee <xQueueGenericCreateStatic+0x82>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e000      	b.n	800bff0 <xQueueGenericCreateStatic+0x84>
 800bfee:	2300      	movs	r3, #0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10a      	bne.n	800c00a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bff4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	61fb      	str	r3, [r7, #28]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c00a:	2350      	movs	r3, #80	; 0x50
 800c00c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	2b50      	cmp	r3, #80	; 0x50
 800c012:	d00a      	beq.n	800c02a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c014:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	61bb      	str	r3, [r7, #24]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c02a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00d      	beq.n	800c052 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	2201      	movs	r2, #1
 800c03a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c03e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	4613      	mov	r3, r2
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 f805 	bl	800c05c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c054:	4618      	mov	r0, r3
 800c056:	3730      	adds	r7, #48	; 0x30
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d103      	bne.n	800c078 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	69ba      	ldr	r2, [r7, #24]
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	e002      	b.n	800c07e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c08a:	2101      	movs	r1, #1
 800c08c:	69b8      	ldr	r0, [r7, #24]
 800c08e:	f7ff ff05 	bl	800be9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	78fa      	ldrb	r2, [r7, #3]
 800c096:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b08e      	sub	sp, #56	; 0x38
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
 800c0b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10a      	bne.n	800c0d6 <xQueueGenericSend+0x32>
	__asm volatile
 800c0c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d103      	bne.n	800c0e4 <xQueueGenericSend+0x40>
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d101      	bne.n	800c0e8 <xQueueGenericSend+0x44>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e000      	b.n	800c0ea <xQueueGenericSend+0x46>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <xQueueGenericSend+0x60>
	__asm volatile
 800c0ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c100:	bf00      	nop
 800c102:	e7fe      	b.n	800c102 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b02      	cmp	r3, #2
 800c108:	d103      	bne.n	800c112 <xQueueGenericSend+0x6e>
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d101      	bne.n	800c116 <xQueueGenericSend+0x72>
 800c112:	2301      	movs	r3, #1
 800c114:	e000      	b.n	800c118 <xQueueGenericSend+0x74>
 800c116:	2300      	movs	r3, #0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10a      	bne.n	800c132 <xQueueGenericSend+0x8e>
	__asm volatile
 800c11c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	623b      	str	r3, [r7, #32]
}
 800c12e:	bf00      	nop
 800c130:	e7fe      	b.n	800c130 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c132:	f001 f9e7 	bl	800d504 <xTaskGetSchedulerState>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d102      	bne.n	800c142 <xQueueGenericSend+0x9e>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <xQueueGenericSend+0xa2>
 800c142:	2301      	movs	r3, #1
 800c144:	e000      	b.n	800c148 <xQueueGenericSend+0xa4>
 800c146:	2300      	movs	r3, #0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10a      	bne.n	800c162 <xQueueGenericSend+0xbe>
	__asm volatile
 800c14c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	61fb      	str	r3, [r7, #28]
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c162:	f001 ff27 	bl	800dfb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16e:	429a      	cmp	r2, r3
 800c170:	d302      	bcc.n	800c178 <xQueueGenericSend+0xd4>
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2b02      	cmp	r3, #2
 800c176:	d129      	bne.n	800c1cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c17e:	f000 fa0b 	bl	800c598 <prvCopyDataToQueue>
 800c182:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d010      	beq.n	800c1ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	3324      	adds	r3, #36	; 0x24
 800c190:	4618      	mov	r0, r3
 800c192:	f000 fff5 	bl	800d180 <xTaskRemoveFromEventList>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d013      	beq.n	800c1c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c19c:	4b3f      	ldr	r3, [pc, #252]	; (800c29c <xQueueGenericSend+0x1f8>)
 800c19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	e00a      	b.n	800c1c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d007      	beq.n	800c1c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1b4:	4b39      	ldr	r3, [pc, #228]	; (800c29c <xQueueGenericSend+0x1f8>)
 800c1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ba:	601a      	str	r2, [r3, #0]
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1c4:	f001 ff26 	bl	800e014 <vPortExitCritical>
				return pdPASS;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e063      	b.n	800c294 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d103      	bne.n	800c1da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1d2:	f001 ff1f 	bl	800e014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e05c      	b.n	800c294 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d106      	bne.n	800c1ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1e0:	f107 0314 	add.w	r3, r7, #20
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f001 f82f 	bl	800d248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1ee:	f001 ff11 	bl	800e014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1f2:	f000 fd9b 	bl	800cd2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1f6:	f001 fedd 	bl	800dfb4 <vPortEnterCritical>
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c200:	b25b      	sxtb	r3, r3
 800c202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c206:	d103      	bne.n	800c210 <xQueueGenericSend+0x16c>
 800c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c216:	b25b      	sxtb	r3, r3
 800c218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21c:	d103      	bne.n	800c226 <xQueueGenericSend+0x182>
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	2200      	movs	r2, #0
 800c222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c226:	f001 fef5 	bl	800e014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c22a:	1d3a      	adds	r2, r7, #4
 800c22c:	f107 0314 	add.w	r3, r7, #20
 800c230:	4611      	mov	r1, r2
 800c232:	4618      	mov	r0, r3
 800c234:	f001 f81e 	bl	800d274 <xTaskCheckForTimeOut>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d124      	bne.n	800c288 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c23e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c240:	f000 faa2 	bl	800c788 <prvIsQueueFull>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d018      	beq.n	800c27c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	3310      	adds	r3, #16
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	4611      	mov	r1, r2
 800c252:	4618      	mov	r0, r3
 800c254:	f000 ff44 	bl	800d0e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c25a:	f000 fa2d 	bl	800c6b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c25e:	f000 fd73 	bl	800cd48 <xTaskResumeAll>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	f47f af7c 	bne.w	800c162 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c26a:	4b0c      	ldr	r3, [pc, #48]	; (800c29c <xQueueGenericSend+0x1f8>)
 800c26c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c270:	601a      	str	r2, [r3, #0]
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	e772      	b.n	800c162 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c27c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c27e:	f000 fa1b 	bl	800c6b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c282:	f000 fd61 	bl	800cd48 <xTaskResumeAll>
 800c286:	e76c      	b.n	800c162 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c28a:	f000 fa15 	bl	800c6b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c28e:	f000 fd5b 	bl	800cd48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c292:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c294:	4618      	mov	r0, r3
 800c296:	3738      	adds	r7, #56	; 0x38
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	e000ed04 	.word	0xe000ed04

0800c2a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b090      	sub	sp, #64	; 0x40
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
 800c2ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10a      	bne.n	800c2ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c2b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2ca:	bf00      	nop
 800c2cc:	e7fe      	b.n	800c2cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d103      	bne.n	800c2dc <xQueueGenericSendFromISR+0x3c>
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <xQueueGenericSendFromISR+0x40>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e000      	b.n	800c2e2 <xQueueGenericSendFromISR+0x42>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10a      	bne.n	800c2fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c2e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d103      	bne.n	800c30a <xQueueGenericSendFromISR+0x6a>
 800c302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c306:	2b01      	cmp	r3, #1
 800c308:	d101      	bne.n	800c30e <xQueueGenericSendFromISR+0x6e>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e000      	b.n	800c310 <xQueueGenericSendFromISR+0x70>
 800c30e:	2300      	movs	r3, #0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10a      	bne.n	800c32a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c314:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	623b      	str	r3, [r7, #32]
}
 800c326:	bf00      	nop
 800c328:	e7fe      	b.n	800c328 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c32a:	f001 ff25 	bl	800e178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c32e:	f3ef 8211 	mrs	r2, BASEPRI
 800c332:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	61fa      	str	r2, [r7, #28]
 800c344:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c346:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c348:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c352:	429a      	cmp	r2, r3
 800c354:	d302      	bcc.n	800c35c <xQueueGenericSendFromISR+0xbc>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d12f      	bne.n	800c3bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c372:	f000 f911 	bl	800c598 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c376:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37e:	d112      	bne.n	800c3a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c384:	2b00      	cmp	r3, #0
 800c386:	d016      	beq.n	800c3b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	3324      	adds	r3, #36	; 0x24
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 fef7 	bl	800d180 <xTaskRemoveFromEventList>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00e      	beq.n	800c3b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00b      	beq.n	800c3b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	e007      	b.n	800c3b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	b25a      	sxtb	r2, r3
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c3ba:	e001      	b.n	800c3c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3740      	adds	r7, #64	; 0x40
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
	...

0800c3d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b08c      	sub	sp, #48	; 0x30
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10a      	bne.n	800c408 <xQueueReceive+0x30>
	__asm volatile
 800c3f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	623b      	str	r3, [r7, #32]
}
 800c404:	bf00      	nop
 800c406:	e7fe      	b.n	800c406 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d103      	bne.n	800c416 <xQueueReceive+0x3e>
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <xQueueReceive+0x42>
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <xQueueReceive+0x44>
 800c41a:	2300      	movs	r3, #0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <xQueueReceive+0x5e>
	__asm volatile
 800c420:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	61fb      	str	r3, [r7, #28]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c436:	f001 f865 	bl	800d504 <xTaskGetSchedulerState>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d102      	bne.n	800c446 <xQueueReceive+0x6e>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <xQueueReceive+0x72>
 800c446:	2301      	movs	r3, #1
 800c448:	e000      	b.n	800c44c <xQueueReceive+0x74>
 800c44a:	2300      	movs	r3, #0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10a      	bne.n	800c466 <xQueueReceive+0x8e>
	__asm volatile
 800c450:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	61bb      	str	r3, [r7, #24]
}
 800c462:	bf00      	nop
 800c464:	e7fe      	b.n	800c464 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c466:	f001 fda5 	bl	800dfb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	2b00      	cmp	r3, #0
 800c474:	d01f      	beq.n	800c4b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c476:	68b9      	ldr	r1, [r7, #8]
 800c478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c47a:	f000 f8f7 	bl	800c66c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	1e5a      	subs	r2, r3, #1
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00f      	beq.n	800c4ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c490:	3310      	adds	r3, #16
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fe74 	bl	800d180 <xTaskRemoveFromEventList>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d007      	beq.n	800c4ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c49e:	4b3d      	ldr	r3, [pc, #244]	; (800c594 <xQueueReceive+0x1bc>)
 800c4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4ae:	f001 fdb1 	bl	800e014 <vPortExitCritical>
				return pdPASS;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e069      	b.n	800c58a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d103      	bne.n	800c4c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4bc:	f001 fdaa 	bl	800e014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e062      	b.n	800c58a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d106      	bne.n	800c4d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4ca:	f107 0310 	add.w	r3, r7, #16
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 feba 	bl	800d248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4d8:	f001 fd9c 	bl	800e014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4dc:	f000 fc26 	bl	800cd2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4e0:	f001 fd68 	bl	800dfb4 <vPortEnterCritical>
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4ea:	b25b      	sxtb	r3, r3
 800c4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f0:	d103      	bne.n	800c4fa <xQueueReceive+0x122>
 800c4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c500:	b25b      	sxtb	r3, r3
 800c502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c506:	d103      	bne.n	800c510 <xQueueReceive+0x138>
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c510:	f001 fd80 	bl	800e014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c514:	1d3a      	adds	r2, r7, #4
 800c516:	f107 0310 	add.w	r3, r7, #16
 800c51a:	4611      	mov	r1, r2
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 fea9 	bl	800d274 <xTaskCheckForTimeOut>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d123      	bne.n	800c570 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c52a:	f000 f917 	bl	800c75c <prvIsQueueEmpty>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d017      	beq.n	800c564 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c536:	3324      	adds	r3, #36	; 0x24
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	4611      	mov	r1, r2
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 fdcf 	bl	800d0e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c544:	f000 f8b8 	bl	800c6b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c548:	f000 fbfe 	bl	800cd48 <xTaskResumeAll>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d189      	bne.n	800c466 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c552:	4b10      	ldr	r3, [pc, #64]	; (800c594 <xQueueReceive+0x1bc>)
 800c554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	e780      	b.n	800c466 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c566:	f000 f8a7 	bl	800c6b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c56a:	f000 fbed 	bl	800cd48 <xTaskResumeAll>
 800c56e:	e77a      	b.n	800c466 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c572:	f000 f8a1 	bl	800c6b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c576:	f000 fbe7 	bl	800cd48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c57a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c57c:	f000 f8ee 	bl	800c75c <prvIsQueueEmpty>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	f43f af6f 	beq.w	800c466 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c588:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3730      	adds	r7, #48	; 0x30
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	e000ed04 	.word	0xe000ed04

0800c598 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d10d      	bne.n	800c5d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d14d      	bne.n	800c65a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f000 ffbc 	bl	800d540 <xTaskPriorityDisinherit>
 800c5c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	609a      	str	r2, [r3, #8]
 800c5d0:	e043      	b.n	800c65a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d119      	bne.n	800c60c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6858      	ldr	r0, [r3, #4]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	f002 f9fa 	bl	800e9dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f0:	441a      	add	r2, r3
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d32b      	bcc.n	800c65a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	605a      	str	r2, [r3, #4]
 800c60a:	e026      	b.n	800c65a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	68d8      	ldr	r0, [r3, #12]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c614:	461a      	mov	r2, r3
 800c616:	68b9      	ldr	r1, [r7, #8]
 800c618:	f002 f9e0 	bl	800e9dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	68da      	ldr	r2, [r3, #12]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c624:	425b      	negs	r3, r3
 800c626:	441a      	add	r2, r3
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	68da      	ldr	r2, [r3, #12]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d207      	bcs.n	800c648 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	689a      	ldr	r2, [r3, #8]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c640:	425b      	negs	r3, r3
 800c642:	441a      	add	r2, r3
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d105      	bne.n	800c65a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d002      	beq.n	800c65a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	3b01      	subs	r3, #1
 800c658:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c662:	697b      	ldr	r3, [r7, #20]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3718      	adds	r7, #24
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d018      	beq.n	800c6b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68da      	ldr	r2, [r3, #12]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c686:	441a      	add	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	429a      	cmp	r2, r3
 800c696:	d303      	bcc.n	800c6a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	68d9      	ldr	r1, [r3, #12]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	6838      	ldr	r0, [r7, #0]
 800c6ac:	f002 f996 	bl	800e9dc <memcpy>
	}
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6c0:	f001 fc78 	bl	800dfb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6cc:	e011      	b.n	800c6f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d012      	beq.n	800c6fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3324      	adds	r3, #36	; 0x24
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fd50 	bl	800d180 <xTaskRemoveFromEventList>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6e6:	f000 fe27 	bl	800d338 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dce9      	bgt.n	800c6ce <prvUnlockQueue+0x16>
 800c6fa:	e000      	b.n	800c6fe <prvUnlockQueue+0x46>
					break;
 800c6fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	22ff      	movs	r2, #255	; 0xff
 800c702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c706:	f001 fc85 	bl	800e014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c70a:	f001 fc53 	bl	800dfb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c714:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c716:	e011      	b.n	800c73c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d012      	beq.n	800c746 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3310      	adds	r3, #16
 800c724:	4618      	mov	r0, r3
 800c726:	f000 fd2b 	bl	800d180 <xTaskRemoveFromEventList>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d001      	beq.n	800c734 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c730:	f000 fe02 	bl	800d338 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	3b01      	subs	r3, #1
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c73c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c740:	2b00      	cmp	r3, #0
 800c742:	dce9      	bgt.n	800c718 <prvUnlockQueue+0x60>
 800c744:	e000      	b.n	800c748 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c746:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	22ff      	movs	r2, #255	; 0xff
 800c74c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c750:	f001 fc60 	bl	800e014 <vPortExitCritical>
}
 800c754:	bf00      	nop
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c764:	f001 fc26 	bl	800dfb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d102      	bne.n	800c776 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c770:	2301      	movs	r3, #1
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	e001      	b.n	800c77a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c77a:	f001 fc4b 	bl	800e014 <vPortExitCritical>

	return xReturn;
 800c77e:	68fb      	ldr	r3, [r7, #12]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c790:	f001 fc10 	bl	800dfb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d102      	bne.n	800c7a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e001      	b.n	800c7aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7aa:	f001 fc33 	bl	800e014 <vPortExitCritical>

	return xReturn;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]
 800c7c6:	e014      	b.n	800c7f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c7c8:	4a0f      	ldr	r2, [pc, #60]	; (800c808 <vQueueAddToRegistry+0x50>)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10b      	bne.n	800c7ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c7d4:	490c      	ldr	r1, [pc, #48]	; (800c808 <vQueueAddToRegistry+0x50>)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7de:	4a0a      	ldr	r2, [pc, #40]	; (800c808 <vQueueAddToRegistry+0x50>)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	00db      	lsls	r3, r3, #3
 800c7e4:	4413      	add	r3, r2
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c7ea:	e006      	b.n	800c7fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2b07      	cmp	r3, #7
 800c7f6:	d9e7      	bls.n	800c7c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c7f8:	bf00      	nop
 800c7fa:	bf00      	nop
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	20001024 	.word	0x20001024

0800c80c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c81c:	f001 fbca 	bl	800dfb4 <vPortEnterCritical>
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c826:	b25b      	sxtb	r3, r3
 800c828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82c:	d103      	bne.n	800c836 <vQueueWaitForMessageRestricted+0x2a>
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c83c:	b25b      	sxtb	r3, r3
 800c83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c842:	d103      	bne.n	800c84c <vQueueWaitForMessageRestricted+0x40>
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c84c:	f001 fbe2 	bl	800e014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c854:	2b00      	cmp	r3, #0
 800c856:	d106      	bne.n	800c866 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	3324      	adds	r3, #36	; 0x24
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	68b9      	ldr	r1, [r7, #8]
 800c860:	4618      	mov	r0, r3
 800c862:	f000 fc61 	bl	800d128 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c866:	6978      	ldr	r0, [r7, #20]
 800c868:	f7ff ff26 	bl	800c6b8 <prvUnlockQueue>
	}
 800c86c:	bf00      	nop
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08e      	sub	sp, #56	; 0x38
 800c878:	af04      	add	r7, sp, #16
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c888:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	623b      	str	r3, [r7, #32]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10a      	bne.n	800c8ba <xTaskCreateStatic+0x46>
	__asm volatile
 800c8a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	61fb      	str	r3, [r7, #28]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8ba:	23bc      	movs	r3, #188	; 0xbc
 800c8bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2bbc      	cmp	r3, #188	; 0xbc
 800c8c2:	d00a      	beq.n	800c8da <xTaskCreateStatic+0x66>
	__asm volatile
 800c8c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	61bb      	str	r3, [r7, #24]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d01e      	beq.n	800c920 <xTaskCreateStatic+0xac>
 800c8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d01b      	beq.n	800c920 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	2202      	movs	r2, #2
 800c8f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	9303      	str	r3, [sp, #12]
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	9302      	str	r3, [sp, #8]
 800c902:	f107 0314 	add.w	r3, r7, #20
 800c906:	9301      	str	r3, [sp, #4]
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	68b9      	ldr	r1, [r7, #8]
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f000 f850 	bl	800c9b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c91a:	f000 f8f3 	bl	800cb04 <prvAddNewTaskToReadyList>
 800c91e:	e001      	b.n	800c924 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c920:	2300      	movs	r3, #0
 800c922:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c924:	697b      	ldr	r3, [r7, #20]
	}
 800c926:	4618      	mov	r0, r3
 800c928:	3728      	adds	r7, #40	; 0x28
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b08c      	sub	sp, #48	; 0x30
 800c932:	af04      	add	r7, sp, #16
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	60b9      	str	r1, [r7, #8]
 800c938:	603b      	str	r3, [r7, #0]
 800c93a:	4613      	mov	r3, r2
 800c93c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c93e:	88fb      	ldrh	r3, [r7, #6]
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4618      	mov	r0, r3
 800c944:	f001 fc58 	bl	800e1f8 <pvPortMalloc>
 800c948:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00e      	beq.n	800c96e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c950:	20bc      	movs	r0, #188	; 0xbc
 800c952:	f001 fc51 	bl	800e1f8 <pvPortMalloc>
 800c956:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d003      	beq.n	800c966 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	631a      	str	r2, [r3, #48]	; 0x30
 800c964:	e005      	b.n	800c972 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c966:	6978      	ldr	r0, [r7, #20]
 800c968:	f001 fd12 	bl	800e390 <vPortFree>
 800c96c:	e001      	b.n	800c972 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c96e:	2300      	movs	r3, #0
 800c970:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d017      	beq.n	800c9a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c980:	88fa      	ldrh	r2, [r7, #6]
 800c982:	2300      	movs	r3, #0
 800c984:	9303      	str	r3, [sp, #12]
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	9302      	str	r3, [sp, #8]
 800c98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	68b9      	ldr	r1, [r7, #8]
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 f80e 	bl	800c9b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c99c:	69f8      	ldr	r0, [r7, #28]
 800c99e:	f000 f8b1 	bl	800cb04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	61bb      	str	r3, [r7, #24]
 800c9a6:	e002      	b.n	800c9ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c9ae:	69bb      	ldr	r3, [r7, #24]
	}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3720      	adds	r7, #32
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	21a5      	movs	r1, #165	; 0xa5
 800c9d2:	f002 f82b 	bl	800ea2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4413      	add	r3, r2
 800c9e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	f023 0307 	bic.w	r3, r3, #7
 800c9ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	f003 0307 	and.w	r3, r3, #7
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00a      	beq.n	800ca10 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c9fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	617b      	str	r3, [r7, #20]
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d01f      	beq.n	800ca56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca16:	2300      	movs	r3, #0
 800ca18:	61fb      	str	r3, [r7, #28]
 800ca1a:	e012      	b.n	800ca42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	4413      	add	r3, r2
 800ca22:	7819      	ldrb	r1, [r3, #0]
 800ca24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	4413      	add	r3, r2
 800ca2a:	3334      	adds	r3, #52	; 0x34
 800ca2c:	460a      	mov	r2, r1
 800ca2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	4413      	add	r3, r2
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d006      	beq.n	800ca4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	61fb      	str	r3, [r7, #28]
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	2b0f      	cmp	r3, #15
 800ca46:	d9e9      	bls.n	800ca1c <prvInitialiseNewTask+0x64>
 800ca48:	e000      	b.n	800ca4c <prvInitialiseNewTask+0x94>
			{
				break;
 800ca4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca54:	e003      	b.n	800ca5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca60:	2b37      	cmp	r3, #55	; 0x37
 800ca62:	d901      	bls.n	800ca68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca64:	2337      	movs	r3, #55	; 0x37
 800ca66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca76:	2200      	movs	r2, #0
 800ca78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7ff f978 	bl	800bd74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca86:	3318      	adds	r3, #24
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff f973 	bl	800bd74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	2200      	movs	r2, #0
 800caa8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800caac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caae:	2200      	movs	r2, #0
 800cab0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab6:	3354      	adds	r3, #84	; 0x54
 800cab8:	2260      	movs	r2, #96	; 0x60
 800caba:	2100      	movs	r1, #0
 800cabc:	4618      	mov	r0, r3
 800cabe:	f001 ffb5 	bl	800ea2c <memset>
 800cac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac4:	4a0c      	ldr	r2, [pc, #48]	; (800caf8 <prvInitialiseNewTask+0x140>)
 800cac6:	659a      	str	r2, [r3, #88]	; 0x58
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	4a0c      	ldr	r2, [pc, #48]	; (800cafc <prvInitialiseNewTask+0x144>)
 800cacc:	65da      	str	r2, [r3, #92]	; 0x5c
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	4a0b      	ldr	r2, [pc, #44]	; (800cb00 <prvInitialiseNewTask+0x148>)
 800cad2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	68f9      	ldr	r1, [r7, #12]
 800cad8:	69b8      	ldr	r0, [r7, #24]
 800cada:	f001 f941 	bl	800dd60 <pxPortInitialiseStack>
 800cade:	4602      	mov	r2, r0
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d002      	beq.n	800caf0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caf0:	bf00      	nop
 800caf2:	3720      	adds	r7, #32
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	08011498 	.word	0x08011498
 800cafc:	080114b8 	.word	0x080114b8
 800cb00:	08011478 	.word	0x08011478

0800cb04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb0c:	f001 fa52 	bl	800dfb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb10:	4b2d      	ldr	r3, [pc, #180]	; (800cbc8 <prvAddNewTaskToReadyList+0xc4>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	3301      	adds	r3, #1
 800cb16:	4a2c      	ldr	r2, [pc, #176]	; (800cbc8 <prvAddNewTaskToReadyList+0xc4>)
 800cb18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb1a:	4b2c      	ldr	r3, [pc, #176]	; (800cbcc <prvAddNewTaskToReadyList+0xc8>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d109      	bne.n	800cb36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb22:	4a2a      	ldr	r2, [pc, #168]	; (800cbcc <prvAddNewTaskToReadyList+0xc8>)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb28:	4b27      	ldr	r3, [pc, #156]	; (800cbc8 <prvAddNewTaskToReadyList+0xc4>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d110      	bne.n	800cb52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb30:	f000 fc26 	bl	800d380 <prvInitialiseTaskLists>
 800cb34:	e00d      	b.n	800cb52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb36:	4b26      	ldr	r3, [pc, #152]	; (800cbd0 <prvAddNewTaskToReadyList+0xcc>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d109      	bne.n	800cb52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb3e:	4b23      	ldr	r3, [pc, #140]	; (800cbcc <prvAddNewTaskToReadyList+0xc8>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d802      	bhi.n	800cb52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb4c:	4a1f      	ldr	r2, [pc, #124]	; (800cbcc <prvAddNewTaskToReadyList+0xc8>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb52:	4b20      	ldr	r3, [pc, #128]	; (800cbd4 <prvAddNewTaskToReadyList+0xd0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	3301      	adds	r3, #1
 800cb58:	4a1e      	ldr	r2, [pc, #120]	; (800cbd4 <prvAddNewTaskToReadyList+0xd0>)
 800cb5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb5c:	4b1d      	ldr	r3, [pc, #116]	; (800cbd4 <prvAddNewTaskToReadyList+0xd0>)
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb68:	4b1b      	ldr	r3, [pc, #108]	; (800cbd8 <prvAddNewTaskToReadyList+0xd4>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d903      	bls.n	800cb78 <prvAddNewTaskToReadyList+0x74>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb74:	4a18      	ldr	r2, [pc, #96]	; (800cbd8 <prvAddNewTaskToReadyList+0xd4>)
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	4413      	add	r3, r2
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4a15      	ldr	r2, [pc, #84]	; (800cbdc <prvAddNewTaskToReadyList+0xd8>)
 800cb86:	441a      	add	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4610      	mov	r0, r2
 800cb90:	f7ff f8fd 	bl	800bd8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb94:	f001 fa3e 	bl	800e014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb98:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <prvAddNewTaskToReadyList+0xcc>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00e      	beq.n	800cbbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cba0:	4b0a      	ldr	r3, [pc, #40]	; (800cbcc <prvAddNewTaskToReadyList+0xc8>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d207      	bcs.n	800cbbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cbae:	4b0c      	ldr	r3, [pc, #48]	; (800cbe0 <prvAddNewTaskToReadyList+0xdc>)
 800cbb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbbe:	bf00      	nop
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20001538 	.word	0x20001538
 800cbcc:	20001064 	.word	0x20001064
 800cbd0:	20001544 	.word	0x20001544
 800cbd4:	20001554 	.word	0x20001554
 800cbd8:	20001540 	.word	0x20001540
 800cbdc:	20001068 	.word	0x20001068
 800cbe0:	e000ed04 	.word	0xe000ed04

0800cbe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cbec:	2300      	movs	r3, #0
 800cbee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d017      	beq.n	800cc26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cbf6:	4b13      	ldr	r3, [pc, #76]	; (800cc44 <vTaskDelay+0x60>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00a      	beq.n	800cc14 <vTaskDelay+0x30>
	__asm volatile
 800cbfe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	60bb      	str	r3, [r7, #8]
}
 800cc10:	bf00      	nop
 800cc12:	e7fe      	b.n	800cc12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc14:	f000 f88a 	bl	800cd2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc18:	2100      	movs	r1, #0
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fcfe 	bl	800d61c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc20:	f000 f892 	bl	800cd48 <xTaskResumeAll>
 800cc24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d107      	bne.n	800cc3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc2c:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <vTaskDelay+0x64>)
 800cc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc3c:	bf00      	nop
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	20001560 	.word	0x20001560
 800cc48:	e000ed04 	.word	0xe000ed04

0800cc4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08a      	sub	sp, #40	; 0x28
 800cc50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc5a:	463a      	mov	r2, r7
 800cc5c:	1d39      	adds	r1, r7, #4
 800cc5e:	f107 0308 	add.w	r3, r7, #8
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff f832 	bl	800bccc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	9202      	str	r2, [sp, #8]
 800cc70:	9301      	str	r3, [sp, #4]
 800cc72:	2300      	movs	r3, #0
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	2300      	movs	r3, #0
 800cc78:	460a      	mov	r2, r1
 800cc7a:	4924      	ldr	r1, [pc, #144]	; (800cd0c <vTaskStartScheduler+0xc0>)
 800cc7c:	4824      	ldr	r0, [pc, #144]	; (800cd10 <vTaskStartScheduler+0xc4>)
 800cc7e:	f7ff fdf9 	bl	800c874 <xTaskCreateStatic>
 800cc82:	4603      	mov	r3, r0
 800cc84:	4a23      	ldr	r2, [pc, #140]	; (800cd14 <vTaskStartScheduler+0xc8>)
 800cc86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc88:	4b22      	ldr	r3, [pc, #136]	; (800cd14 <vTaskStartScheduler+0xc8>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc90:	2301      	movs	r3, #1
 800cc92:	617b      	str	r3, [r7, #20]
 800cc94:	e001      	b.n	800cc9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc96:	2300      	movs	r3, #0
 800cc98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d102      	bne.n	800cca6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cca0:	f000 fd10 	bl	800d6c4 <xTimerCreateTimerTask>
 800cca4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d11b      	bne.n	800cce4 <vTaskStartScheduler+0x98>
	__asm volatile
 800ccac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	613b      	str	r3, [r7, #16]
}
 800ccbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccc0:	4b15      	ldr	r3, [pc, #84]	; (800cd18 <vTaskStartScheduler+0xcc>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	3354      	adds	r3, #84	; 0x54
 800ccc6:	4a15      	ldr	r2, [pc, #84]	; (800cd1c <vTaskStartScheduler+0xd0>)
 800ccc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccca:	4b15      	ldr	r3, [pc, #84]	; (800cd20 <vTaskStartScheduler+0xd4>)
 800cccc:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccd2:	4b14      	ldr	r3, [pc, #80]	; (800cd24 <vTaskStartScheduler+0xd8>)
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ccd8:	4b13      	ldr	r3, [pc, #76]	; (800cd28 <vTaskStartScheduler+0xdc>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccde:	f001 f8c7 	bl	800de70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cce2:	e00e      	b.n	800cd02 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccea:	d10a      	bne.n	800cd02 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ccec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	60fb      	str	r3, [r7, #12]
}
 800ccfe:	bf00      	nop
 800cd00:	e7fe      	b.n	800cd00 <vTaskStartScheduler+0xb4>
}
 800cd02:	bf00      	nop
 800cd04:	3718      	adds	r7, #24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	08010a5c 	.word	0x08010a5c
 800cd10:	0800d351 	.word	0x0800d351
 800cd14:	2000155c 	.word	0x2000155c
 800cd18:	20001064 	.word	0x20001064
 800cd1c:	20000454 	.word	0x20000454
 800cd20:	20001558 	.word	0x20001558
 800cd24:	20001544 	.word	0x20001544
 800cd28:	2000153c 	.word	0x2000153c

0800cd2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd30:	4b04      	ldr	r3, [pc, #16]	; (800cd44 <vTaskSuspendAll+0x18>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	3301      	adds	r3, #1
 800cd36:	4a03      	ldr	r2, [pc, #12]	; (800cd44 <vTaskSuspendAll+0x18>)
 800cd38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd3a:	bf00      	nop
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr
 800cd44:	20001560 	.word	0x20001560

0800cd48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd52:	2300      	movs	r3, #0
 800cd54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd56:	4b42      	ldr	r3, [pc, #264]	; (800ce60 <xTaskResumeAll+0x118>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10a      	bne.n	800cd74 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	603b      	str	r3, [r7, #0]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd74:	f001 f91e 	bl	800dfb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd78:	4b39      	ldr	r3, [pc, #228]	; (800ce60 <xTaskResumeAll+0x118>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	4a38      	ldr	r2, [pc, #224]	; (800ce60 <xTaskResumeAll+0x118>)
 800cd80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd82:	4b37      	ldr	r3, [pc, #220]	; (800ce60 <xTaskResumeAll+0x118>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d162      	bne.n	800ce50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd8a:	4b36      	ldr	r3, [pc, #216]	; (800ce64 <xTaskResumeAll+0x11c>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d05e      	beq.n	800ce50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd92:	e02f      	b.n	800cdf4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd94:	4b34      	ldr	r3, [pc, #208]	; (800ce68 <xTaskResumeAll+0x120>)
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3318      	adds	r3, #24
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff f851 	bl	800be48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff f84c 	bl	800be48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb4:	4b2d      	ldr	r3, [pc, #180]	; (800ce6c <xTaskResumeAll+0x124>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d903      	bls.n	800cdc4 <xTaskResumeAll+0x7c>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	4a2a      	ldr	r2, [pc, #168]	; (800ce6c <xTaskResumeAll+0x124>)
 800cdc2:	6013      	str	r3, [r2, #0]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc8:	4613      	mov	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4a27      	ldr	r2, [pc, #156]	; (800ce70 <xTaskResumeAll+0x128>)
 800cdd2:	441a      	add	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	4619      	mov	r1, r3
 800cdda:	4610      	mov	r0, r2
 800cddc:	f7fe ffd7 	bl	800bd8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde4:	4b23      	ldr	r3, [pc, #140]	; (800ce74 <xTaskResumeAll+0x12c>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d302      	bcc.n	800cdf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cdee:	4b22      	ldr	r3, [pc, #136]	; (800ce78 <xTaskResumeAll+0x130>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdf4:	4b1c      	ldr	r3, [pc, #112]	; (800ce68 <xTaskResumeAll+0x120>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1cb      	bne.n	800cd94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce02:	f000 fb5f 	bl	800d4c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce06:	4b1d      	ldr	r3, [pc, #116]	; (800ce7c <xTaskResumeAll+0x134>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d010      	beq.n	800ce34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce12:	f000 f847 	bl	800cea4 <xTaskIncrementTick>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d002      	beq.n	800ce22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce1c:	4b16      	ldr	r3, [pc, #88]	; (800ce78 <xTaskResumeAll+0x130>)
 800ce1e:	2201      	movs	r2, #1
 800ce20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1f1      	bne.n	800ce12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce2e:	4b13      	ldr	r3, [pc, #76]	; (800ce7c <xTaskResumeAll+0x134>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce34:	4b10      	ldr	r3, [pc, #64]	; (800ce78 <xTaskResumeAll+0x130>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d009      	beq.n	800ce50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce40:	4b0f      	ldr	r3, [pc, #60]	; (800ce80 <xTaskResumeAll+0x138>)
 800ce42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce50:	f001 f8e0 	bl	800e014 <vPortExitCritical>

	return xAlreadyYielded;
 800ce54:	68bb      	ldr	r3, [r7, #8]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	20001560 	.word	0x20001560
 800ce64:	20001538 	.word	0x20001538
 800ce68:	200014f8 	.word	0x200014f8
 800ce6c:	20001540 	.word	0x20001540
 800ce70:	20001068 	.word	0x20001068
 800ce74:	20001064 	.word	0x20001064
 800ce78:	2000154c 	.word	0x2000154c
 800ce7c:	20001548 	.word	0x20001548
 800ce80:	e000ed04 	.word	0xe000ed04

0800ce84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <xTaskGetTickCount+0x1c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce90:	687b      	ldr	r3, [r7, #4]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	370c      	adds	r7, #12
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	2000153c 	.word	0x2000153c

0800cea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceae:	4b4f      	ldr	r3, [pc, #316]	; (800cfec <xTaskIncrementTick+0x148>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f040 808f 	bne.w	800cfd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ceb8:	4b4d      	ldr	r3, [pc, #308]	; (800cff0 <xTaskIncrementTick+0x14c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3301      	adds	r3, #1
 800cebe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cec0:	4a4b      	ldr	r2, [pc, #300]	; (800cff0 <xTaskIncrementTick+0x14c>)
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d120      	bne.n	800cf0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cecc:	4b49      	ldr	r3, [pc, #292]	; (800cff4 <xTaskIncrementTick+0x150>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00a      	beq.n	800ceec <xTaskIncrementTick+0x48>
	__asm volatile
 800ced6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	603b      	str	r3, [r7, #0]
}
 800cee8:	bf00      	nop
 800ceea:	e7fe      	b.n	800ceea <xTaskIncrementTick+0x46>
 800ceec:	4b41      	ldr	r3, [pc, #260]	; (800cff4 <xTaskIncrementTick+0x150>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	60fb      	str	r3, [r7, #12]
 800cef2:	4b41      	ldr	r3, [pc, #260]	; (800cff8 <xTaskIncrementTick+0x154>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a3f      	ldr	r2, [pc, #252]	; (800cff4 <xTaskIncrementTick+0x150>)
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	4a3f      	ldr	r2, [pc, #252]	; (800cff8 <xTaskIncrementTick+0x154>)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6013      	str	r3, [r2, #0]
 800cf00:	4b3e      	ldr	r3, [pc, #248]	; (800cffc <xTaskIncrementTick+0x158>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	3301      	adds	r3, #1
 800cf06:	4a3d      	ldr	r2, [pc, #244]	; (800cffc <xTaskIncrementTick+0x158>)
 800cf08:	6013      	str	r3, [r2, #0]
 800cf0a:	f000 fadb 	bl	800d4c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf0e:	4b3c      	ldr	r3, [pc, #240]	; (800d000 <xTaskIncrementTick+0x15c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	693a      	ldr	r2, [r7, #16]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d349      	bcc.n	800cfac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf18:	4b36      	ldr	r3, [pc, #216]	; (800cff4 <xTaskIncrementTick+0x150>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d104      	bne.n	800cf2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf22:	4b37      	ldr	r3, [pc, #220]	; (800d000 <xTaskIncrementTick+0x15c>)
 800cf24:	f04f 32ff 	mov.w	r2, #4294967295
 800cf28:	601a      	str	r2, [r3, #0]
					break;
 800cf2a:	e03f      	b.n	800cfac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf2c:	4b31      	ldr	r3, [pc, #196]	; (800cff4 <xTaskIncrementTick+0x150>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d203      	bcs.n	800cf4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf44:	4a2e      	ldr	r2, [pc, #184]	; (800d000 <xTaskIncrementTick+0x15c>)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf4a:	e02f      	b.n	800cfac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	3304      	adds	r3, #4
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe ff79 	bl	800be48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d004      	beq.n	800cf68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	3318      	adds	r3, #24
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe ff70 	bl	800be48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6c:	4b25      	ldr	r3, [pc, #148]	; (800d004 <xTaskIncrementTick+0x160>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d903      	bls.n	800cf7c <xTaskIncrementTick+0xd8>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	4a22      	ldr	r2, [pc, #136]	; (800d004 <xTaskIncrementTick+0x160>)
 800cf7a:	6013      	str	r3, [r2, #0]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf80:	4613      	mov	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4413      	add	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4a1f      	ldr	r2, [pc, #124]	; (800d008 <xTaskIncrementTick+0x164>)
 800cf8a:	441a      	add	r2, r3
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	3304      	adds	r3, #4
 800cf90:	4619      	mov	r1, r3
 800cf92:	4610      	mov	r0, r2
 800cf94:	f7fe fefb 	bl	800bd8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9c:	4b1b      	ldr	r3, [pc, #108]	; (800d00c <xTaskIncrementTick+0x168>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d3b8      	bcc.n	800cf18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfaa:	e7b5      	b.n	800cf18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfac:	4b17      	ldr	r3, [pc, #92]	; (800d00c <xTaskIncrementTick+0x168>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb2:	4915      	ldr	r1, [pc, #84]	; (800d008 <xTaskIncrementTick+0x164>)
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	440b      	add	r3, r1
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d901      	bls.n	800cfc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cfc8:	4b11      	ldr	r3, [pc, #68]	; (800d010 <xTaskIncrementTick+0x16c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d007      	beq.n	800cfe0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	617b      	str	r3, [r7, #20]
 800cfd4:	e004      	b.n	800cfe0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfd6:	4b0f      	ldr	r3, [pc, #60]	; (800d014 <xTaskIncrementTick+0x170>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	4a0d      	ldr	r2, [pc, #52]	; (800d014 <xTaskIncrementTick+0x170>)
 800cfde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfe0:	697b      	ldr	r3, [r7, #20]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	20001560 	.word	0x20001560
 800cff0:	2000153c 	.word	0x2000153c
 800cff4:	200014f0 	.word	0x200014f0
 800cff8:	200014f4 	.word	0x200014f4
 800cffc:	20001550 	.word	0x20001550
 800d000:	20001558 	.word	0x20001558
 800d004:	20001540 	.word	0x20001540
 800d008:	20001068 	.word	0x20001068
 800d00c:	20001064 	.word	0x20001064
 800d010:	2000154c 	.word	0x2000154c
 800d014:	20001548 	.word	0x20001548

0800d018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d01e:	4b2a      	ldr	r3, [pc, #168]	; (800d0c8 <vTaskSwitchContext+0xb0>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d026:	4b29      	ldr	r3, [pc, #164]	; (800d0cc <vTaskSwitchContext+0xb4>)
 800d028:	2201      	movs	r2, #1
 800d02a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d02c:	e046      	b.n	800d0bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d02e:	4b27      	ldr	r3, [pc, #156]	; (800d0cc <vTaskSwitchContext+0xb4>)
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d034:	4b26      	ldr	r3, [pc, #152]	; (800d0d0 <vTaskSwitchContext+0xb8>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	e010      	b.n	800d05e <vTaskSwitchContext+0x46>
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10a      	bne.n	800d058 <vTaskSwitchContext+0x40>
	__asm volatile
 800d042:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	607b      	str	r3, [r7, #4]
}
 800d054:	bf00      	nop
 800d056:	e7fe      	b.n	800d056 <vTaskSwitchContext+0x3e>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	60fb      	str	r3, [r7, #12]
 800d05e:	491d      	ldr	r1, [pc, #116]	; (800d0d4 <vTaskSwitchContext+0xbc>)
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	4613      	mov	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	440b      	add	r3, r1
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d0e4      	beq.n	800d03c <vTaskSwitchContext+0x24>
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	4613      	mov	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4a15      	ldr	r2, [pc, #84]	; (800d0d4 <vTaskSwitchContext+0xbc>)
 800d07e:	4413      	add	r3, r2
 800d080:	60bb      	str	r3, [r7, #8]
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	605a      	str	r2, [r3, #4]
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	3308      	adds	r3, #8
 800d094:	429a      	cmp	r2, r3
 800d096:	d104      	bne.n	800d0a2 <vTaskSwitchContext+0x8a>
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	605a      	str	r2, [r3, #4]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	4a0b      	ldr	r2, [pc, #44]	; (800d0d8 <vTaskSwitchContext+0xc0>)
 800d0aa:	6013      	str	r3, [r2, #0]
 800d0ac:	4a08      	ldr	r2, [pc, #32]	; (800d0d0 <vTaskSwitchContext+0xb8>)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d0b2:	4b09      	ldr	r3, [pc, #36]	; (800d0d8 <vTaskSwitchContext+0xc0>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3354      	adds	r3, #84	; 0x54
 800d0b8:	4a08      	ldr	r2, [pc, #32]	; (800d0dc <vTaskSwitchContext+0xc4>)
 800d0ba:	6013      	str	r3, [r2, #0]
}
 800d0bc:	bf00      	nop
 800d0be:	3714      	adds	r7, #20
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	20001560 	.word	0x20001560
 800d0cc:	2000154c 	.word	0x2000154c
 800d0d0:	20001540 	.word	0x20001540
 800d0d4:	20001068 	.word	0x20001068
 800d0d8:	20001064 	.word	0x20001064
 800d0dc:	20000454 	.word	0x20000454

0800d0e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d0f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	60fb      	str	r3, [r7, #12]
}
 800d102:	bf00      	nop
 800d104:	e7fe      	b.n	800d104 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d106:	4b07      	ldr	r3, [pc, #28]	; (800d124 <vTaskPlaceOnEventList+0x44>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3318      	adds	r3, #24
 800d10c:	4619      	mov	r1, r3
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7fe fe61 	bl	800bdd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d114:	2101      	movs	r1, #1
 800d116:	6838      	ldr	r0, [r7, #0]
 800d118:	f000 fa80 	bl	800d61c <prvAddCurrentTaskToDelayedList>
}
 800d11c:	bf00      	nop
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	20001064 	.word	0x20001064

0800d128 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10a      	bne.n	800d150 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d13a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	617b      	str	r3, [r7, #20]
}
 800d14c:	bf00      	nop
 800d14e:	e7fe      	b.n	800d14e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d150:	4b0a      	ldr	r3, [pc, #40]	; (800d17c <vTaskPlaceOnEventListRestricted+0x54>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3318      	adds	r3, #24
 800d156:	4619      	mov	r1, r3
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7fe fe18 	bl	800bd8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d164:	f04f 33ff 	mov.w	r3, #4294967295
 800d168:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d16a:	6879      	ldr	r1, [r7, #4]
 800d16c:	68b8      	ldr	r0, [r7, #8]
 800d16e:	f000 fa55 	bl	800d61c <prvAddCurrentTaskToDelayedList>
	}
 800d172:	bf00      	nop
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20001064 	.word	0x20001064

0800d180 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10a      	bne.n	800d1ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d196:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	60fb      	str	r3, [r7, #12]
}
 800d1a8:	bf00      	nop
 800d1aa:	e7fe      	b.n	800d1aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	3318      	adds	r3, #24
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe fe49 	bl	800be48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1b6:	4b1e      	ldr	r3, [pc, #120]	; (800d230 <xTaskRemoveFromEventList+0xb0>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d11d      	bne.n	800d1fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe fe40 	bl	800be48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1cc:	4b19      	ldr	r3, [pc, #100]	; (800d234 <xTaskRemoveFromEventList+0xb4>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d903      	bls.n	800d1dc <xTaskRemoveFromEventList+0x5c>
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d8:	4a16      	ldr	r2, [pc, #88]	; (800d234 <xTaskRemoveFromEventList+0xb4>)
 800d1da:	6013      	str	r3, [r2, #0]
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	4a13      	ldr	r2, [pc, #76]	; (800d238 <xTaskRemoveFromEventList+0xb8>)
 800d1ea:	441a      	add	r2, r3
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	f7fe fdcb 	bl	800bd8e <vListInsertEnd>
 800d1f8:	e005      	b.n	800d206 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	3318      	adds	r3, #24
 800d1fe:	4619      	mov	r1, r3
 800d200:	480e      	ldr	r0, [pc, #56]	; (800d23c <xTaskRemoveFromEventList+0xbc>)
 800d202:	f7fe fdc4 	bl	800bd8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d20a:	4b0d      	ldr	r3, [pc, #52]	; (800d240 <xTaskRemoveFromEventList+0xc0>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d210:	429a      	cmp	r2, r3
 800d212:	d905      	bls.n	800d220 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d214:	2301      	movs	r3, #1
 800d216:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d218:	4b0a      	ldr	r3, [pc, #40]	; (800d244 <xTaskRemoveFromEventList+0xc4>)
 800d21a:	2201      	movs	r2, #1
 800d21c:	601a      	str	r2, [r3, #0]
 800d21e:	e001      	b.n	800d224 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d220:	2300      	movs	r3, #0
 800d222:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d224:	697b      	ldr	r3, [r7, #20]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3718      	adds	r7, #24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	20001560 	.word	0x20001560
 800d234:	20001540 	.word	0x20001540
 800d238:	20001068 	.word	0x20001068
 800d23c:	200014f8 	.word	0x200014f8
 800d240:	20001064 	.word	0x20001064
 800d244:	2000154c 	.word	0x2000154c

0800d248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d250:	4b06      	ldr	r3, [pc, #24]	; (800d26c <vTaskInternalSetTimeOutState+0x24>)
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d258:	4b05      	ldr	r3, [pc, #20]	; (800d270 <vTaskInternalSetTimeOutState+0x28>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	605a      	str	r2, [r3, #4]
}
 800d260:	bf00      	nop
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	20001550 	.word	0x20001550
 800d270:	2000153c 	.word	0x2000153c

0800d274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b088      	sub	sp, #32
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10a      	bne.n	800d29a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d284:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	613b      	str	r3, [r7, #16]
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10a      	bne.n	800d2b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d2a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	60fb      	str	r3, [r7, #12]
}
 800d2b2:	bf00      	nop
 800d2b4:	e7fe      	b.n	800d2b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d2b6:	f000 fe7d 	bl	800dfb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d2ba:	4b1d      	ldr	r3, [pc, #116]	; (800d330 <xTaskCheckForTimeOut+0xbc>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	69ba      	ldr	r2, [r7, #24]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d2:	d102      	bne.n	800d2da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	61fb      	str	r3, [r7, #28]
 800d2d8:	e023      	b.n	800d322 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	4b15      	ldr	r3, [pc, #84]	; (800d334 <xTaskCheckForTimeOut+0xc0>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d007      	beq.n	800d2f6 <xTaskCheckForTimeOut+0x82>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	69ba      	ldr	r2, [r7, #24]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d302      	bcc.n	800d2f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	61fb      	str	r3, [r7, #28]
 800d2f4:	e015      	b.n	800d322 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d20b      	bcs.n	800d318 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	1ad2      	subs	r2, r2, r3
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff ff9b 	bl	800d248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d312:	2300      	movs	r3, #0
 800d314:	61fb      	str	r3, [r7, #28]
 800d316:	e004      	b.n	800d322 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2200      	movs	r2, #0
 800d31c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d31e:	2301      	movs	r3, #1
 800d320:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d322:	f000 fe77 	bl	800e014 <vPortExitCritical>

	return xReturn;
 800d326:	69fb      	ldr	r3, [r7, #28]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	2000153c 	.word	0x2000153c
 800d334:	20001550 	.word	0x20001550

0800d338 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d338:	b480      	push	{r7}
 800d33a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d33c:	4b03      	ldr	r3, [pc, #12]	; (800d34c <vTaskMissedYield+0x14>)
 800d33e:	2201      	movs	r2, #1
 800d340:	601a      	str	r2, [r3, #0]
}
 800d342:	bf00      	nop
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	2000154c 	.word	0x2000154c

0800d350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d358:	f000 f852 	bl	800d400 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d35c:	4b06      	ldr	r3, [pc, #24]	; (800d378 <prvIdleTask+0x28>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b01      	cmp	r3, #1
 800d362:	d9f9      	bls.n	800d358 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d364:	4b05      	ldr	r3, [pc, #20]	; (800d37c <prvIdleTask+0x2c>)
 800d366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d374:	e7f0      	b.n	800d358 <prvIdleTask+0x8>
 800d376:	bf00      	nop
 800d378:	20001068 	.word	0x20001068
 800d37c:	e000ed04 	.word	0xe000ed04

0800d380 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d386:	2300      	movs	r3, #0
 800d388:	607b      	str	r3, [r7, #4]
 800d38a:	e00c      	b.n	800d3a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	4613      	mov	r3, r2
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4413      	add	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4a12      	ldr	r2, [pc, #72]	; (800d3e0 <prvInitialiseTaskLists+0x60>)
 800d398:	4413      	add	r3, r2
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7fe fcca 	bl	800bd34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	607b      	str	r3, [r7, #4]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b37      	cmp	r3, #55	; 0x37
 800d3aa:	d9ef      	bls.n	800d38c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d3ac:	480d      	ldr	r0, [pc, #52]	; (800d3e4 <prvInitialiseTaskLists+0x64>)
 800d3ae:	f7fe fcc1 	bl	800bd34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d3b2:	480d      	ldr	r0, [pc, #52]	; (800d3e8 <prvInitialiseTaskLists+0x68>)
 800d3b4:	f7fe fcbe 	bl	800bd34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d3b8:	480c      	ldr	r0, [pc, #48]	; (800d3ec <prvInitialiseTaskLists+0x6c>)
 800d3ba:	f7fe fcbb 	bl	800bd34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d3be:	480c      	ldr	r0, [pc, #48]	; (800d3f0 <prvInitialiseTaskLists+0x70>)
 800d3c0:	f7fe fcb8 	bl	800bd34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d3c4:	480b      	ldr	r0, [pc, #44]	; (800d3f4 <prvInitialiseTaskLists+0x74>)
 800d3c6:	f7fe fcb5 	bl	800bd34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d3ca:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <prvInitialiseTaskLists+0x78>)
 800d3cc:	4a05      	ldr	r2, [pc, #20]	; (800d3e4 <prvInitialiseTaskLists+0x64>)
 800d3ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d3d0:	4b0a      	ldr	r3, [pc, #40]	; (800d3fc <prvInitialiseTaskLists+0x7c>)
 800d3d2:	4a05      	ldr	r2, [pc, #20]	; (800d3e8 <prvInitialiseTaskLists+0x68>)
 800d3d4:	601a      	str	r2, [r3, #0]
}
 800d3d6:	bf00      	nop
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20001068 	.word	0x20001068
 800d3e4:	200014c8 	.word	0x200014c8
 800d3e8:	200014dc 	.word	0x200014dc
 800d3ec:	200014f8 	.word	0x200014f8
 800d3f0:	2000150c 	.word	0x2000150c
 800d3f4:	20001524 	.word	0x20001524
 800d3f8:	200014f0 	.word	0x200014f0
 800d3fc:	200014f4 	.word	0x200014f4

0800d400 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d406:	e019      	b.n	800d43c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d408:	f000 fdd4 	bl	800dfb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d40c:	4b10      	ldr	r3, [pc, #64]	; (800d450 <prvCheckTasksWaitingTermination+0x50>)
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	3304      	adds	r3, #4
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fe fd15 	bl	800be48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d41e:	4b0d      	ldr	r3, [pc, #52]	; (800d454 <prvCheckTasksWaitingTermination+0x54>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3b01      	subs	r3, #1
 800d424:	4a0b      	ldr	r2, [pc, #44]	; (800d454 <prvCheckTasksWaitingTermination+0x54>)
 800d426:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d428:	4b0b      	ldr	r3, [pc, #44]	; (800d458 <prvCheckTasksWaitingTermination+0x58>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	4a0a      	ldr	r2, [pc, #40]	; (800d458 <prvCheckTasksWaitingTermination+0x58>)
 800d430:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d432:	f000 fdef 	bl	800e014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 f810 	bl	800d45c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d43c:	4b06      	ldr	r3, [pc, #24]	; (800d458 <prvCheckTasksWaitingTermination+0x58>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1e1      	bne.n	800d408 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	2000150c 	.word	0x2000150c
 800d454:	20001538 	.word	0x20001538
 800d458:	20001520 	.word	0x20001520

0800d45c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3354      	adds	r3, #84	; 0x54
 800d468:	4618      	mov	r0, r3
 800d46a:	f001 fc79 	bl	800ed60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d474:	2b00      	cmp	r3, #0
 800d476:	d108      	bne.n	800d48a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47c:	4618      	mov	r0, r3
 800d47e:	f000 ff87 	bl	800e390 <vPortFree>
				vPortFree( pxTCB );
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 ff84 	bl	800e390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d488:	e018      	b.n	800d4bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d490:	2b01      	cmp	r3, #1
 800d492:	d103      	bne.n	800d49c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 ff7b 	bl	800e390 <vPortFree>
	}
 800d49a:	e00f      	b.n	800d4bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d00a      	beq.n	800d4bc <prvDeleteTCB+0x60>
	__asm volatile
 800d4a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	60fb      	str	r3, [r7, #12]
}
 800d4b8:	bf00      	nop
 800d4ba:	e7fe      	b.n	800d4ba <prvDeleteTCB+0x5e>
	}
 800d4bc:	bf00      	nop
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4ca:	4b0c      	ldr	r3, [pc, #48]	; (800d4fc <prvResetNextTaskUnblockTime+0x38>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d104      	bne.n	800d4de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4d4:	4b0a      	ldr	r3, [pc, #40]	; (800d500 <prvResetNextTaskUnblockTime+0x3c>)
 800d4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4dc:	e008      	b.n	800d4f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4de:	4b07      	ldr	r3, [pc, #28]	; (800d4fc <prvResetNextTaskUnblockTime+0x38>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	4a04      	ldr	r2, [pc, #16]	; (800d500 <prvResetNextTaskUnblockTime+0x3c>)
 800d4ee:	6013      	str	r3, [r2, #0]
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	200014f0 	.word	0x200014f0
 800d500:	20001558 	.word	0x20001558

0800d504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d50a:	4b0b      	ldr	r3, [pc, #44]	; (800d538 <xTaskGetSchedulerState+0x34>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d102      	bne.n	800d518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d512:	2301      	movs	r3, #1
 800d514:	607b      	str	r3, [r7, #4]
 800d516:	e008      	b.n	800d52a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d518:	4b08      	ldr	r3, [pc, #32]	; (800d53c <xTaskGetSchedulerState+0x38>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d102      	bne.n	800d526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d520:	2302      	movs	r3, #2
 800d522:	607b      	str	r3, [r7, #4]
 800d524:	e001      	b.n	800d52a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d526:	2300      	movs	r3, #0
 800d528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d52a:	687b      	ldr	r3, [r7, #4]
	}
 800d52c:	4618      	mov	r0, r3
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr
 800d538:	20001544 	.word	0x20001544
 800d53c:	20001560 	.word	0x20001560

0800d540 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d54c:	2300      	movs	r3, #0
 800d54e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d056      	beq.n	800d604 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d556:	4b2e      	ldr	r3, [pc, #184]	; (800d610 <xTaskPriorityDisinherit+0xd0>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	693a      	ldr	r2, [r7, #16]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d00a      	beq.n	800d576 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d560:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	60fb      	str	r3, [r7, #12]
}
 800d572:	bf00      	nop
 800d574:	e7fe      	b.n	800d574 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10a      	bne.n	800d594 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d57e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	60bb      	str	r3, [r7, #8]
}
 800d590:	bf00      	nop
 800d592:	e7fe      	b.n	800d592 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d598:	1e5a      	subs	r2, r3, #1
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d02c      	beq.n	800d604 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d128      	bne.n	800d604 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe fc46 	bl	800be48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d4:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <xTaskPriorityDisinherit+0xd4>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d903      	bls.n	800d5e4 <xTaskPriorityDisinherit+0xa4>
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e0:	4a0c      	ldr	r2, [pc, #48]	; (800d614 <xTaskPriorityDisinherit+0xd4>)
 800d5e2:	6013      	str	r3, [r2, #0]
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4413      	add	r3, r2
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	4a09      	ldr	r2, [pc, #36]	; (800d618 <xTaskPriorityDisinherit+0xd8>)
 800d5f2:	441a      	add	r2, r3
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4610      	mov	r0, r2
 800d5fc:	f7fe fbc7 	bl	800bd8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d600:	2301      	movs	r3, #1
 800d602:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d604:	697b      	ldr	r3, [r7, #20]
	}
 800d606:	4618      	mov	r0, r3
 800d608:	3718      	adds	r7, #24
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	20001064 	.word	0x20001064
 800d614:	20001540 	.word	0x20001540
 800d618:	20001068 	.word	0x20001068

0800d61c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d626:	4b21      	ldr	r3, [pc, #132]	; (800d6ac <prvAddCurrentTaskToDelayedList+0x90>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d62c:	4b20      	ldr	r3, [pc, #128]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3304      	adds	r3, #4
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe fc08 	bl	800be48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63e:	d10a      	bne.n	800d656 <prvAddCurrentTaskToDelayedList+0x3a>
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d007      	beq.n	800d656 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d646:	4b1a      	ldr	r3, [pc, #104]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3304      	adds	r3, #4
 800d64c:	4619      	mov	r1, r3
 800d64e:	4819      	ldr	r0, [pc, #100]	; (800d6b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d650:	f7fe fb9d 	bl	800bd8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d654:	e026      	b.n	800d6a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d656:	68fa      	ldr	r2, [r7, #12]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4413      	add	r3, r2
 800d65c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d65e:	4b14      	ldr	r3, [pc, #80]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d209      	bcs.n	800d682 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d66e:	4b12      	ldr	r3, [pc, #72]	; (800d6b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4b0f      	ldr	r3, [pc, #60]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	3304      	adds	r3, #4
 800d678:	4619      	mov	r1, r3
 800d67a:	4610      	mov	r0, r2
 800d67c:	f7fe fbab 	bl	800bdd6 <vListInsert>
}
 800d680:	e010      	b.n	800d6a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d682:	4b0e      	ldr	r3, [pc, #56]	; (800d6bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	4b0a      	ldr	r3, [pc, #40]	; (800d6b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	3304      	adds	r3, #4
 800d68c:	4619      	mov	r1, r3
 800d68e:	4610      	mov	r0, r2
 800d690:	f7fe fba1 	bl	800bdd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d694:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d202      	bcs.n	800d6a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d69e:	4a08      	ldr	r2, [pc, #32]	; (800d6c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	6013      	str	r3, [r2, #0]
}
 800d6a4:	bf00      	nop
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	2000153c 	.word	0x2000153c
 800d6b0:	20001064 	.word	0x20001064
 800d6b4:	20001524 	.word	0x20001524
 800d6b8:	200014f4 	.word	0x200014f4
 800d6bc:	200014f0 	.word	0x200014f0
 800d6c0:	20001558 	.word	0x20001558

0800d6c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08a      	sub	sp, #40	; 0x28
 800d6c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d6ce:	f000 fb07 	bl	800dce0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d6d2:	4b1c      	ldr	r3, [pc, #112]	; (800d744 <xTimerCreateTimerTask+0x80>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d021      	beq.n	800d71e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6e2:	1d3a      	adds	r2, r7, #4
 800d6e4:	f107 0108 	add.w	r1, r7, #8
 800d6e8:	f107 030c 	add.w	r3, r7, #12
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fe fb07 	bl	800bd00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d6f2:	6879      	ldr	r1, [r7, #4]
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	9202      	str	r2, [sp, #8]
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	2302      	movs	r3, #2
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	2300      	movs	r3, #0
 800d702:	460a      	mov	r2, r1
 800d704:	4910      	ldr	r1, [pc, #64]	; (800d748 <xTimerCreateTimerTask+0x84>)
 800d706:	4811      	ldr	r0, [pc, #68]	; (800d74c <xTimerCreateTimerTask+0x88>)
 800d708:	f7ff f8b4 	bl	800c874 <xTaskCreateStatic>
 800d70c:	4603      	mov	r3, r0
 800d70e:	4a10      	ldr	r2, [pc, #64]	; (800d750 <xTimerCreateTimerTask+0x8c>)
 800d710:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d712:	4b0f      	ldr	r3, [pc, #60]	; (800d750 <xTimerCreateTimerTask+0x8c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d71a:	2301      	movs	r3, #1
 800d71c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10a      	bne.n	800d73a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d724:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	613b      	str	r3, [r7, #16]
}
 800d736:	bf00      	nop
 800d738:	e7fe      	b.n	800d738 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d73a:	697b      	ldr	r3, [r7, #20]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	20001594 	.word	0x20001594
 800d748:	08010a64 	.word	0x08010a64
 800d74c:	0800d889 	.word	0x0800d889
 800d750:	20001598 	.word	0x20001598

0800d754 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b08a      	sub	sp, #40	; 0x28
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d762:	2300      	movs	r3, #0
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d10a      	bne.n	800d782 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d76c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	623b      	str	r3, [r7, #32]
}
 800d77e:	bf00      	nop
 800d780:	e7fe      	b.n	800d780 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d782:	4b1a      	ldr	r3, [pc, #104]	; (800d7ec <xTimerGenericCommand+0x98>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d02a      	beq.n	800d7e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	2b05      	cmp	r3, #5
 800d79a:	dc18      	bgt.n	800d7ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d79c:	f7ff feb2 	bl	800d504 <xTaskGetSchedulerState>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d109      	bne.n	800d7ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d7a6:	4b11      	ldr	r3, [pc, #68]	; (800d7ec <xTimerGenericCommand+0x98>)
 800d7a8:	6818      	ldr	r0, [r3, #0]
 800d7aa:	f107 0110 	add.w	r1, r7, #16
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7b2:	f7fe fc77 	bl	800c0a4 <xQueueGenericSend>
 800d7b6:	6278      	str	r0, [r7, #36]	; 0x24
 800d7b8:	e012      	b.n	800d7e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d7ba:	4b0c      	ldr	r3, [pc, #48]	; (800d7ec <xTimerGenericCommand+0x98>)
 800d7bc:	6818      	ldr	r0, [r3, #0]
 800d7be:	f107 0110 	add.w	r1, r7, #16
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f7fe fc6d 	bl	800c0a4 <xQueueGenericSend>
 800d7ca:	6278      	str	r0, [r7, #36]	; 0x24
 800d7cc:	e008      	b.n	800d7e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d7ce:	4b07      	ldr	r3, [pc, #28]	; (800d7ec <xTimerGenericCommand+0x98>)
 800d7d0:	6818      	ldr	r0, [r3, #0]
 800d7d2:	f107 0110 	add.w	r1, r7, #16
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	f7fe fd61 	bl	800c2a0 <xQueueGenericSendFromISR>
 800d7de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3728      	adds	r7, #40	; 0x28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20001594 	.word	0x20001594

0800d7f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af02      	add	r7, sp, #8
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7fa:	4b22      	ldr	r3, [pc, #136]	; (800d884 <prvProcessExpiredTimer+0x94>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	3304      	adds	r3, #4
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fe fb1d 	bl	800be48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d814:	f003 0304 	and.w	r3, r3, #4
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d022      	beq.n	800d862 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	699a      	ldr	r2, [r3, #24]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	18d1      	adds	r1, r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	6978      	ldr	r0, [r7, #20]
 800d82a:	f000 f8d1 	bl	800d9d0 <prvInsertTimerInActiveList>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d01f      	beq.n	800d874 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d834:	2300      	movs	r3, #0
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	2300      	movs	r3, #0
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	2100      	movs	r1, #0
 800d83e:	6978      	ldr	r0, [r7, #20]
 800d840:	f7ff ff88 	bl	800d754 <xTimerGenericCommand>
 800d844:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d113      	bne.n	800d874 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d84c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	60fb      	str	r3, [r7, #12]
}
 800d85e:	bf00      	nop
 800d860:	e7fe      	b.n	800d860 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d868:	f023 0301 	bic.w	r3, r3, #1
 800d86c:	b2da      	uxtb	r2, r3
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	6a1b      	ldr	r3, [r3, #32]
 800d878:	6978      	ldr	r0, [r7, #20]
 800d87a:	4798      	blx	r3
}
 800d87c:	bf00      	nop
 800d87e:	3718      	adds	r7, #24
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	2000158c 	.word	0x2000158c

0800d888 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d890:	f107 0308 	add.w	r3, r7, #8
 800d894:	4618      	mov	r0, r3
 800d896:	f000 f857 	bl	800d948 <prvGetNextExpireTime>
 800d89a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	4619      	mov	r1, r3
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f000 f803 	bl	800d8ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d8a6:	f000 f8d5 	bl	800da54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d8aa:	e7f1      	b.n	800d890 <prvTimerTask+0x8>

0800d8ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d8b6:	f7ff fa39 	bl	800cd2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8ba:	f107 0308 	add.w	r3, r7, #8
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 f866 	bl	800d990 <prvSampleTimeNow>
 800d8c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d130      	bne.n	800d92e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d10a      	bne.n	800d8e8 <prvProcessTimerOrBlockTask+0x3c>
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d806      	bhi.n	800d8e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d8da:	f7ff fa35 	bl	800cd48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d8de:	68f9      	ldr	r1, [r7, #12]
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff ff85 	bl	800d7f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d8e6:	e024      	b.n	800d932 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d008      	beq.n	800d900 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d8ee:	4b13      	ldr	r3, [pc, #76]	; (800d93c <prvProcessTimerOrBlockTask+0x90>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <prvProcessTimerOrBlockTask+0x50>
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e000      	b.n	800d8fe <prvProcessTimerOrBlockTask+0x52>
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d900:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <prvProcessTimerOrBlockTask+0x94>)
 800d902:	6818      	ldr	r0, [r3, #0]
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	4619      	mov	r1, r3
 800d90e:	f7fe ff7d 	bl	800c80c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d912:	f7ff fa19 	bl	800cd48 <xTaskResumeAll>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d10a      	bne.n	800d932 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d91c:	4b09      	ldr	r3, [pc, #36]	; (800d944 <prvProcessTimerOrBlockTask+0x98>)
 800d91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	f3bf 8f4f 	dsb	sy
 800d928:	f3bf 8f6f 	isb	sy
}
 800d92c:	e001      	b.n	800d932 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d92e:	f7ff fa0b 	bl	800cd48 <xTaskResumeAll>
}
 800d932:	bf00      	nop
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	20001590 	.word	0x20001590
 800d940:	20001594 	.word	0x20001594
 800d944:	e000ed04 	.word	0xe000ed04

0800d948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d950:	4b0e      	ldr	r3, [pc, #56]	; (800d98c <prvGetNextExpireTime+0x44>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <prvGetNextExpireTime+0x16>
 800d95a:	2201      	movs	r2, #1
 800d95c:	e000      	b.n	800d960 <prvGetNextExpireTime+0x18>
 800d95e:	2200      	movs	r2, #0
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d105      	bne.n	800d978 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d96c:	4b07      	ldr	r3, [pc, #28]	; (800d98c <prvGetNextExpireTime+0x44>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	60fb      	str	r3, [r7, #12]
 800d976:	e001      	b.n	800d97c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d978:	2300      	movs	r3, #0
 800d97a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d97c:	68fb      	ldr	r3, [r7, #12]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3714      	adds	r7, #20
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
 800d98a:	bf00      	nop
 800d98c:	2000158c 	.word	0x2000158c

0800d990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d998:	f7ff fa74 	bl	800ce84 <xTaskGetTickCount>
 800d99c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d99e:	4b0b      	ldr	r3, [pc, #44]	; (800d9cc <prvSampleTimeNow+0x3c>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d205      	bcs.n	800d9b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d9a8:	f000 f936 	bl	800dc18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	601a      	str	r2, [r3, #0]
 800d9b2:	e002      	b.n	800d9ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d9ba:	4a04      	ldr	r2, [pc, #16]	; (800d9cc <prvSampleTimeNow+0x3c>)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	2000159c 	.word	0x2000159c

0800d9d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d812      	bhi.n	800da1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	1ad2      	subs	r2, r2, r3
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	699b      	ldr	r3, [r3, #24]
 800da00:	429a      	cmp	r2, r3
 800da02:	d302      	bcc.n	800da0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800da04:	2301      	movs	r3, #1
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	e01b      	b.n	800da42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800da0a:	4b10      	ldr	r3, [pc, #64]	; (800da4c <prvInsertTimerInActiveList+0x7c>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	3304      	adds	r3, #4
 800da12:	4619      	mov	r1, r3
 800da14:	4610      	mov	r0, r2
 800da16:	f7fe f9de 	bl	800bdd6 <vListInsert>
 800da1a:	e012      	b.n	800da42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d206      	bcs.n	800da32 <prvInsertTimerInActiveList+0x62>
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d302      	bcc.n	800da32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800da2c:	2301      	movs	r3, #1
 800da2e:	617b      	str	r3, [r7, #20]
 800da30:	e007      	b.n	800da42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da32:	4b07      	ldr	r3, [pc, #28]	; (800da50 <prvInsertTimerInActiveList+0x80>)
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	3304      	adds	r3, #4
 800da3a:	4619      	mov	r1, r3
 800da3c:	4610      	mov	r0, r2
 800da3e:	f7fe f9ca 	bl	800bdd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800da42:	697b      	ldr	r3, [r7, #20]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3718      	adds	r7, #24
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20001590 	.word	0x20001590
 800da50:	2000158c 	.word	0x2000158c

0800da54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08e      	sub	sp, #56	; 0x38
 800da58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da5a:	e0ca      	b.n	800dbf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	da18      	bge.n	800da94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800da62:	1d3b      	adds	r3, r7, #4
 800da64:	3304      	adds	r3, #4
 800da66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10a      	bne.n	800da84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800da6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	61fb      	str	r3, [r7, #28]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da8a:	6850      	ldr	r0, [r2, #4]
 800da8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da8e:	6892      	ldr	r2, [r2, #8]
 800da90:	4611      	mov	r1, r2
 800da92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	f2c0 80aa 	blt.w	800dbf0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800daa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa2:	695b      	ldr	r3, [r3, #20]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d004      	beq.n	800dab2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daaa:	3304      	adds	r3, #4
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe f9cb 	bl	800be48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dab2:	463b      	mov	r3, r7
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7ff ff6b 	bl	800d990 <prvSampleTimeNow>
 800daba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b09      	cmp	r3, #9
 800dac0:	f200 8097 	bhi.w	800dbf2 <prvProcessReceivedCommands+0x19e>
 800dac4:	a201      	add	r2, pc, #4	; (adr r2, 800dacc <prvProcessReceivedCommands+0x78>)
 800dac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daca:	bf00      	nop
 800dacc:	0800daf5 	.word	0x0800daf5
 800dad0:	0800daf5 	.word	0x0800daf5
 800dad4:	0800daf5 	.word	0x0800daf5
 800dad8:	0800db69 	.word	0x0800db69
 800dadc:	0800db7d 	.word	0x0800db7d
 800dae0:	0800dbc7 	.word	0x0800dbc7
 800dae4:	0800daf5 	.word	0x0800daf5
 800dae8:	0800daf5 	.word	0x0800daf5
 800daec:	0800db69 	.word	0x0800db69
 800daf0:	0800db7d 	.word	0x0800db7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dafa:	f043 0301 	orr.w	r3, r3, #1
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db06:	68ba      	ldr	r2, [r7, #8]
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	18d1      	adds	r1, r2, r3
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db14:	f7ff ff5c 	bl	800d9d0 <prvInsertTimerInActiveList>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d069      	beq.n	800dbf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db2c:	f003 0304 	and.w	r3, r3, #4
 800db30:	2b00      	cmp	r3, #0
 800db32:	d05e      	beq.n	800dbf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db38:	699b      	ldr	r3, [r3, #24]
 800db3a:	441a      	add	r2, r3
 800db3c:	2300      	movs	r3, #0
 800db3e:	9300      	str	r3, [sp, #0]
 800db40:	2300      	movs	r3, #0
 800db42:	2100      	movs	r1, #0
 800db44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db46:	f7ff fe05 	bl	800d754 <xTimerGenericCommand>
 800db4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800db4c:	6a3b      	ldr	r3, [r7, #32]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d14f      	bne.n	800dbf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800db52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800db56:	f383 8811 	msr	BASEPRI, r3
 800db5a:	f3bf 8f6f 	isb	sy
 800db5e:	f3bf 8f4f 	dsb	sy
 800db62:	61bb      	str	r3, [r7, #24]
}
 800db64:	bf00      	nop
 800db66:	e7fe      	b.n	800db66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db6e:	f023 0301 	bic.w	r3, r3, #1
 800db72:	b2da      	uxtb	r2, r3
 800db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800db7a:	e03a      	b.n	800dbf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db82:	f043 0301 	orr.w	r3, r3, #1
 800db86:	b2da      	uxtb	r2, r3
 800db88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db96:	699b      	ldr	r3, [r3, #24]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10a      	bne.n	800dbb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800db9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dba0:	f383 8811 	msr	BASEPRI, r3
 800dba4:	f3bf 8f6f 	isb	sy
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	617b      	str	r3, [r7, #20]
}
 800dbae:	bf00      	nop
 800dbb0:	e7fe      	b.n	800dbb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb4:	699a      	ldr	r2, [r3, #24]
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb8:	18d1      	adds	r1, r2, r3
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbc0:	f7ff ff06 	bl	800d9d0 <prvInsertTimerInActiveList>
					break;
 800dbc4:	e015      	b.n	800dbf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbcc:	f003 0302 	and.w	r3, r3, #2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d103      	bne.n	800dbdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dbd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbd6:	f000 fbdb 	bl	800e390 <vPortFree>
 800dbda:	e00a      	b.n	800dbf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbe2:	f023 0301 	bic.w	r3, r3, #1
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dbee:	e000      	b.n	800dbf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dbf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbf2:	4b08      	ldr	r3, [pc, #32]	; (800dc14 <prvProcessReceivedCommands+0x1c0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	1d39      	adds	r1, r7, #4
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fe fbec 	bl	800c3d8 <xQueueReceive>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f47f af2a 	bne.w	800da5c <prvProcessReceivedCommands+0x8>
	}
}
 800dc08:	bf00      	nop
 800dc0a:	bf00      	nop
 800dc0c:	3730      	adds	r7, #48	; 0x30
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	20001594 	.word	0x20001594

0800dc18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b088      	sub	sp, #32
 800dc1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc1e:	e048      	b.n	800dcb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc20:	4b2d      	ldr	r3, [pc, #180]	; (800dcd8 <prvSwitchTimerLists+0xc0>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc2a:	4b2b      	ldr	r3, [pc, #172]	; (800dcd8 <prvSwitchTimerLists+0xc0>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	3304      	adds	r3, #4
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fe f905 	bl	800be48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc4c:	f003 0304 	and.w	r3, r3, #4
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d02e      	beq.n	800dcb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	699b      	ldr	r3, [r3, #24]
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d90e      	bls.n	800dc84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc72:	4b19      	ldr	r3, [pc, #100]	; (800dcd8 <prvSwitchTimerLists+0xc0>)
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	3304      	adds	r3, #4
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	f7fe f8aa 	bl	800bdd6 <vListInsert>
 800dc82:	e016      	b.n	800dcb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc84:	2300      	movs	r3, #0
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	2300      	movs	r3, #0
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f7ff fd60 	bl	800d754 <xTimerGenericCommand>
 800dc94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d10a      	bne.n	800dcb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dc9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dca0:	f383 8811 	msr	BASEPRI, r3
 800dca4:	f3bf 8f6f 	isb	sy
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	603b      	str	r3, [r7, #0]
}
 800dcae:	bf00      	nop
 800dcb0:	e7fe      	b.n	800dcb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcb2:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <prvSwitchTimerLists+0xc0>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1b1      	bne.n	800dc20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dcbc:	4b06      	ldr	r3, [pc, #24]	; (800dcd8 <prvSwitchTimerLists+0xc0>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dcc2:	4b06      	ldr	r3, [pc, #24]	; (800dcdc <prvSwitchTimerLists+0xc4>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a04      	ldr	r2, [pc, #16]	; (800dcd8 <prvSwitchTimerLists+0xc0>)
 800dcc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dcca:	4a04      	ldr	r2, [pc, #16]	; (800dcdc <prvSwitchTimerLists+0xc4>)
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	6013      	str	r3, [r2, #0]
}
 800dcd0:	bf00      	nop
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	2000158c 	.word	0x2000158c
 800dcdc:	20001590 	.word	0x20001590

0800dce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dce6:	f000 f965 	bl	800dfb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dcea:	4b15      	ldr	r3, [pc, #84]	; (800dd40 <prvCheckForValidListAndQueue+0x60>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d120      	bne.n	800dd34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dcf2:	4814      	ldr	r0, [pc, #80]	; (800dd44 <prvCheckForValidListAndQueue+0x64>)
 800dcf4:	f7fe f81e 	bl	800bd34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dcf8:	4813      	ldr	r0, [pc, #76]	; (800dd48 <prvCheckForValidListAndQueue+0x68>)
 800dcfa:	f7fe f81b 	bl	800bd34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dcfe:	4b13      	ldr	r3, [pc, #76]	; (800dd4c <prvCheckForValidListAndQueue+0x6c>)
 800dd00:	4a10      	ldr	r2, [pc, #64]	; (800dd44 <prvCheckForValidListAndQueue+0x64>)
 800dd02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd04:	4b12      	ldr	r3, [pc, #72]	; (800dd50 <prvCheckForValidListAndQueue+0x70>)
 800dd06:	4a10      	ldr	r2, [pc, #64]	; (800dd48 <prvCheckForValidListAndQueue+0x68>)
 800dd08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	4b11      	ldr	r3, [pc, #68]	; (800dd54 <prvCheckForValidListAndQueue+0x74>)
 800dd10:	4a11      	ldr	r2, [pc, #68]	; (800dd58 <prvCheckForValidListAndQueue+0x78>)
 800dd12:	2110      	movs	r1, #16
 800dd14:	200a      	movs	r0, #10
 800dd16:	f7fe f929 	bl	800bf6c <xQueueGenericCreateStatic>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4a08      	ldr	r2, [pc, #32]	; (800dd40 <prvCheckForValidListAndQueue+0x60>)
 800dd1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd20:	4b07      	ldr	r3, [pc, #28]	; (800dd40 <prvCheckForValidListAndQueue+0x60>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d005      	beq.n	800dd34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd28:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <prvCheckForValidListAndQueue+0x60>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	490b      	ldr	r1, [pc, #44]	; (800dd5c <prvCheckForValidListAndQueue+0x7c>)
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fe fd42 	bl	800c7b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd34:	f000 f96e 	bl	800e014 <vPortExitCritical>
}
 800dd38:	bf00      	nop
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	20001594 	.word	0x20001594
 800dd44:	20001564 	.word	0x20001564
 800dd48:	20001578 	.word	0x20001578
 800dd4c:	2000158c 	.word	0x2000158c
 800dd50:	20001590 	.word	0x20001590
 800dd54:	20001640 	.word	0x20001640
 800dd58:	200015a0 	.word	0x200015a0
 800dd5c:	08010a6c 	.word	0x08010a6c

0800dd60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd60:	b480      	push	{r7}
 800dd62:	b085      	sub	sp, #20
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	3b04      	subs	r3, #4
 800dd70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dd78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	3b04      	subs	r3, #4
 800dd7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	f023 0201 	bic.w	r2, r3, #1
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	3b04      	subs	r3, #4
 800dd8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd90:	4a0c      	ldr	r2, [pc, #48]	; (800ddc4 <pxPortInitialiseStack+0x64>)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	3b14      	subs	r3, #20
 800dd9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	3b04      	subs	r3, #4
 800dda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f06f 0202 	mvn.w	r2, #2
 800ddae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3b20      	subs	r3, #32
 800ddb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3714      	adds	r7, #20
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr
 800ddc4:	0800ddc9 	.word	0x0800ddc9

0800ddc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ddd2:	4b12      	ldr	r3, [pc, #72]	; (800de1c <prvTaskExitError+0x54>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddda:	d00a      	beq.n	800ddf2 <prvTaskExitError+0x2a>
	__asm volatile
 800dddc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	60fb      	str	r3, [r7, #12]
}
 800ddee:	bf00      	nop
 800ddf0:	e7fe      	b.n	800ddf0 <prvTaskExitError+0x28>
	__asm volatile
 800ddf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	60bb      	str	r3, [r7, #8]
}
 800de04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de06:	bf00      	nop
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d0fc      	beq.n	800de08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de0e:	bf00      	nop
 800de10:	bf00      	nop
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr
 800de1c:	20000450 	.word	0x20000450

0800de20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de20:	4b07      	ldr	r3, [pc, #28]	; (800de40 <pxCurrentTCBConst2>)
 800de22:	6819      	ldr	r1, [r3, #0]
 800de24:	6808      	ldr	r0, [r1, #0]
 800de26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2a:	f380 8809 	msr	PSP, r0
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f04f 0000 	mov.w	r0, #0
 800de36:	f380 8811 	msr	BASEPRI, r0
 800de3a:	4770      	bx	lr
 800de3c:	f3af 8000 	nop.w

0800de40 <pxCurrentTCBConst2>:
 800de40:	20001064 	.word	0x20001064
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de44:	bf00      	nop
 800de46:	bf00      	nop

0800de48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de48:	4808      	ldr	r0, [pc, #32]	; (800de6c <prvPortStartFirstTask+0x24>)
 800de4a:	6800      	ldr	r0, [r0, #0]
 800de4c:	6800      	ldr	r0, [r0, #0]
 800de4e:	f380 8808 	msr	MSP, r0
 800de52:	f04f 0000 	mov.w	r0, #0
 800de56:	f380 8814 	msr	CONTROL, r0
 800de5a:	b662      	cpsie	i
 800de5c:	b661      	cpsie	f
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	f3bf 8f6f 	isb	sy
 800de66:	df00      	svc	0
 800de68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de6a:	bf00      	nop
 800de6c:	e000ed08 	.word	0xe000ed08

0800de70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800de76:	4b46      	ldr	r3, [pc, #280]	; (800df90 <xPortStartScheduler+0x120>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a46      	ldr	r2, [pc, #280]	; (800df94 <xPortStartScheduler+0x124>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d10a      	bne.n	800de96 <xPortStartScheduler+0x26>
	__asm volatile
 800de80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	613b      	str	r3, [r7, #16]
}
 800de92:	bf00      	nop
 800de94:	e7fe      	b.n	800de94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de96:	4b3e      	ldr	r3, [pc, #248]	; (800df90 <xPortStartScheduler+0x120>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a3f      	ldr	r2, [pc, #252]	; (800df98 <xPortStartScheduler+0x128>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d10a      	bne.n	800deb6 <xPortStartScheduler+0x46>
	__asm volatile
 800dea0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	60fb      	str	r3, [r7, #12]
}
 800deb2:	bf00      	nop
 800deb4:	e7fe      	b.n	800deb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800deb6:	4b39      	ldr	r3, [pc, #228]	; (800df9c <xPortStartScheduler+0x12c>)
 800deb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	22ff      	movs	r2, #255	; 0xff
 800dec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	b2db      	uxtb	r3, r3
 800dece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ded0:	78fb      	ldrb	r3, [r7, #3]
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	4b31      	ldr	r3, [pc, #196]	; (800dfa0 <xPortStartScheduler+0x130>)
 800dedc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dede:	4b31      	ldr	r3, [pc, #196]	; (800dfa4 <xPortStartScheduler+0x134>)
 800dee0:	2207      	movs	r2, #7
 800dee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dee4:	e009      	b.n	800defa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dee6:	4b2f      	ldr	r3, [pc, #188]	; (800dfa4 <xPortStartScheduler+0x134>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	3b01      	subs	r3, #1
 800deec:	4a2d      	ldr	r2, [pc, #180]	; (800dfa4 <xPortStartScheduler+0x134>)
 800deee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800def0:	78fb      	ldrb	r3, [r7, #3]
 800def2:	b2db      	uxtb	r3, r3
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	b2db      	uxtb	r3, r3
 800def8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800defa:	78fb      	ldrb	r3, [r7, #3]
 800defc:	b2db      	uxtb	r3, r3
 800defe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df02:	2b80      	cmp	r3, #128	; 0x80
 800df04:	d0ef      	beq.n	800dee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df06:	4b27      	ldr	r3, [pc, #156]	; (800dfa4 <xPortStartScheduler+0x134>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f1c3 0307 	rsb	r3, r3, #7
 800df0e:	2b03      	cmp	r3, #3
 800df10:	d00a      	beq.n	800df28 <xPortStartScheduler+0xb8>
	__asm volatile
 800df12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	60bb      	str	r3, [r7, #8]
}
 800df24:	bf00      	nop
 800df26:	e7fe      	b.n	800df26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df28:	4b1e      	ldr	r3, [pc, #120]	; (800dfa4 <xPortStartScheduler+0x134>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	021b      	lsls	r3, r3, #8
 800df2e:	4a1d      	ldr	r2, [pc, #116]	; (800dfa4 <xPortStartScheduler+0x134>)
 800df30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df32:	4b1c      	ldr	r3, [pc, #112]	; (800dfa4 <xPortStartScheduler+0x134>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df3a:	4a1a      	ldr	r2, [pc, #104]	; (800dfa4 <xPortStartScheduler+0x134>)
 800df3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	b2da      	uxtb	r2, r3
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df46:	4b18      	ldr	r3, [pc, #96]	; (800dfa8 <xPortStartScheduler+0x138>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a17      	ldr	r2, [pc, #92]	; (800dfa8 <xPortStartScheduler+0x138>)
 800df4c:	f043 73f0 	orr.w	r3, r3, #31457280	; 0x1e00000
 800df50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df52:	4b15      	ldr	r3, [pc, #84]	; (800dfa8 <xPortStartScheduler+0x138>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a14      	ldr	r2, [pc, #80]	; (800dfa8 <xPortStartScheduler+0x138>)
 800df58:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 800df5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df5e:	f000 f8dd 	bl	800e11c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df62:	4b12      	ldr	r3, [pc, #72]	; (800dfac <xPortStartScheduler+0x13c>)
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df68:	f000 f8fc 	bl	800e164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800df6c:	4b10      	ldr	r3, [pc, #64]	; (800dfb0 <xPortStartScheduler+0x140>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a0f      	ldr	r2, [pc, #60]	; (800dfb0 <xPortStartScheduler+0x140>)
 800df72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800df76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df78:	f7ff ff66 	bl	800de48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df7c:	f7ff f84c 	bl	800d018 <vTaskSwitchContext>
	prvTaskExitError();
 800df80:	f7ff ff22 	bl	800ddc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3718      	adds	r7, #24
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	e000ed00 	.word	0xe000ed00
 800df94:	410fc271 	.word	0x410fc271
 800df98:	410fc270 	.word	0x410fc270
 800df9c:	e000e400 	.word	0xe000e400
 800dfa0:	20001690 	.word	0x20001690
 800dfa4:	20001694 	.word	0x20001694
 800dfa8:	e000ed20 	.word	0xe000ed20
 800dfac:	20000450 	.word	0x20000450
 800dfb0:	e000ef34 	.word	0xe000ef34

0800dfb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
	__asm volatile
 800dfba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	607b      	str	r3, [r7, #4]
}
 800dfcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dfce:	4b0f      	ldr	r3, [pc, #60]	; (800e00c <vPortEnterCritical+0x58>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	4a0d      	ldr	r2, [pc, #52]	; (800e00c <vPortEnterCritical+0x58>)
 800dfd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dfd8:	4b0c      	ldr	r3, [pc, #48]	; (800e00c <vPortEnterCritical+0x58>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d10f      	bne.n	800e000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dfe0:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <vPortEnterCritical+0x5c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d00a      	beq.n	800e000 <vPortEnterCritical+0x4c>
	__asm volatile
 800dfea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	603b      	str	r3, [r7, #0]
}
 800dffc:	bf00      	nop
 800dffe:	e7fe      	b.n	800dffe <vPortEnterCritical+0x4a>
	}
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr
 800e00c:	20000450 	.word	0x20000450
 800e010:	e000ed04 	.word	0xe000ed04

0800e014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e01a:	4b12      	ldr	r3, [pc, #72]	; (800e064 <vPortExitCritical+0x50>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10a      	bne.n	800e038 <vPortExitCritical+0x24>
	__asm volatile
 800e022:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	607b      	str	r3, [r7, #4]
}
 800e034:	bf00      	nop
 800e036:	e7fe      	b.n	800e036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e038:	4b0a      	ldr	r3, [pc, #40]	; (800e064 <vPortExitCritical+0x50>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	3b01      	subs	r3, #1
 800e03e:	4a09      	ldr	r2, [pc, #36]	; (800e064 <vPortExitCritical+0x50>)
 800e040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e042:	4b08      	ldr	r3, [pc, #32]	; (800e064 <vPortExitCritical+0x50>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d105      	bne.n	800e056 <vPortExitCritical+0x42>
 800e04a:	2300      	movs	r3, #0
 800e04c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	f383 8811 	msr	BASEPRI, r3
}
 800e054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e056:	bf00      	nop
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop
 800e064:	20000450 	.word	0x20000450
	...

0800e070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e070:	f3ef 8009 	mrs	r0, PSP
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	4b15      	ldr	r3, [pc, #84]	; (800e0d0 <pxCurrentTCBConst>)
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	f01e 0f10 	tst.w	lr, #16
 800e080:	bf08      	it	eq
 800e082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08a:	6010      	str	r0, [r2, #0]
 800e08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e090:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800e094:	f380 8811 	msr	BASEPRI, r0
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f7fe ffba 	bl	800d018 <vTaskSwitchContext>
 800e0a4:	f04f 0000 	mov.w	r0, #0
 800e0a8:	f380 8811 	msr	BASEPRI, r0
 800e0ac:	bc09      	pop	{r0, r3}
 800e0ae:	6819      	ldr	r1, [r3, #0]
 800e0b0:	6808      	ldr	r0, [r1, #0]
 800e0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b6:	f01e 0f10 	tst.w	lr, #16
 800e0ba:	bf08      	it	eq
 800e0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e0c0:	f380 8809 	msr	PSP, r0
 800e0c4:	f3bf 8f6f 	isb	sy
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop
 800e0cc:	f3af 8000 	nop.w

0800e0d0 <pxCurrentTCBConst>:
 800e0d0:	20001064 	.word	0x20001064
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop

0800e0d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e0de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	607b      	str	r3, [r7, #4]
}
 800e0f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e0f2:	f7fe fed7 	bl	800cea4 <xTaskIncrementTick>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d003      	beq.n	800e104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e0fc:	4b06      	ldr	r3, [pc, #24]	; (800e118 <xPortSysTickHandler+0x40>)
 800e0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	2300      	movs	r3, #0
 800e106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	f383 8811 	msr	BASEPRI, r3
}
 800e10e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e110:	bf00      	nop
 800e112:	3708      	adds	r7, #8
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	e000ed04 	.word	0xe000ed04

0800e11c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e11c:	b480      	push	{r7}
 800e11e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e120:	4b0b      	ldr	r3, [pc, #44]	; (800e150 <vPortSetupTimerInterrupt+0x34>)
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e126:	4b0b      	ldr	r3, [pc, #44]	; (800e154 <vPortSetupTimerInterrupt+0x38>)
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e12c:	4b0a      	ldr	r3, [pc, #40]	; (800e158 <vPortSetupTimerInterrupt+0x3c>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a0a      	ldr	r2, [pc, #40]	; (800e15c <vPortSetupTimerInterrupt+0x40>)
 800e132:	fba2 2303 	umull	r2, r3, r2, r3
 800e136:	099b      	lsrs	r3, r3, #6
 800e138:	4a09      	ldr	r2, [pc, #36]	; (800e160 <vPortSetupTimerInterrupt+0x44>)
 800e13a:	3b01      	subs	r3, #1
 800e13c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e13e:	4b04      	ldr	r3, [pc, #16]	; (800e150 <vPortSetupTimerInterrupt+0x34>)
 800e140:	2207      	movs	r2, #7
 800e142:	601a      	str	r2, [r3, #0]
}
 800e144:	bf00      	nop
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop
 800e150:	e000e010 	.word	0xe000e010
 800e154:	e000e018 	.word	0xe000e018
 800e158:	20000444 	.word	0x20000444
 800e15c:	10624dd3 	.word	0x10624dd3
 800e160:	e000e014 	.word	0xe000e014

0800e164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e174 <vPortEnableVFP+0x10>
 800e168:	6801      	ldr	r1, [r0, #0]
 800e16a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e16e:	6001      	str	r1, [r0, #0]
 800e170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e172:	bf00      	nop
 800e174:	e000ed88 	.word	0xe000ed88

0800e178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e17e:	f3ef 8305 	mrs	r3, IPSR
 800e182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b0f      	cmp	r3, #15
 800e188:	d914      	bls.n	800e1b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e18a:	4a17      	ldr	r2, [pc, #92]	; (800e1e8 <vPortValidateInterruptPriority+0x70>)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	4413      	add	r3, r2
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e194:	4b15      	ldr	r3, [pc, #84]	; (800e1ec <vPortValidateInterruptPriority+0x74>)
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	7afa      	ldrb	r2, [r7, #11]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d20a      	bcs.n	800e1b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e19e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e1a2:	f383 8811 	msr	BASEPRI, r3
 800e1a6:	f3bf 8f6f 	isb	sy
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	607b      	str	r3, [r7, #4]
}
 800e1b0:	bf00      	nop
 800e1b2:	e7fe      	b.n	800e1b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e1b4:	4b0e      	ldr	r3, [pc, #56]	; (800e1f0 <vPortValidateInterruptPriority+0x78>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e1bc:	4b0d      	ldr	r3, [pc, #52]	; (800e1f4 <vPortValidateInterruptPriority+0x7c>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d90a      	bls.n	800e1da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e1c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	603b      	str	r3, [r7, #0]
}
 800e1d6:	bf00      	nop
 800e1d8:	e7fe      	b.n	800e1d8 <vPortValidateInterruptPriority+0x60>
	}
 800e1da:	bf00      	nop
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr
 800e1e6:	bf00      	nop
 800e1e8:	e000e3f0 	.word	0xe000e3f0
 800e1ec:	20001690 	.word	0x20001690
 800e1f0:	e000ed0c 	.word	0xe000ed0c
 800e1f4:	20001694 	.word	0x20001694

0800e1f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b08a      	sub	sp, #40	; 0x28
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e200:	2300      	movs	r3, #0
 800e202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e204:	f7fe fd92 	bl	800cd2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e208:	4b5b      	ldr	r3, [pc, #364]	; (800e378 <pvPortMalloc+0x180>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d101      	bne.n	800e214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e210:	f000 f920 	bl	800e454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e214:	4b59      	ldr	r3, [pc, #356]	; (800e37c <pvPortMalloc+0x184>)
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4013      	ands	r3, r2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f040 8093 	bne.w	800e348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d01d      	beq.n	800e264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e228:	2208      	movs	r2, #8
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4413      	add	r3, r2
 800e22e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f003 0307 	and.w	r3, r3, #7
 800e236:	2b00      	cmp	r3, #0
 800e238:	d014      	beq.n	800e264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f023 0307 	bic.w	r3, r3, #7
 800e240:	3308      	adds	r3, #8
 800e242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f003 0307 	and.w	r3, r3, #7
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00a      	beq.n	800e264 <pvPortMalloc+0x6c>
	__asm volatile
 800e24e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e252:	f383 8811 	msr	BASEPRI, r3
 800e256:	f3bf 8f6f 	isb	sy
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	617b      	str	r3, [r7, #20]
}
 800e260:	bf00      	nop
 800e262:	e7fe      	b.n	800e262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d06e      	beq.n	800e348 <pvPortMalloc+0x150>
 800e26a:	4b45      	ldr	r3, [pc, #276]	; (800e380 <pvPortMalloc+0x188>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	429a      	cmp	r2, r3
 800e272:	d869      	bhi.n	800e348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e274:	4b43      	ldr	r3, [pc, #268]	; (800e384 <pvPortMalloc+0x18c>)
 800e276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e278:	4b42      	ldr	r3, [pc, #264]	; (800e384 <pvPortMalloc+0x18c>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e27e:	e004      	b.n	800e28a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	429a      	cmp	r2, r3
 800e292:	d903      	bls.n	800e29c <pvPortMalloc+0xa4>
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1f1      	bne.n	800e280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e29c:	4b36      	ldr	r3, [pc, #216]	; (800e378 <pvPortMalloc+0x180>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d050      	beq.n	800e348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2a6:	6a3b      	ldr	r3, [r7, #32]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2208      	movs	r2, #8
 800e2ac:	4413      	add	r3, r2
 800e2ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	6a3b      	ldr	r3, [r7, #32]
 800e2b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	1ad2      	subs	r2, r2, r3
 800e2c0:	2308      	movs	r3, #8
 800e2c2:	005b      	lsls	r3, r3, #1
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d91f      	bls.n	800e308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	f003 0307 	and.w	r3, r3, #7
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00a      	beq.n	800e2f0 <pvPortMalloc+0xf8>
	__asm volatile
 800e2da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	613b      	str	r3, [r7, #16]
}
 800e2ec:	bf00      	nop
 800e2ee:	e7fe      	b.n	800e2ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	685a      	ldr	r2, [r3, #4]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	1ad2      	subs	r2, r2, r3
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e302:	69b8      	ldr	r0, [r7, #24]
 800e304:	f000 f908 	bl	800e518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e308:	4b1d      	ldr	r3, [pc, #116]	; (800e380 <pvPortMalloc+0x188>)
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	4a1b      	ldr	r2, [pc, #108]	; (800e380 <pvPortMalloc+0x188>)
 800e314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e316:	4b1a      	ldr	r3, [pc, #104]	; (800e380 <pvPortMalloc+0x188>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	4b1b      	ldr	r3, [pc, #108]	; (800e388 <pvPortMalloc+0x190>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d203      	bcs.n	800e32a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e322:	4b17      	ldr	r3, [pc, #92]	; (800e380 <pvPortMalloc+0x188>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a18      	ldr	r2, [pc, #96]	; (800e388 <pvPortMalloc+0x190>)
 800e328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32c:	685a      	ldr	r2, [r3, #4]
 800e32e:	4b13      	ldr	r3, [pc, #76]	; (800e37c <pvPortMalloc+0x184>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	431a      	orrs	r2, r3
 800e334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	2200      	movs	r2, #0
 800e33c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e33e:	4b13      	ldr	r3, [pc, #76]	; (800e38c <pvPortMalloc+0x194>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	3301      	adds	r3, #1
 800e344:	4a11      	ldr	r2, [pc, #68]	; (800e38c <pvPortMalloc+0x194>)
 800e346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e348:	f7fe fcfe 	bl	800cd48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	f003 0307 	and.w	r3, r3, #7
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00a      	beq.n	800e36c <pvPortMalloc+0x174>
	__asm volatile
 800e356:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	60fb      	str	r3, [r7, #12]
}
 800e368:	bf00      	nop
 800e36a:	e7fe      	b.n	800e36a <pvPortMalloc+0x172>
	return pvReturn;
 800e36c:	69fb      	ldr	r3, [r7, #28]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3728      	adds	r7, #40	; 0x28
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	200052a0 	.word	0x200052a0
 800e37c:	200052b4 	.word	0x200052b4
 800e380:	200052a4 	.word	0x200052a4
 800e384:	20005298 	.word	0x20005298
 800e388:	200052a8 	.word	0x200052a8
 800e38c:	200052ac 	.word	0x200052ac

0800e390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b086      	sub	sp, #24
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d04d      	beq.n	800e43e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3a2:	2308      	movs	r3, #8
 800e3a4:	425b      	negs	r3, r3
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	685a      	ldr	r2, [r3, #4]
 800e3b4:	4b24      	ldr	r3, [pc, #144]	; (800e448 <vPortFree+0xb8>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4013      	ands	r3, r2
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10a      	bne.n	800e3d4 <vPortFree+0x44>
	__asm volatile
 800e3be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	60fb      	str	r3, [r7, #12]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00a      	beq.n	800e3f2 <vPortFree+0x62>
	__asm volatile
 800e3dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	60bb      	str	r3, [r7, #8]
}
 800e3ee:	bf00      	nop
 800e3f0:	e7fe      	b.n	800e3f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	685a      	ldr	r2, [r3, #4]
 800e3f6:	4b14      	ldr	r3, [pc, #80]	; (800e448 <vPortFree+0xb8>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4013      	ands	r3, r2
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d01e      	beq.n	800e43e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d11a      	bne.n	800e43e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	685a      	ldr	r2, [r3, #4]
 800e40c:	4b0e      	ldr	r3, [pc, #56]	; (800e448 <vPortFree+0xb8>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	43db      	mvns	r3, r3
 800e412:	401a      	ands	r2, r3
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e418:	f7fe fc88 	bl	800cd2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	685a      	ldr	r2, [r3, #4]
 800e420:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <vPortFree+0xbc>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4413      	add	r3, r2
 800e426:	4a09      	ldr	r2, [pc, #36]	; (800e44c <vPortFree+0xbc>)
 800e428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e42a:	6938      	ldr	r0, [r7, #16]
 800e42c:	f000 f874 	bl	800e518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e430:	4b07      	ldr	r3, [pc, #28]	; (800e450 <vPortFree+0xc0>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3301      	adds	r3, #1
 800e436:	4a06      	ldr	r2, [pc, #24]	; (800e450 <vPortFree+0xc0>)
 800e438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e43a:	f7fe fc85 	bl	800cd48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e43e:	bf00      	nop
 800e440:	3718      	adds	r7, #24
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	200052b4 	.word	0x200052b4
 800e44c:	200052a4 	.word	0x200052a4
 800e450:	200052b0 	.word	0x200052b0

0800e454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e45a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e45e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e460:	4b27      	ldr	r3, [pc, #156]	; (800e500 <prvHeapInit+0xac>)
 800e462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f003 0307 	and.w	r3, r3, #7
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00c      	beq.n	800e488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3307      	adds	r3, #7
 800e472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f023 0307 	bic.w	r3, r3, #7
 800e47a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	1ad3      	subs	r3, r2, r3
 800e482:	4a1f      	ldr	r2, [pc, #124]	; (800e500 <prvHeapInit+0xac>)
 800e484:	4413      	add	r3, r2
 800e486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e48c:	4a1d      	ldr	r2, [pc, #116]	; (800e504 <prvHeapInit+0xb0>)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e492:	4b1c      	ldr	r3, [pc, #112]	; (800e504 <prvHeapInit+0xb0>)
 800e494:	2200      	movs	r2, #0
 800e496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	68ba      	ldr	r2, [r7, #8]
 800e49c:	4413      	add	r3, r2
 800e49e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4a0:	2208      	movs	r2, #8
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	1a9b      	subs	r3, r3, r2
 800e4a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f023 0307 	bic.w	r3, r3, #7
 800e4ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	4a15      	ldr	r2, [pc, #84]	; (800e508 <prvHeapInit+0xb4>)
 800e4b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e4b6:	4b14      	ldr	r3, [pc, #80]	; (800e508 <prvHeapInit+0xb4>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4be:	4b12      	ldr	r3, [pc, #72]	; (800e508 <prvHeapInit+0xb4>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	1ad2      	subs	r2, r2, r3
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4d4:	4b0c      	ldr	r3, [pc, #48]	; (800e508 <prvHeapInit+0xb4>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	4a0a      	ldr	r2, [pc, #40]	; (800e50c <prvHeapInit+0xb8>)
 800e4e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	4a09      	ldr	r2, [pc, #36]	; (800e510 <prvHeapInit+0xbc>)
 800e4ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4ec:	4b09      	ldr	r3, [pc, #36]	; (800e514 <prvHeapInit+0xc0>)
 800e4ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e4f2:	601a      	str	r2, [r3, #0]
}
 800e4f4:	bf00      	nop
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr
 800e500:	20001698 	.word	0x20001698
 800e504:	20005298 	.word	0x20005298
 800e508:	200052a0 	.word	0x200052a0
 800e50c:	200052a8 	.word	0x200052a8
 800e510:	200052a4 	.word	0x200052a4
 800e514:	200052b4 	.word	0x200052b4

0800e518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e520:	4b28      	ldr	r3, [pc, #160]	; (800e5c4 <prvInsertBlockIntoFreeList+0xac>)
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	e002      	b.n	800e52c <prvInsertBlockIntoFreeList+0x14>
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	60fb      	str	r3, [r7, #12]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	429a      	cmp	r2, r3
 800e534:	d8f7      	bhi.n	800e526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	4413      	add	r3, r2
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	429a      	cmp	r2, r3
 800e546:	d108      	bne.n	800e55a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	441a      	add	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	441a      	add	r2, r3
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d118      	bne.n	800e5a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	4b15      	ldr	r3, [pc, #84]	; (800e5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	429a      	cmp	r2, r3
 800e578:	d00d      	beq.n	800e596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	441a      	add	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	e008      	b.n	800e5a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e596:	4b0c      	ldr	r3, [pc, #48]	; (800e5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	e003      	b.n	800e5a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d002      	beq.n	800e5b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5b6:	bf00      	nop
 800e5b8:	3714      	adds	r7, #20
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	20005298 	.word	0x20005298
 800e5c8:	200052a0 	.word	0x200052a0

0800e5cc <calloc>:
 800e5cc:	4b02      	ldr	r3, [pc, #8]	; (800e5d8 <calloc+0xc>)
 800e5ce:	460a      	mov	r2, r1
 800e5d0:	4601      	mov	r1, r0
 800e5d2:	6818      	ldr	r0, [r3, #0]
 800e5d4:	f000 ba32 	b.w	800ea3c <_calloc_r>
 800e5d8:	20000454 	.word	0x20000454

0800e5dc <__errno>:
 800e5dc:	4b01      	ldr	r3, [pc, #4]	; (800e5e4 <__errno+0x8>)
 800e5de:	6818      	ldr	r0, [r3, #0]
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	20000454 	.word	0x20000454

0800e5e8 <__sflush_r>:
 800e5e8:	898a      	ldrh	r2, [r1, #12]
 800e5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	0710      	lsls	r0, r2, #28
 800e5f2:	460c      	mov	r4, r1
 800e5f4:	d458      	bmi.n	800e6a8 <__sflush_r+0xc0>
 800e5f6:	684b      	ldr	r3, [r1, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	dc05      	bgt.n	800e608 <__sflush_r+0x20>
 800e5fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	dc02      	bgt.n	800e608 <__sflush_r+0x20>
 800e602:	2000      	movs	r0, #0
 800e604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e60a:	2e00      	cmp	r6, #0
 800e60c:	d0f9      	beq.n	800e602 <__sflush_r+0x1a>
 800e60e:	2300      	movs	r3, #0
 800e610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e614:	682f      	ldr	r7, [r5, #0]
 800e616:	602b      	str	r3, [r5, #0]
 800e618:	d032      	beq.n	800e680 <__sflush_r+0x98>
 800e61a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e61c:	89a3      	ldrh	r3, [r4, #12]
 800e61e:	075a      	lsls	r2, r3, #29
 800e620:	d505      	bpl.n	800e62e <__sflush_r+0x46>
 800e622:	6863      	ldr	r3, [r4, #4]
 800e624:	1ac0      	subs	r0, r0, r3
 800e626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e628:	b10b      	cbz	r3, 800e62e <__sflush_r+0x46>
 800e62a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e62c:	1ac0      	subs	r0, r0, r3
 800e62e:	2300      	movs	r3, #0
 800e630:	4602      	mov	r2, r0
 800e632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e634:	6a21      	ldr	r1, [r4, #32]
 800e636:	4628      	mov	r0, r5
 800e638:	47b0      	blx	r6
 800e63a:	1c43      	adds	r3, r0, #1
 800e63c:	89a3      	ldrh	r3, [r4, #12]
 800e63e:	d106      	bne.n	800e64e <__sflush_r+0x66>
 800e640:	6829      	ldr	r1, [r5, #0]
 800e642:	291d      	cmp	r1, #29
 800e644:	d82c      	bhi.n	800e6a0 <__sflush_r+0xb8>
 800e646:	4a2a      	ldr	r2, [pc, #168]	; (800e6f0 <__sflush_r+0x108>)
 800e648:	40ca      	lsrs	r2, r1
 800e64a:	07d6      	lsls	r6, r2, #31
 800e64c:	d528      	bpl.n	800e6a0 <__sflush_r+0xb8>
 800e64e:	2200      	movs	r2, #0
 800e650:	6062      	str	r2, [r4, #4]
 800e652:	04d9      	lsls	r1, r3, #19
 800e654:	6922      	ldr	r2, [r4, #16]
 800e656:	6022      	str	r2, [r4, #0]
 800e658:	d504      	bpl.n	800e664 <__sflush_r+0x7c>
 800e65a:	1c42      	adds	r2, r0, #1
 800e65c:	d101      	bne.n	800e662 <__sflush_r+0x7a>
 800e65e:	682b      	ldr	r3, [r5, #0]
 800e660:	b903      	cbnz	r3, 800e664 <__sflush_r+0x7c>
 800e662:	6560      	str	r0, [r4, #84]	; 0x54
 800e664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e666:	602f      	str	r7, [r5, #0]
 800e668:	2900      	cmp	r1, #0
 800e66a:	d0ca      	beq.n	800e602 <__sflush_r+0x1a>
 800e66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e670:	4299      	cmp	r1, r3
 800e672:	d002      	beq.n	800e67a <__sflush_r+0x92>
 800e674:	4628      	mov	r0, r5
 800e676:	f000 f9f7 	bl	800ea68 <_free_r>
 800e67a:	2000      	movs	r0, #0
 800e67c:	6360      	str	r0, [r4, #52]	; 0x34
 800e67e:	e7c1      	b.n	800e604 <__sflush_r+0x1c>
 800e680:	6a21      	ldr	r1, [r4, #32]
 800e682:	2301      	movs	r3, #1
 800e684:	4628      	mov	r0, r5
 800e686:	47b0      	blx	r6
 800e688:	1c41      	adds	r1, r0, #1
 800e68a:	d1c7      	bne.n	800e61c <__sflush_r+0x34>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d0c4      	beq.n	800e61c <__sflush_r+0x34>
 800e692:	2b1d      	cmp	r3, #29
 800e694:	d001      	beq.n	800e69a <__sflush_r+0xb2>
 800e696:	2b16      	cmp	r3, #22
 800e698:	d101      	bne.n	800e69e <__sflush_r+0xb6>
 800e69a:	602f      	str	r7, [r5, #0]
 800e69c:	e7b1      	b.n	800e602 <__sflush_r+0x1a>
 800e69e:	89a3      	ldrh	r3, [r4, #12]
 800e6a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6a4:	81a3      	strh	r3, [r4, #12]
 800e6a6:	e7ad      	b.n	800e604 <__sflush_r+0x1c>
 800e6a8:	690f      	ldr	r7, [r1, #16]
 800e6aa:	2f00      	cmp	r7, #0
 800e6ac:	d0a9      	beq.n	800e602 <__sflush_r+0x1a>
 800e6ae:	0793      	lsls	r3, r2, #30
 800e6b0:	680e      	ldr	r6, [r1, #0]
 800e6b2:	bf08      	it	eq
 800e6b4:	694b      	ldreq	r3, [r1, #20]
 800e6b6:	600f      	str	r7, [r1, #0]
 800e6b8:	bf18      	it	ne
 800e6ba:	2300      	movne	r3, #0
 800e6bc:	eba6 0807 	sub.w	r8, r6, r7
 800e6c0:	608b      	str	r3, [r1, #8]
 800e6c2:	f1b8 0f00 	cmp.w	r8, #0
 800e6c6:	dd9c      	ble.n	800e602 <__sflush_r+0x1a>
 800e6c8:	6a21      	ldr	r1, [r4, #32]
 800e6ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6cc:	4643      	mov	r3, r8
 800e6ce:	463a      	mov	r2, r7
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	47b0      	blx	r6
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	dc06      	bgt.n	800e6e6 <__sflush_r+0xfe>
 800e6d8:	89a3      	ldrh	r3, [r4, #12]
 800e6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6de:	81a3      	strh	r3, [r4, #12]
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e4:	e78e      	b.n	800e604 <__sflush_r+0x1c>
 800e6e6:	4407      	add	r7, r0
 800e6e8:	eba8 0800 	sub.w	r8, r8, r0
 800e6ec:	e7e9      	b.n	800e6c2 <__sflush_r+0xda>
 800e6ee:	bf00      	nop
 800e6f0:	20400001 	.word	0x20400001

0800e6f4 <_fflush_r>:
 800e6f4:	b538      	push	{r3, r4, r5, lr}
 800e6f6:	690b      	ldr	r3, [r1, #16]
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	b913      	cbnz	r3, 800e704 <_fflush_r+0x10>
 800e6fe:	2500      	movs	r5, #0
 800e700:	4628      	mov	r0, r5
 800e702:	bd38      	pop	{r3, r4, r5, pc}
 800e704:	b118      	cbz	r0, 800e70e <_fflush_r+0x1a>
 800e706:	6983      	ldr	r3, [r0, #24]
 800e708:	b90b      	cbnz	r3, 800e70e <_fflush_r+0x1a>
 800e70a:	f000 f899 	bl	800e840 <__sinit>
 800e70e:	4b14      	ldr	r3, [pc, #80]	; (800e760 <_fflush_r+0x6c>)
 800e710:	429c      	cmp	r4, r3
 800e712:	d11b      	bne.n	800e74c <_fflush_r+0x58>
 800e714:	686c      	ldr	r4, [r5, #4]
 800e716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d0ef      	beq.n	800e6fe <_fflush_r+0xa>
 800e71e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e720:	07d0      	lsls	r0, r2, #31
 800e722:	d404      	bmi.n	800e72e <_fflush_r+0x3a>
 800e724:	0599      	lsls	r1, r3, #22
 800e726:	d402      	bmi.n	800e72e <_fflush_r+0x3a>
 800e728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e72a:	f000 f94c 	bl	800e9c6 <__retarget_lock_acquire_recursive>
 800e72e:	4628      	mov	r0, r5
 800e730:	4621      	mov	r1, r4
 800e732:	f7ff ff59 	bl	800e5e8 <__sflush_r>
 800e736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e738:	07da      	lsls	r2, r3, #31
 800e73a:	4605      	mov	r5, r0
 800e73c:	d4e0      	bmi.n	800e700 <_fflush_r+0xc>
 800e73e:	89a3      	ldrh	r3, [r4, #12]
 800e740:	059b      	lsls	r3, r3, #22
 800e742:	d4dd      	bmi.n	800e700 <_fflush_r+0xc>
 800e744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e746:	f000 f93f 	bl	800e9c8 <__retarget_lock_release_recursive>
 800e74a:	e7d9      	b.n	800e700 <_fflush_r+0xc>
 800e74c:	4b05      	ldr	r3, [pc, #20]	; (800e764 <_fflush_r+0x70>)
 800e74e:	429c      	cmp	r4, r3
 800e750:	d101      	bne.n	800e756 <_fflush_r+0x62>
 800e752:	68ac      	ldr	r4, [r5, #8]
 800e754:	e7df      	b.n	800e716 <_fflush_r+0x22>
 800e756:	4b04      	ldr	r3, [pc, #16]	; (800e768 <_fflush_r+0x74>)
 800e758:	429c      	cmp	r4, r3
 800e75a:	bf08      	it	eq
 800e75c:	68ec      	ldreq	r4, [r5, #12]
 800e75e:	e7da      	b.n	800e716 <_fflush_r+0x22>
 800e760:	08011498 	.word	0x08011498
 800e764:	080114b8 	.word	0x080114b8
 800e768:	08011478 	.word	0x08011478

0800e76c <fflush>:
 800e76c:	4601      	mov	r1, r0
 800e76e:	b920      	cbnz	r0, 800e77a <fflush+0xe>
 800e770:	4b04      	ldr	r3, [pc, #16]	; (800e784 <fflush+0x18>)
 800e772:	4905      	ldr	r1, [pc, #20]	; (800e788 <fflush+0x1c>)
 800e774:	6818      	ldr	r0, [r3, #0]
 800e776:	f000 b8e1 	b.w	800e93c <_fwalk_reent>
 800e77a:	4b04      	ldr	r3, [pc, #16]	; (800e78c <fflush+0x20>)
 800e77c:	6818      	ldr	r0, [r3, #0]
 800e77e:	f7ff bfb9 	b.w	800e6f4 <_fflush_r>
 800e782:	bf00      	nop
 800e784:	080114d8 	.word	0x080114d8
 800e788:	0800e6f5 	.word	0x0800e6f5
 800e78c:	20000454 	.word	0x20000454

0800e790 <std>:
 800e790:	2300      	movs	r3, #0
 800e792:	b510      	push	{r4, lr}
 800e794:	4604      	mov	r4, r0
 800e796:	e9c0 3300 	strd	r3, r3, [r0]
 800e79a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e79e:	6083      	str	r3, [r0, #8]
 800e7a0:	8181      	strh	r1, [r0, #12]
 800e7a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e7a4:	81c2      	strh	r2, [r0, #14]
 800e7a6:	6183      	str	r3, [r0, #24]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	2208      	movs	r2, #8
 800e7ac:	305c      	adds	r0, #92	; 0x5c
 800e7ae:	f000 f93d 	bl	800ea2c <memset>
 800e7b2:	4b05      	ldr	r3, [pc, #20]	; (800e7c8 <std+0x38>)
 800e7b4:	6263      	str	r3, [r4, #36]	; 0x24
 800e7b6:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <std+0x3c>)
 800e7b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7ba:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <std+0x40>)
 800e7bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7be:	4b05      	ldr	r3, [pc, #20]	; (800e7d4 <std+0x44>)
 800e7c0:	6224      	str	r4, [r4, #32]
 800e7c2:	6323      	str	r3, [r4, #48]	; 0x30
 800e7c4:	bd10      	pop	{r4, pc}
 800e7c6:	bf00      	nop
 800e7c8:	0800ee39 	.word	0x0800ee39
 800e7cc:	0800ee5b 	.word	0x0800ee5b
 800e7d0:	0800ee93 	.word	0x0800ee93
 800e7d4:	0800eeb7 	.word	0x0800eeb7

0800e7d8 <_cleanup_r>:
 800e7d8:	4901      	ldr	r1, [pc, #4]	; (800e7e0 <_cleanup_r+0x8>)
 800e7da:	f000 b8af 	b.w	800e93c <_fwalk_reent>
 800e7de:	bf00      	nop
 800e7e0:	0800e6f5 	.word	0x0800e6f5

0800e7e4 <__sfmoreglue>:
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	2268      	movs	r2, #104	; 0x68
 800e7e8:	1e4d      	subs	r5, r1, #1
 800e7ea:	4355      	muls	r5, r2
 800e7ec:	460e      	mov	r6, r1
 800e7ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e7f2:	f000 f9a5 	bl	800eb40 <_malloc_r>
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	b140      	cbz	r0, 800e80c <__sfmoreglue+0x28>
 800e7fa:	2100      	movs	r1, #0
 800e7fc:	e9c0 1600 	strd	r1, r6, [r0]
 800e800:	300c      	adds	r0, #12
 800e802:	60a0      	str	r0, [r4, #8]
 800e804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e808:	f000 f910 	bl	800ea2c <memset>
 800e80c:	4620      	mov	r0, r4
 800e80e:	bd70      	pop	{r4, r5, r6, pc}

0800e810 <__sfp_lock_acquire>:
 800e810:	4801      	ldr	r0, [pc, #4]	; (800e818 <__sfp_lock_acquire+0x8>)
 800e812:	f000 b8d8 	b.w	800e9c6 <__retarget_lock_acquire_recursive>
 800e816:	bf00      	nop
 800e818:	200052b9 	.word	0x200052b9

0800e81c <__sfp_lock_release>:
 800e81c:	4801      	ldr	r0, [pc, #4]	; (800e824 <__sfp_lock_release+0x8>)
 800e81e:	f000 b8d3 	b.w	800e9c8 <__retarget_lock_release_recursive>
 800e822:	bf00      	nop
 800e824:	200052b9 	.word	0x200052b9

0800e828 <__sinit_lock_acquire>:
 800e828:	4801      	ldr	r0, [pc, #4]	; (800e830 <__sinit_lock_acquire+0x8>)
 800e82a:	f000 b8cc 	b.w	800e9c6 <__retarget_lock_acquire_recursive>
 800e82e:	bf00      	nop
 800e830:	200052ba 	.word	0x200052ba

0800e834 <__sinit_lock_release>:
 800e834:	4801      	ldr	r0, [pc, #4]	; (800e83c <__sinit_lock_release+0x8>)
 800e836:	f000 b8c7 	b.w	800e9c8 <__retarget_lock_release_recursive>
 800e83a:	bf00      	nop
 800e83c:	200052ba 	.word	0x200052ba

0800e840 <__sinit>:
 800e840:	b510      	push	{r4, lr}
 800e842:	4604      	mov	r4, r0
 800e844:	f7ff fff0 	bl	800e828 <__sinit_lock_acquire>
 800e848:	69a3      	ldr	r3, [r4, #24]
 800e84a:	b11b      	cbz	r3, 800e854 <__sinit+0x14>
 800e84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e850:	f7ff bff0 	b.w	800e834 <__sinit_lock_release>
 800e854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e858:	6523      	str	r3, [r4, #80]	; 0x50
 800e85a:	4b13      	ldr	r3, [pc, #76]	; (800e8a8 <__sinit+0x68>)
 800e85c:	4a13      	ldr	r2, [pc, #76]	; (800e8ac <__sinit+0x6c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	62a2      	str	r2, [r4, #40]	; 0x28
 800e862:	42a3      	cmp	r3, r4
 800e864:	bf04      	itt	eq
 800e866:	2301      	moveq	r3, #1
 800e868:	61a3      	streq	r3, [r4, #24]
 800e86a:	4620      	mov	r0, r4
 800e86c:	f000 f820 	bl	800e8b0 <__sfp>
 800e870:	6060      	str	r0, [r4, #4]
 800e872:	4620      	mov	r0, r4
 800e874:	f000 f81c 	bl	800e8b0 <__sfp>
 800e878:	60a0      	str	r0, [r4, #8]
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 f818 	bl	800e8b0 <__sfp>
 800e880:	2200      	movs	r2, #0
 800e882:	60e0      	str	r0, [r4, #12]
 800e884:	2104      	movs	r1, #4
 800e886:	6860      	ldr	r0, [r4, #4]
 800e888:	f7ff ff82 	bl	800e790 <std>
 800e88c:	68a0      	ldr	r0, [r4, #8]
 800e88e:	2201      	movs	r2, #1
 800e890:	2109      	movs	r1, #9
 800e892:	f7ff ff7d 	bl	800e790 <std>
 800e896:	68e0      	ldr	r0, [r4, #12]
 800e898:	2202      	movs	r2, #2
 800e89a:	2112      	movs	r1, #18
 800e89c:	f7ff ff78 	bl	800e790 <std>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	61a3      	str	r3, [r4, #24]
 800e8a4:	e7d2      	b.n	800e84c <__sinit+0xc>
 800e8a6:	bf00      	nop
 800e8a8:	080114d8 	.word	0x080114d8
 800e8ac:	0800e7d9 	.word	0x0800e7d9

0800e8b0 <__sfp>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	f7ff ffac 	bl	800e810 <__sfp_lock_acquire>
 800e8b8:	4b1e      	ldr	r3, [pc, #120]	; (800e934 <__sfp+0x84>)
 800e8ba:	681e      	ldr	r6, [r3, #0]
 800e8bc:	69b3      	ldr	r3, [r6, #24]
 800e8be:	b913      	cbnz	r3, 800e8c6 <__sfp+0x16>
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f7ff ffbd 	bl	800e840 <__sinit>
 800e8c6:	3648      	adds	r6, #72	; 0x48
 800e8c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	d503      	bpl.n	800e8d8 <__sfp+0x28>
 800e8d0:	6833      	ldr	r3, [r6, #0]
 800e8d2:	b30b      	cbz	r3, 800e918 <__sfp+0x68>
 800e8d4:	6836      	ldr	r6, [r6, #0]
 800e8d6:	e7f7      	b.n	800e8c8 <__sfp+0x18>
 800e8d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8dc:	b9d5      	cbnz	r5, 800e914 <__sfp+0x64>
 800e8de:	4b16      	ldr	r3, [pc, #88]	; (800e938 <__sfp+0x88>)
 800e8e0:	60e3      	str	r3, [r4, #12]
 800e8e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8e6:	6665      	str	r5, [r4, #100]	; 0x64
 800e8e8:	f000 f86c 	bl	800e9c4 <__retarget_lock_init_recursive>
 800e8ec:	f7ff ff96 	bl	800e81c <__sfp_lock_release>
 800e8f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e8f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e8f8:	6025      	str	r5, [r4, #0]
 800e8fa:	61a5      	str	r5, [r4, #24]
 800e8fc:	2208      	movs	r2, #8
 800e8fe:	4629      	mov	r1, r5
 800e900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e904:	f000 f892 	bl	800ea2c <memset>
 800e908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e90c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e910:	4620      	mov	r0, r4
 800e912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e914:	3468      	adds	r4, #104	; 0x68
 800e916:	e7d9      	b.n	800e8cc <__sfp+0x1c>
 800e918:	2104      	movs	r1, #4
 800e91a:	4638      	mov	r0, r7
 800e91c:	f7ff ff62 	bl	800e7e4 <__sfmoreglue>
 800e920:	4604      	mov	r4, r0
 800e922:	6030      	str	r0, [r6, #0]
 800e924:	2800      	cmp	r0, #0
 800e926:	d1d5      	bne.n	800e8d4 <__sfp+0x24>
 800e928:	f7ff ff78 	bl	800e81c <__sfp_lock_release>
 800e92c:	230c      	movs	r3, #12
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	e7ee      	b.n	800e910 <__sfp+0x60>
 800e932:	bf00      	nop
 800e934:	080114d8 	.word	0x080114d8
 800e938:	ffff0001 	.word	0xffff0001

0800e93c <_fwalk_reent>:
 800e93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e940:	4606      	mov	r6, r0
 800e942:	4688      	mov	r8, r1
 800e944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e948:	2700      	movs	r7, #0
 800e94a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e94e:	f1b9 0901 	subs.w	r9, r9, #1
 800e952:	d505      	bpl.n	800e960 <_fwalk_reent+0x24>
 800e954:	6824      	ldr	r4, [r4, #0]
 800e956:	2c00      	cmp	r4, #0
 800e958:	d1f7      	bne.n	800e94a <_fwalk_reent+0xe>
 800e95a:	4638      	mov	r0, r7
 800e95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e960:	89ab      	ldrh	r3, [r5, #12]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d907      	bls.n	800e976 <_fwalk_reent+0x3a>
 800e966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e96a:	3301      	adds	r3, #1
 800e96c:	d003      	beq.n	800e976 <_fwalk_reent+0x3a>
 800e96e:	4629      	mov	r1, r5
 800e970:	4630      	mov	r0, r6
 800e972:	47c0      	blx	r8
 800e974:	4307      	orrs	r7, r0
 800e976:	3568      	adds	r5, #104	; 0x68
 800e978:	e7e9      	b.n	800e94e <_fwalk_reent+0x12>
	...

0800e97c <__libc_init_array>:
 800e97c:	b570      	push	{r4, r5, r6, lr}
 800e97e:	4d0d      	ldr	r5, [pc, #52]	; (800e9b4 <__libc_init_array+0x38>)
 800e980:	4c0d      	ldr	r4, [pc, #52]	; (800e9b8 <__libc_init_array+0x3c>)
 800e982:	1b64      	subs	r4, r4, r5
 800e984:	10a4      	asrs	r4, r4, #2
 800e986:	2600      	movs	r6, #0
 800e988:	42a6      	cmp	r6, r4
 800e98a:	d109      	bne.n	800e9a0 <__libc_init_array+0x24>
 800e98c:	4d0b      	ldr	r5, [pc, #44]	; (800e9bc <__libc_init_array+0x40>)
 800e98e:	4c0c      	ldr	r4, [pc, #48]	; (800e9c0 <__libc_init_array+0x44>)
 800e990:	f001 ff68 	bl	8010864 <_init>
 800e994:	1b64      	subs	r4, r4, r5
 800e996:	10a4      	asrs	r4, r4, #2
 800e998:	2600      	movs	r6, #0
 800e99a:	42a6      	cmp	r6, r4
 800e99c:	d105      	bne.n	800e9aa <__libc_init_array+0x2e>
 800e99e:	bd70      	pop	{r4, r5, r6, pc}
 800e9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9a4:	4798      	blx	r3
 800e9a6:	3601      	adds	r6, #1
 800e9a8:	e7ee      	b.n	800e988 <__libc_init_array+0xc>
 800e9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ae:	4798      	blx	r3
 800e9b0:	3601      	adds	r6, #1
 800e9b2:	e7f2      	b.n	800e99a <__libc_init_array+0x1e>
 800e9b4:	080116f0 	.word	0x080116f0
 800e9b8:	080116f0 	.word	0x080116f0
 800e9bc:	080116f0 	.word	0x080116f0
 800e9c0:	080116f4 	.word	0x080116f4

0800e9c4 <__retarget_lock_init_recursive>:
 800e9c4:	4770      	bx	lr

0800e9c6 <__retarget_lock_acquire_recursive>:
 800e9c6:	4770      	bx	lr

0800e9c8 <__retarget_lock_release_recursive>:
 800e9c8:	4770      	bx	lr
	...

0800e9cc <free>:
 800e9cc:	4b02      	ldr	r3, [pc, #8]	; (800e9d8 <free+0xc>)
 800e9ce:	4601      	mov	r1, r0
 800e9d0:	6818      	ldr	r0, [r3, #0]
 800e9d2:	f000 b849 	b.w	800ea68 <_free_r>
 800e9d6:	bf00      	nop
 800e9d8:	20000454 	.word	0x20000454

0800e9dc <memcpy>:
 800e9dc:	440a      	add	r2, r1
 800e9de:	4291      	cmp	r1, r2
 800e9e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9e4:	d100      	bne.n	800e9e8 <memcpy+0xc>
 800e9e6:	4770      	bx	lr
 800e9e8:	b510      	push	{r4, lr}
 800e9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9f2:	4291      	cmp	r1, r2
 800e9f4:	d1f9      	bne.n	800e9ea <memcpy+0xe>
 800e9f6:	bd10      	pop	{r4, pc}

0800e9f8 <memmove>:
 800e9f8:	4288      	cmp	r0, r1
 800e9fa:	b510      	push	{r4, lr}
 800e9fc:	eb01 0402 	add.w	r4, r1, r2
 800ea00:	d902      	bls.n	800ea08 <memmove+0x10>
 800ea02:	4284      	cmp	r4, r0
 800ea04:	4623      	mov	r3, r4
 800ea06:	d807      	bhi.n	800ea18 <memmove+0x20>
 800ea08:	1e43      	subs	r3, r0, #1
 800ea0a:	42a1      	cmp	r1, r4
 800ea0c:	d008      	beq.n	800ea20 <memmove+0x28>
 800ea0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea16:	e7f8      	b.n	800ea0a <memmove+0x12>
 800ea18:	4402      	add	r2, r0
 800ea1a:	4601      	mov	r1, r0
 800ea1c:	428a      	cmp	r2, r1
 800ea1e:	d100      	bne.n	800ea22 <memmove+0x2a>
 800ea20:	bd10      	pop	{r4, pc}
 800ea22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea2a:	e7f7      	b.n	800ea1c <memmove+0x24>

0800ea2c <memset>:
 800ea2c:	4402      	add	r2, r0
 800ea2e:	4603      	mov	r3, r0
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d100      	bne.n	800ea36 <memset+0xa>
 800ea34:	4770      	bx	lr
 800ea36:	f803 1b01 	strb.w	r1, [r3], #1
 800ea3a:	e7f9      	b.n	800ea30 <memset+0x4>

0800ea3c <_calloc_r>:
 800ea3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea3e:	fba1 2402 	umull	r2, r4, r1, r2
 800ea42:	b94c      	cbnz	r4, 800ea58 <_calloc_r+0x1c>
 800ea44:	4611      	mov	r1, r2
 800ea46:	9201      	str	r2, [sp, #4]
 800ea48:	f000 f87a 	bl	800eb40 <_malloc_r>
 800ea4c:	9a01      	ldr	r2, [sp, #4]
 800ea4e:	4605      	mov	r5, r0
 800ea50:	b930      	cbnz	r0, 800ea60 <_calloc_r+0x24>
 800ea52:	4628      	mov	r0, r5
 800ea54:	b003      	add	sp, #12
 800ea56:	bd30      	pop	{r4, r5, pc}
 800ea58:	220c      	movs	r2, #12
 800ea5a:	6002      	str	r2, [r0, #0]
 800ea5c:	2500      	movs	r5, #0
 800ea5e:	e7f8      	b.n	800ea52 <_calloc_r+0x16>
 800ea60:	4621      	mov	r1, r4
 800ea62:	f7ff ffe3 	bl	800ea2c <memset>
 800ea66:	e7f4      	b.n	800ea52 <_calloc_r+0x16>

0800ea68 <_free_r>:
 800ea68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea6a:	2900      	cmp	r1, #0
 800ea6c:	d044      	beq.n	800eaf8 <_free_r+0x90>
 800ea6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea72:	9001      	str	r0, [sp, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f1a1 0404 	sub.w	r4, r1, #4
 800ea7a:	bfb8      	it	lt
 800ea7c:	18e4      	addlt	r4, r4, r3
 800ea7e:	f000 fb79 	bl	800f174 <__malloc_lock>
 800ea82:	4a1e      	ldr	r2, [pc, #120]	; (800eafc <_free_r+0x94>)
 800ea84:	9801      	ldr	r0, [sp, #4]
 800ea86:	6813      	ldr	r3, [r2, #0]
 800ea88:	b933      	cbnz	r3, 800ea98 <_free_r+0x30>
 800ea8a:	6063      	str	r3, [r4, #4]
 800ea8c:	6014      	str	r4, [r2, #0]
 800ea8e:	b003      	add	sp, #12
 800ea90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea94:	f000 bb74 	b.w	800f180 <__malloc_unlock>
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	d908      	bls.n	800eaae <_free_r+0x46>
 800ea9c:	6825      	ldr	r5, [r4, #0]
 800ea9e:	1961      	adds	r1, r4, r5
 800eaa0:	428b      	cmp	r3, r1
 800eaa2:	bf01      	itttt	eq
 800eaa4:	6819      	ldreq	r1, [r3, #0]
 800eaa6:	685b      	ldreq	r3, [r3, #4]
 800eaa8:	1949      	addeq	r1, r1, r5
 800eaaa:	6021      	streq	r1, [r4, #0]
 800eaac:	e7ed      	b.n	800ea8a <_free_r+0x22>
 800eaae:	461a      	mov	r2, r3
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	b10b      	cbz	r3, 800eab8 <_free_r+0x50>
 800eab4:	42a3      	cmp	r3, r4
 800eab6:	d9fa      	bls.n	800eaae <_free_r+0x46>
 800eab8:	6811      	ldr	r1, [r2, #0]
 800eaba:	1855      	adds	r5, r2, r1
 800eabc:	42a5      	cmp	r5, r4
 800eabe:	d10b      	bne.n	800ead8 <_free_r+0x70>
 800eac0:	6824      	ldr	r4, [r4, #0]
 800eac2:	4421      	add	r1, r4
 800eac4:	1854      	adds	r4, r2, r1
 800eac6:	42a3      	cmp	r3, r4
 800eac8:	6011      	str	r1, [r2, #0]
 800eaca:	d1e0      	bne.n	800ea8e <_free_r+0x26>
 800eacc:	681c      	ldr	r4, [r3, #0]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	6053      	str	r3, [r2, #4]
 800ead2:	4421      	add	r1, r4
 800ead4:	6011      	str	r1, [r2, #0]
 800ead6:	e7da      	b.n	800ea8e <_free_r+0x26>
 800ead8:	d902      	bls.n	800eae0 <_free_r+0x78>
 800eada:	230c      	movs	r3, #12
 800eadc:	6003      	str	r3, [r0, #0]
 800eade:	e7d6      	b.n	800ea8e <_free_r+0x26>
 800eae0:	6825      	ldr	r5, [r4, #0]
 800eae2:	1961      	adds	r1, r4, r5
 800eae4:	428b      	cmp	r3, r1
 800eae6:	bf04      	itt	eq
 800eae8:	6819      	ldreq	r1, [r3, #0]
 800eaea:	685b      	ldreq	r3, [r3, #4]
 800eaec:	6063      	str	r3, [r4, #4]
 800eaee:	bf04      	itt	eq
 800eaf0:	1949      	addeq	r1, r1, r5
 800eaf2:	6021      	streq	r1, [r4, #0]
 800eaf4:	6054      	str	r4, [r2, #4]
 800eaf6:	e7ca      	b.n	800ea8e <_free_r+0x26>
 800eaf8:	b003      	add	sp, #12
 800eafa:	bd30      	pop	{r4, r5, pc}
 800eafc:	200052bc 	.word	0x200052bc

0800eb00 <sbrk_aligned>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	4e0e      	ldr	r6, [pc, #56]	; (800eb3c <sbrk_aligned+0x3c>)
 800eb04:	460c      	mov	r4, r1
 800eb06:	6831      	ldr	r1, [r6, #0]
 800eb08:	4605      	mov	r5, r0
 800eb0a:	b911      	cbnz	r1, 800eb12 <sbrk_aligned+0x12>
 800eb0c:	f000 f984 	bl	800ee18 <_sbrk_r>
 800eb10:	6030      	str	r0, [r6, #0]
 800eb12:	4621      	mov	r1, r4
 800eb14:	4628      	mov	r0, r5
 800eb16:	f000 f97f 	bl	800ee18 <_sbrk_r>
 800eb1a:	1c43      	adds	r3, r0, #1
 800eb1c:	d00a      	beq.n	800eb34 <sbrk_aligned+0x34>
 800eb1e:	1cc4      	adds	r4, r0, #3
 800eb20:	f024 0403 	bic.w	r4, r4, #3
 800eb24:	42a0      	cmp	r0, r4
 800eb26:	d007      	beq.n	800eb38 <sbrk_aligned+0x38>
 800eb28:	1a21      	subs	r1, r4, r0
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	f000 f974 	bl	800ee18 <_sbrk_r>
 800eb30:	3001      	adds	r0, #1
 800eb32:	d101      	bne.n	800eb38 <sbrk_aligned+0x38>
 800eb34:	f04f 34ff 	mov.w	r4, #4294967295
 800eb38:	4620      	mov	r0, r4
 800eb3a:	bd70      	pop	{r4, r5, r6, pc}
 800eb3c:	200052c0 	.word	0x200052c0

0800eb40 <_malloc_r>:
 800eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb44:	1ccd      	adds	r5, r1, #3
 800eb46:	f025 0503 	bic.w	r5, r5, #3
 800eb4a:	3508      	adds	r5, #8
 800eb4c:	2d0c      	cmp	r5, #12
 800eb4e:	bf38      	it	cc
 800eb50:	250c      	movcc	r5, #12
 800eb52:	2d00      	cmp	r5, #0
 800eb54:	4607      	mov	r7, r0
 800eb56:	db01      	blt.n	800eb5c <_malloc_r+0x1c>
 800eb58:	42a9      	cmp	r1, r5
 800eb5a:	d905      	bls.n	800eb68 <_malloc_r+0x28>
 800eb5c:	230c      	movs	r3, #12
 800eb5e:	603b      	str	r3, [r7, #0]
 800eb60:	2600      	movs	r6, #0
 800eb62:	4630      	mov	r0, r6
 800eb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb68:	4e2e      	ldr	r6, [pc, #184]	; (800ec24 <_malloc_r+0xe4>)
 800eb6a:	f000 fb03 	bl	800f174 <__malloc_lock>
 800eb6e:	6833      	ldr	r3, [r6, #0]
 800eb70:	461c      	mov	r4, r3
 800eb72:	bb34      	cbnz	r4, 800ebc2 <_malloc_r+0x82>
 800eb74:	4629      	mov	r1, r5
 800eb76:	4638      	mov	r0, r7
 800eb78:	f7ff ffc2 	bl	800eb00 <sbrk_aligned>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	4604      	mov	r4, r0
 800eb80:	d14d      	bne.n	800ec1e <_malloc_r+0xde>
 800eb82:	6834      	ldr	r4, [r6, #0]
 800eb84:	4626      	mov	r6, r4
 800eb86:	2e00      	cmp	r6, #0
 800eb88:	d140      	bne.n	800ec0c <_malloc_r+0xcc>
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	4638      	mov	r0, r7
 800eb90:	eb04 0803 	add.w	r8, r4, r3
 800eb94:	f000 f940 	bl	800ee18 <_sbrk_r>
 800eb98:	4580      	cmp	r8, r0
 800eb9a:	d13a      	bne.n	800ec12 <_malloc_r+0xd2>
 800eb9c:	6821      	ldr	r1, [r4, #0]
 800eb9e:	3503      	adds	r5, #3
 800eba0:	1a6d      	subs	r5, r5, r1
 800eba2:	f025 0503 	bic.w	r5, r5, #3
 800eba6:	3508      	adds	r5, #8
 800eba8:	2d0c      	cmp	r5, #12
 800ebaa:	bf38      	it	cc
 800ebac:	250c      	movcc	r5, #12
 800ebae:	4629      	mov	r1, r5
 800ebb0:	4638      	mov	r0, r7
 800ebb2:	f7ff ffa5 	bl	800eb00 <sbrk_aligned>
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	d02b      	beq.n	800ec12 <_malloc_r+0xd2>
 800ebba:	6823      	ldr	r3, [r4, #0]
 800ebbc:	442b      	add	r3, r5
 800ebbe:	6023      	str	r3, [r4, #0]
 800ebc0:	e00e      	b.n	800ebe0 <_malloc_r+0xa0>
 800ebc2:	6822      	ldr	r2, [r4, #0]
 800ebc4:	1b52      	subs	r2, r2, r5
 800ebc6:	d41e      	bmi.n	800ec06 <_malloc_r+0xc6>
 800ebc8:	2a0b      	cmp	r2, #11
 800ebca:	d916      	bls.n	800ebfa <_malloc_r+0xba>
 800ebcc:	1961      	adds	r1, r4, r5
 800ebce:	42a3      	cmp	r3, r4
 800ebd0:	6025      	str	r5, [r4, #0]
 800ebd2:	bf18      	it	ne
 800ebd4:	6059      	strne	r1, [r3, #4]
 800ebd6:	6863      	ldr	r3, [r4, #4]
 800ebd8:	bf08      	it	eq
 800ebda:	6031      	streq	r1, [r6, #0]
 800ebdc:	5162      	str	r2, [r4, r5]
 800ebde:	604b      	str	r3, [r1, #4]
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	f104 060b 	add.w	r6, r4, #11
 800ebe6:	f000 facb 	bl	800f180 <__malloc_unlock>
 800ebea:	f026 0607 	bic.w	r6, r6, #7
 800ebee:	1d23      	adds	r3, r4, #4
 800ebf0:	1af2      	subs	r2, r6, r3
 800ebf2:	d0b6      	beq.n	800eb62 <_malloc_r+0x22>
 800ebf4:	1b9b      	subs	r3, r3, r6
 800ebf6:	50a3      	str	r3, [r4, r2]
 800ebf8:	e7b3      	b.n	800eb62 <_malloc_r+0x22>
 800ebfa:	6862      	ldr	r2, [r4, #4]
 800ebfc:	42a3      	cmp	r3, r4
 800ebfe:	bf0c      	ite	eq
 800ec00:	6032      	streq	r2, [r6, #0]
 800ec02:	605a      	strne	r2, [r3, #4]
 800ec04:	e7ec      	b.n	800ebe0 <_malloc_r+0xa0>
 800ec06:	4623      	mov	r3, r4
 800ec08:	6864      	ldr	r4, [r4, #4]
 800ec0a:	e7b2      	b.n	800eb72 <_malloc_r+0x32>
 800ec0c:	4634      	mov	r4, r6
 800ec0e:	6876      	ldr	r6, [r6, #4]
 800ec10:	e7b9      	b.n	800eb86 <_malloc_r+0x46>
 800ec12:	230c      	movs	r3, #12
 800ec14:	603b      	str	r3, [r7, #0]
 800ec16:	4638      	mov	r0, r7
 800ec18:	f000 fab2 	bl	800f180 <__malloc_unlock>
 800ec1c:	e7a1      	b.n	800eb62 <_malloc_r+0x22>
 800ec1e:	6025      	str	r5, [r4, #0]
 800ec20:	e7de      	b.n	800ebe0 <_malloc_r+0xa0>
 800ec22:	bf00      	nop
 800ec24:	200052bc 	.word	0x200052bc

0800ec28 <iprintf>:
 800ec28:	b40f      	push	{r0, r1, r2, r3}
 800ec2a:	4b0a      	ldr	r3, [pc, #40]	; (800ec54 <iprintf+0x2c>)
 800ec2c:	b513      	push	{r0, r1, r4, lr}
 800ec2e:	681c      	ldr	r4, [r3, #0]
 800ec30:	b124      	cbz	r4, 800ec3c <iprintf+0x14>
 800ec32:	69a3      	ldr	r3, [r4, #24]
 800ec34:	b913      	cbnz	r3, 800ec3c <iprintf+0x14>
 800ec36:	4620      	mov	r0, r4
 800ec38:	f7ff fe02 	bl	800e840 <__sinit>
 800ec3c:	ab05      	add	r3, sp, #20
 800ec3e:	9a04      	ldr	r2, [sp, #16]
 800ec40:	68a1      	ldr	r1, [r4, #8]
 800ec42:	9301      	str	r3, [sp, #4]
 800ec44:	4620      	mov	r0, r4
 800ec46:	f000 facb 	bl	800f1e0 <_vfiprintf_r>
 800ec4a:	b002      	add	sp, #8
 800ec4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec50:	b004      	add	sp, #16
 800ec52:	4770      	bx	lr
 800ec54:	20000454 	.word	0x20000454

0800ec58 <_puts_r>:
 800ec58:	b570      	push	{r4, r5, r6, lr}
 800ec5a:	460e      	mov	r6, r1
 800ec5c:	4605      	mov	r5, r0
 800ec5e:	b118      	cbz	r0, 800ec68 <_puts_r+0x10>
 800ec60:	6983      	ldr	r3, [r0, #24]
 800ec62:	b90b      	cbnz	r3, 800ec68 <_puts_r+0x10>
 800ec64:	f7ff fdec 	bl	800e840 <__sinit>
 800ec68:	69ab      	ldr	r3, [r5, #24]
 800ec6a:	68ac      	ldr	r4, [r5, #8]
 800ec6c:	b913      	cbnz	r3, 800ec74 <_puts_r+0x1c>
 800ec6e:	4628      	mov	r0, r5
 800ec70:	f7ff fde6 	bl	800e840 <__sinit>
 800ec74:	4b2c      	ldr	r3, [pc, #176]	; (800ed28 <_puts_r+0xd0>)
 800ec76:	429c      	cmp	r4, r3
 800ec78:	d120      	bne.n	800ecbc <_puts_r+0x64>
 800ec7a:	686c      	ldr	r4, [r5, #4]
 800ec7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec7e:	07db      	lsls	r3, r3, #31
 800ec80:	d405      	bmi.n	800ec8e <_puts_r+0x36>
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	0598      	lsls	r0, r3, #22
 800ec86:	d402      	bmi.n	800ec8e <_puts_r+0x36>
 800ec88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec8a:	f7ff fe9c 	bl	800e9c6 <__retarget_lock_acquire_recursive>
 800ec8e:	89a3      	ldrh	r3, [r4, #12]
 800ec90:	0719      	lsls	r1, r3, #28
 800ec92:	d51d      	bpl.n	800ecd0 <_puts_r+0x78>
 800ec94:	6923      	ldr	r3, [r4, #16]
 800ec96:	b1db      	cbz	r3, 800ecd0 <_puts_r+0x78>
 800ec98:	3e01      	subs	r6, #1
 800ec9a:	68a3      	ldr	r3, [r4, #8]
 800ec9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eca0:	3b01      	subs	r3, #1
 800eca2:	60a3      	str	r3, [r4, #8]
 800eca4:	bb39      	cbnz	r1, 800ecf6 <_puts_r+0x9e>
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	da38      	bge.n	800ed1c <_puts_r+0xc4>
 800ecaa:	4622      	mov	r2, r4
 800ecac:	210a      	movs	r1, #10
 800ecae:	4628      	mov	r0, r5
 800ecb0:	f000 f906 	bl	800eec0 <__swbuf_r>
 800ecb4:	3001      	adds	r0, #1
 800ecb6:	d011      	beq.n	800ecdc <_puts_r+0x84>
 800ecb8:	250a      	movs	r5, #10
 800ecba:	e011      	b.n	800ece0 <_puts_r+0x88>
 800ecbc:	4b1b      	ldr	r3, [pc, #108]	; (800ed2c <_puts_r+0xd4>)
 800ecbe:	429c      	cmp	r4, r3
 800ecc0:	d101      	bne.n	800ecc6 <_puts_r+0x6e>
 800ecc2:	68ac      	ldr	r4, [r5, #8]
 800ecc4:	e7da      	b.n	800ec7c <_puts_r+0x24>
 800ecc6:	4b1a      	ldr	r3, [pc, #104]	; (800ed30 <_puts_r+0xd8>)
 800ecc8:	429c      	cmp	r4, r3
 800ecca:	bf08      	it	eq
 800eccc:	68ec      	ldreq	r4, [r5, #12]
 800ecce:	e7d5      	b.n	800ec7c <_puts_r+0x24>
 800ecd0:	4621      	mov	r1, r4
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	f000 f958 	bl	800ef88 <__swsetup_r>
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d0dd      	beq.n	800ec98 <_puts_r+0x40>
 800ecdc:	f04f 35ff 	mov.w	r5, #4294967295
 800ece0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ece2:	07da      	lsls	r2, r3, #31
 800ece4:	d405      	bmi.n	800ecf2 <_puts_r+0x9a>
 800ece6:	89a3      	ldrh	r3, [r4, #12]
 800ece8:	059b      	lsls	r3, r3, #22
 800ecea:	d402      	bmi.n	800ecf2 <_puts_r+0x9a>
 800ecec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecee:	f7ff fe6b 	bl	800e9c8 <__retarget_lock_release_recursive>
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	bd70      	pop	{r4, r5, r6, pc}
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	da04      	bge.n	800ed04 <_puts_r+0xac>
 800ecfa:	69a2      	ldr	r2, [r4, #24]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	dc06      	bgt.n	800ed0e <_puts_r+0xb6>
 800ed00:	290a      	cmp	r1, #10
 800ed02:	d004      	beq.n	800ed0e <_puts_r+0xb6>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	1c5a      	adds	r2, r3, #1
 800ed08:	6022      	str	r2, [r4, #0]
 800ed0a:	7019      	strb	r1, [r3, #0]
 800ed0c:	e7c5      	b.n	800ec9a <_puts_r+0x42>
 800ed0e:	4622      	mov	r2, r4
 800ed10:	4628      	mov	r0, r5
 800ed12:	f000 f8d5 	bl	800eec0 <__swbuf_r>
 800ed16:	3001      	adds	r0, #1
 800ed18:	d1bf      	bne.n	800ec9a <_puts_r+0x42>
 800ed1a:	e7df      	b.n	800ecdc <_puts_r+0x84>
 800ed1c:	6823      	ldr	r3, [r4, #0]
 800ed1e:	250a      	movs	r5, #10
 800ed20:	1c5a      	adds	r2, r3, #1
 800ed22:	6022      	str	r2, [r4, #0]
 800ed24:	701d      	strb	r5, [r3, #0]
 800ed26:	e7db      	b.n	800ece0 <_puts_r+0x88>
 800ed28:	08011498 	.word	0x08011498
 800ed2c:	080114b8 	.word	0x080114b8
 800ed30:	08011478 	.word	0x08011478

0800ed34 <puts>:
 800ed34:	4b02      	ldr	r3, [pc, #8]	; (800ed40 <puts+0xc>)
 800ed36:	4601      	mov	r1, r0
 800ed38:	6818      	ldr	r0, [r3, #0]
 800ed3a:	f7ff bf8d 	b.w	800ec58 <_puts_r>
 800ed3e:	bf00      	nop
 800ed40:	20000454 	.word	0x20000454

0800ed44 <cleanup_glue>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	460c      	mov	r4, r1
 800ed48:	6809      	ldr	r1, [r1, #0]
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	b109      	cbz	r1, 800ed52 <cleanup_glue+0xe>
 800ed4e:	f7ff fff9 	bl	800ed44 <cleanup_glue>
 800ed52:	4621      	mov	r1, r4
 800ed54:	4628      	mov	r0, r5
 800ed56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed5a:	f7ff be85 	b.w	800ea68 <_free_r>
	...

0800ed60 <_reclaim_reent>:
 800ed60:	4b2c      	ldr	r3, [pc, #176]	; (800ee14 <_reclaim_reent+0xb4>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4283      	cmp	r3, r0
 800ed66:	b570      	push	{r4, r5, r6, lr}
 800ed68:	4604      	mov	r4, r0
 800ed6a:	d051      	beq.n	800ee10 <_reclaim_reent+0xb0>
 800ed6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ed6e:	b143      	cbz	r3, 800ed82 <_reclaim_reent+0x22>
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d14a      	bne.n	800ee0c <_reclaim_reent+0xac>
 800ed76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed78:	6819      	ldr	r1, [r3, #0]
 800ed7a:	b111      	cbz	r1, 800ed82 <_reclaim_reent+0x22>
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	f7ff fe73 	bl	800ea68 <_free_r>
 800ed82:	6961      	ldr	r1, [r4, #20]
 800ed84:	b111      	cbz	r1, 800ed8c <_reclaim_reent+0x2c>
 800ed86:	4620      	mov	r0, r4
 800ed88:	f7ff fe6e 	bl	800ea68 <_free_r>
 800ed8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed8e:	b111      	cbz	r1, 800ed96 <_reclaim_reent+0x36>
 800ed90:	4620      	mov	r0, r4
 800ed92:	f7ff fe69 	bl	800ea68 <_free_r>
 800ed96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ed98:	b111      	cbz	r1, 800eda0 <_reclaim_reent+0x40>
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f7ff fe64 	bl	800ea68 <_free_r>
 800eda0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eda2:	b111      	cbz	r1, 800edaa <_reclaim_reent+0x4a>
 800eda4:	4620      	mov	r0, r4
 800eda6:	f7ff fe5f 	bl	800ea68 <_free_r>
 800edaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800edac:	b111      	cbz	r1, 800edb4 <_reclaim_reent+0x54>
 800edae:	4620      	mov	r0, r4
 800edb0:	f7ff fe5a 	bl	800ea68 <_free_r>
 800edb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800edb6:	b111      	cbz	r1, 800edbe <_reclaim_reent+0x5e>
 800edb8:	4620      	mov	r0, r4
 800edba:	f7ff fe55 	bl	800ea68 <_free_r>
 800edbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800edc0:	b111      	cbz	r1, 800edc8 <_reclaim_reent+0x68>
 800edc2:	4620      	mov	r0, r4
 800edc4:	f7ff fe50 	bl	800ea68 <_free_r>
 800edc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edca:	b111      	cbz	r1, 800edd2 <_reclaim_reent+0x72>
 800edcc:	4620      	mov	r0, r4
 800edce:	f7ff fe4b 	bl	800ea68 <_free_r>
 800edd2:	69a3      	ldr	r3, [r4, #24]
 800edd4:	b1e3      	cbz	r3, 800ee10 <_reclaim_reent+0xb0>
 800edd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800edd8:	4620      	mov	r0, r4
 800edda:	4798      	blx	r3
 800eddc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800edde:	b1b9      	cbz	r1, 800ee10 <_reclaim_reent+0xb0>
 800ede0:	4620      	mov	r0, r4
 800ede2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ede6:	f7ff bfad 	b.w	800ed44 <cleanup_glue>
 800edea:	5949      	ldr	r1, [r1, r5]
 800edec:	b941      	cbnz	r1, 800ee00 <_reclaim_reent+0xa0>
 800edee:	3504      	adds	r5, #4
 800edf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edf2:	2d80      	cmp	r5, #128	; 0x80
 800edf4:	68d9      	ldr	r1, [r3, #12]
 800edf6:	d1f8      	bne.n	800edea <_reclaim_reent+0x8a>
 800edf8:	4620      	mov	r0, r4
 800edfa:	f7ff fe35 	bl	800ea68 <_free_r>
 800edfe:	e7ba      	b.n	800ed76 <_reclaim_reent+0x16>
 800ee00:	680e      	ldr	r6, [r1, #0]
 800ee02:	4620      	mov	r0, r4
 800ee04:	f7ff fe30 	bl	800ea68 <_free_r>
 800ee08:	4631      	mov	r1, r6
 800ee0a:	e7ef      	b.n	800edec <_reclaim_reent+0x8c>
 800ee0c:	2500      	movs	r5, #0
 800ee0e:	e7ef      	b.n	800edf0 <_reclaim_reent+0x90>
 800ee10:	bd70      	pop	{r4, r5, r6, pc}
 800ee12:	bf00      	nop
 800ee14:	20000454 	.word	0x20000454

0800ee18 <_sbrk_r>:
 800ee18:	b538      	push	{r3, r4, r5, lr}
 800ee1a:	4d06      	ldr	r5, [pc, #24]	; (800ee34 <_sbrk_r+0x1c>)
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	4604      	mov	r4, r0
 800ee20:	4608      	mov	r0, r1
 800ee22:	602b      	str	r3, [r5, #0]
 800ee24:	f7fa fb92 	bl	800954c <_sbrk>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	d102      	bne.n	800ee32 <_sbrk_r+0x1a>
 800ee2c:	682b      	ldr	r3, [r5, #0]
 800ee2e:	b103      	cbz	r3, 800ee32 <_sbrk_r+0x1a>
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	200052c4 	.word	0x200052c4

0800ee38 <__sread>:
 800ee38:	b510      	push	{r4, lr}
 800ee3a:	460c      	mov	r4, r1
 800ee3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee40:	f000 fc92 	bl	800f768 <_read_r>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	bfab      	itete	ge
 800ee48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee4c:	181b      	addge	r3, r3, r0
 800ee4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee52:	bfac      	ite	ge
 800ee54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee56:	81a3      	strhlt	r3, [r4, #12]
 800ee58:	bd10      	pop	{r4, pc}

0800ee5a <__swrite>:
 800ee5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee5e:	461f      	mov	r7, r3
 800ee60:	898b      	ldrh	r3, [r1, #12]
 800ee62:	05db      	lsls	r3, r3, #23
 800ee64:	4605      	mov	r5, r0
 800ee66:	460c      	mov	r4, r1
 800ee68:	4616      	mov	r6, r2
 800ee6a:	d505      	bpl.n	800ee78 <__swrite+0x1e>
 800ee6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee70:	2302      	movs	r3, #2
 800ee72:	2200      	movs	r2, #0
 800ee74:	f000 f906 	bl	800f084 <_lseek_r>
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee82:	81a3      	strh	r3, [r4, #12]
 800ee84:	4632      	mov	r2, r6
 800ee86:	463b      	mov	r3, r7
 800ee88:	4628      	mov	r0, r5
 800ee8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8e:	f000 b869 	b.w	800ef64 <_write_r>

0800ee92 <__sseek>:
 800ee92:	b510      	push	{r4, lr}
 800ee94:	460c      	mov	r4, r1
 800ee96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee9a:	f000 f8f3 	bl	800f084 <_lseek_r>
 800ee9e:	1c43      	adds	r3, r0, #1
 800eea0:	89a3      	ldrh	r3, [r4, #12]
 800eea2:	bf15      	itete	ne
 800eea4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eeaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eeae:	81a3      	strheq	r3, [r4, #12]
 800eeb0:	bf18      	it	ne
 800eeb2:	81a3      	strhne	r3, [r4, #12]
 800eeb4:	bd10      	pop	{r4, pc}

0800eeb6 <__sclose>:
 800eeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeba:	f000 b8d3 	b.w	800f064 <_close_r>
	...

0800eec0 <__swbuf_r>:
 800eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec2:	460e      	mov	r6, r1
 800eec4:	4614      	mov	r4, r2
 800eec6:	4605      	mov	r5, r0
 800eec8:	b118      	cbz	r0, 800eed2 <__swbuf_r+0x12>
 800eeca:	6983      	ldr	r3, [r0, #24]
 800eecc:	b90b      	cbnz	r3, 800eed2 <__swbuf_r+0x12>
 800eece:	f7ff fcb7 	bl	800e840 <__sinit>
 800eed2:	4b21      	ldr	r3, [pc, #132]	; (800ef58 <__swbuf_r+0x98>)
 800eed4:	429c      	cmp	r4, r3
 800eed6:	d12b      	bne.n	800ef30 <__swbuf_r+0x70>
 800eed8:	686c      	ldr	r4, [r5, #4]
 800eeda:	69a3      	ldr	r3, [r4, #24]
 800eedc:	60a3      	str	r3, [r4, #8]
 800eede:	89a3      	ldrh	r3, [r4, #12]
 800eee0:	071a      	lsls	r2, r3, #28
 800eee2:	d52f      	bpl.n	800ef44 <__swbuf_r+0x84>
 800eee4:	6923      	ldr	r3, [r4, #16]
 800eee6:	b36b      	cbz	r3, 800ef44 <__swbuf_r+0x84>
 800eee8:	6923      	ldr	r3, [r4, #16]
 800eeea:	6820      	ldr	r0, [r4, #0]
 800eeec:	1ac0      	subs	r0, r0, r3
 800eeee:	6963      	ldr	r3, [r4, #20]
 800eef0:	b2f6      	uxtb	r6, r6
 800eef2:	4283      	cmp	r3, r0
 800eef4:	4637      	mov	r7, r6
 800eef6:	dc04      	bgt.n	800ef02 <__swbuf_r+0x42>
 800eef8:	4621      	mov	r1, r4
 800eefa:	4628      	mov	r0, r5
 800eefc:	f7ff fbfa 	bl	800e6f4 <_fflush_r>
 800ef00:	bb30      	cbnz	r0, 800ef50 <__swbuf_r+0x90>
 800ef02:	68a3      	ldr	r3, [r4, #8]
 800ef04:	3b01      	subs	r3, #1
 800ef06:	60a3      	str	r3, [r4, #8]
 800ef08:	6823      	ldr	r3, [r4, #0]
 800ef0a:	1c5a      	adds	r2, r3, #1
 800ef0c:	6022      	str	r2, [r4, #0]
 800ef0e:	701e      	strb	r6, [r3, #0]
 800ef10:	6963      	ldr	r3, [r4, #20]
 800ef12:	3001      	adds	r0, #1
 800ef14:	4283      	cmp	r3, r0
 800ef16:	d004      	beq.n	800ef22 <__swbuf_r+0x62>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	07db      	lsls	r3, r3, #31
 800ef1c:	d506      	bpl.n	800ef2c <__swbuf_r+0x6c>
 800ef1e:	2e0a      	cmp	r6, #10
 800ef20:	d104      	bne.n	800ef2c <__swbuf_r+0x6c>
 800ef22:	4621      	mov	r1, r4
 800ef24:	4628      	mov	r0, r5
 800ef26:	f7ff fbe5 	bl	800e6f4 <_fflush_r>
 800ef2a:	b988      	cbnz	r0, 800ef50 <__swbuf_r+0x90>
 800ef2c:	4638      	mov	r0, r7
 800ef2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef30:	4b0a      	ldr	r3, [pc, #40]	; (800ef5c <__swbuf_r+0x9c>)
 800ef32:	429c      	cmp	r4, r3
 800ef34:	d101      	bne.n	800ef3a <__swbuf_r+0x7a>
 800ef36:	68ac      	ldr	r4, [r5, #8]
 800ef38:	e7cf      	b.n	800eeda <__swbuf_r+0x1a>
 800ef3a:	4b09      	ldr	r3, [pc, #36]	; (800ef60 <__swbuf_r+0xa0>)
 800ef3c:	429c      	cmp	r4, r3
 800ef3e:	bf08      	it	eq
 800ef40:	68ec      	ldreq	r4, [r5, #12]
 800ef42:	e7ca      	b.n	800eeda <__swbuf_r+0x1a>
 800ef44:	4621      	mov	r1, r4
 800ef46:	4628      	mov	r0, r5
 800ef48:	f000 f81e 	bl	800ef88 <__swsetup_r>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d0cb      	beq.n	800eee8 <__swbuf_r+0x28>
 800ef50:	f04f 37ff 	mov.w	r7, #4294967295
 800ef54:	e7ea      	b.n	800ef2c <__swbuf_r+0x6c>
 800ef56:	bf00      	nop
 800ef58:	08011498 	.word	0x08011498
 800ef5c:	080114b8 	.word	0x080114b8
 800ef60:	08011478 	.word	0x08011478

0800ef64 <_write_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d07      	ldr	r5, [pc, #28]	; (800ef84 <_write_r+0x20>)
 800ef68:	4604      	mov	r4, r0
 800ef6a:	4608      	mov	r0, r1
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	2200      	movs	r2, #0
 800ef70:	602a      	str	r2, [r5, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	f7fa fa99 	bl	80094aa <_write>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d102      	bne.n	800ef82 <_write_r+0x1e>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b103      	cbz	r3, 800ef82 <_write_r+0x1e>
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	200052c4 	.word	0x200052c4

0800ef88 <__swsetup_r>:
 800ef88:	4b32      	ldr	r3, [pc, #200]	; (800f054 <__swsetup_r+0xcc>)
 800ef8a:	b570      	push	{r4, r5, r6, lr}
 800ef8c:	681d      	ldr	r5, [r3, #0]
 800ef8e:	4606      	mov	r6, r0
 800ef90:	460c      	mov	r4, r1
 800ef92:	b125      	cbz	r5, 800ef9e <__swsetup_r+0x16>
 800ef94:	69ab      	ldr	r3, [r5, #24]
 800ef96:	b913      	cbnz	r3, 800ef9e <__swsetup_r+0x16>
 800ef98:	4628      	mov	r0, r5
 800ef9a:	f7ff fc51 	bl	800e840 <__sinit>
 800ef9e:	4b2e      	ldr	r3, [pc, #184]	; (800f058 <__swsetup_r+0xd0>)
 800efa0:	429c      	cmp	r4, r3
 800efa2:	d10f      	bne.n	800efc4 <__swsetup_r+0x3c>
 800efa4:	686c      	ldr	r4, [r5, #4]
 800efa6:	89a3      	ldrh	r3, [r4, #12]
 800efa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efac:	0719      	lsls	r1, r3, #28
 800efae:	d42c      	bmi.n	800f00a <__swsetup_r+0x82>
 800efb0:	06dd      	lsls	r5, r3, #27
 800efb2:	d411      	bmi.n	800efd8 <__swsetup_r+0x50>
 800efb4:	2309      	movs	r3, #9
 800efb6:	6033      	str	r3, [r6, #0]
 800efb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800efbc:	81a3      	strh	r3, [r4, #12]
 800efbe:	f04f 30ff 	mov.w	r0, #4294967295
 800efc2:	e03e      	b.n	800f042 <__swsetup_r+0xba>
 800efc4:	4b25      	ldr	r3, [pc, #148]	; (800f05c <__swsetup_r+0xd4>)
 800efc6:	429c      	cmp	r4, r3
 800efc8:	d101      	bne.n	800efce <__swsetup_r+0x46>
 800efca:	68ac      	ldr	r4, [r5, #8]
 800efcc:	e7eb      	b.n	800efa6 <__swsetup_r+0x1e>
 800efce:	4b24      	ldr	r3, [pc, #144]	; (800f060 <__swsetup_r+0xd8>)
 800efd0:	429c      	cmp	r4, r3
 800efd2:	bf08      	it	eq
 800efd4:	68ec      	ldreq	r4, [r5, #12]
 800efd6:	e7e6      	b.n	800efa6 <__swsetup_r+0x1e>
 800efd8:	0758      	lsls	r0, r3, #29
 800efda:	d512      	bpl.n	800f002 <__swsetup_r+0x7a>
 800efdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efde:	b141      	cbz	r1, 800eff2 <__swsetup_r+0x6a>
 800efe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efe4:	4299      	cmp	r1, r3
 800efe6:	d002      	beq.n	800efee <__swsetup_r+0x66>
 800efe8:	4630      	mov	r0, r6
 800efea:	f7ff fd3d 	bl	800ea68 <_free_r>
 800efee:	2300      	movs	r3, #0
 800eff0:	6363      	str	r3, [r4, #52]	; 0x34
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eff8:	81a3      	strh	r3, [r4, #12]
 800effa:	2300      	movs	r3, #0
 800effc:	6063      	str	r3, [r4, #4]
 800effe:	6923      	ldr	r3, [r4, #16]
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	89a3      	ldrh	r3, [r4, #12]
 800f004:	f043 0308 	orr.w	r3, r3, #8
 800f008:	81a3      	strh	r3, [r4, #12]
 800f00a:	6923      	ldr	r3, [r4, #16]
 800f00c:	b94b      	cbnz	r3, 800f022 <__swsetup_r+0x9a>
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f018:	d003      	beq.n	800f022 <__swsetup_r+0x9a>
 800f01a:	4621      	mov	r1, r4
 800f01c:	4630      	mov	r0, r6
 800f01e:	f000 f869 	bl	800f0f4 <__smakebuf_r>
 800f022:	89a0      	ldrh	r0, [r4, #12]
 800f024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f028:	f010 0301 	ands.w	r3, r0, #1
 800f02c:	d00a      	beq.n	800f044 <__swsetup_r+0xbc>
 800f02e:	2300      	movs	r3, #0
 800f030:	60a3      	str	r3, [r4, #8]
 800f032:	6963      	ldr	r3, [r4, #20]
 800f034:	425b      	negs	r3, r3
 800f036:	61a3      	str	r3, [r4, #24]
 800f038:	6923      	ldr	r3, [r4, #16]
 800f03a:	b943      	cbnz	r3, 800f04e <__swsetup_r+0xc6>
 800f03c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f040:	d1ba      	bne.n	800efb8 <__swsetup_r+0x30>
 800f042:	bd70      	pop	{r4, r5, r6, pc}
 800f044:	0781      	lsls	r1, r0, #30
 800f046:	bf58      	it	pl
 800f048:	6963      	ldrpl	r3, [r4, #20]
 800f04a:	60a3      	str	r3, [r4, #8]
 800f04c:	e7f4      	b.n	800f038 <__swsetup_r+0xb0>
 800f04e:	2000      	movs	r0, #0
 800f050:	e7f7      	b.n	800f042 <__swsetup_r+0xba>
 800f052:	bf00      	nop
 800f054:	20000454 	.word	0x20000454
 800f058:	08011498 	.word	0x08011498
 800f05c:	080114b8 	.word	0x080114b8
 800f060:	08011478 	.word	0x08011478

0800f064 <_close_r>:
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	4d06      	ldr	r5, [pc, #24]	; (800f080 <_close_r+0x1c>)
 800f068:	2300      	movs	r3, #0
 800f06a:	4604      	mov	r4, r0
 800f06c:	4608      	mov	r0, r1
 800f06e:	602b      	str	r3, [r5, #0]
 800f070:	f7fa fa37 	bl	80094e2 <_close>
 800f074:	1c43      	adds	r3, r0, #1
 800f076:	d102      	bne.n	800f07e <_close_r+0x1a>
 800f078:	682b      	ldr	r3, [r5, #0]
 800f07a:	b103      	cbz	r3, 800f07e <_close_r+0x1a>
 800f07c:	6023      	str	r3, [r4, #0]
 800f07e:	bd38      	pop	{r3, r4, r5, pc}
 800f080:	200052c4 	.word	0x200052c4

0800f084 <_lseek_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4d07      	ldr	r5, [pc, #28]	; (800f0a4 <_lseek_r+0x20>)
 800f088:	4604      	mov	r4, r0
 800f08a:	4608      	mov	r0, r1
 800f08c:	4611      	mov	r1, r2
 800f08e:	2200      	movs	r2, #0
 800f090:	602a      	str	r2, [r5, #0]
 800f092:	461a      	mov	r2, r3
 800f094:	f7fa fa4c 	bl	8009530 <_lseek>
 800f098:	1c43      	adds	r3, r0, #1
 800f09a:	d102      	bne.n	800f0a2 <_lseek_r+0x1e>
 800f09c:	682b      	ldr	r3, [r5, #0]
 800f09e:	b103      	cbz	r3, 800f0a2 <_lseek_r+0x1e>
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	200052c4 	.word	0x200052c4

0800f0a8 <__swhatbuf_r>:
 800f0a8:	b570      	push	{r4, r5, r6, lr}
 800f0aa:	460e      	mov	r6, r1
 800f0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b0:	2900      	cmp	r1, #0
 800f0b2:	b096      	sub	sp, #88	; 0x58
 800f0b4:	4614      	mov	r4, r2
 800f0b6:	461d      	mov	r5, r3
 800f0b8:	da08      	bge.n	800f0cc <__swhatbuf_r+0x24>
 800f0ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	602a      	str	r2, [r5, #0]
 800f0c2:	061a      	lsls	r2, r3, #24
 800f0c4:	d410      	bmi.n	800f0e8 <__swhatbuf_r+0x40>
 800f0c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0ca:	e00e      	b.n	800f0ea <__swhatbuf_r+0x42>
 800f0cc:	466a      	mov	r2, sp
 800f0ce:	f000 fb5d 	bl	800f78c <_fstat_r>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	dbf1      	blt.n	800f0ba <__swhatbuf_r+0x12>
 800f0d6:	9a01      	ldr	r2, [sp, #4]
 800f0d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0e0:	425a      	negs	r2, r3
 800f0e2:	415a      	adcs	r2, r3
 800f0e4:	602a      	str	r2, [r5, #0]
 800f0e6:	e7ee      	b.n	800f0c6 <__swhatbuf_r+0x1e>
 800f0e8:	2340      	movs	r3, #64	; 0x40
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	b016      	add	sp, #88	; 0x58
 800f0f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f0f4 <__smakebuf_r>:
 800f0f4:	898b      	ldrh	r3, [r1, #12]
 800f0f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0f8:	079d      	lsls	r5, r3, #30
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	460c      	mov	r4, r1
 800f0fe:	d507      	bpl.n	800f110 <__smakebuf_r+0x1c>
 800f100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	6123      	str	r3, [r4, #16]
 800f108:	2301      	movs	r3, #1
 800f10a:	6163      	str	r3, [r4, #20]
 800f10c:	b002      	add	sp, #8
 800f10e:	bd70      	pop	{r4, r5, r6, pc}
 800f110:	ab01      	add	r3, sp, #4
 800f112:	466a      	mov	r2, sp
 800f114:	f7ff ffc8 	bl	800f0a8 <__swhatbuf_r>
 800f118:	9900      	ldr	r1, [sp, #0]
 800f11a:	4605      	mov	r5, r0
 800f11c:	4630      	mov	r0, r6
 800f11e:	f7ff fd0f 	bl	800eb40 <_malloc_r>
 800f122:	b948      	cbnz	r0, 800f138 <__smakebuf_r+0x44>
 800f124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f128:	059a      	lsls	r2, r3, #22
 800f12a:	d4ef      	bmi.n	800f10c <__smakebuf_r+0x18>
 800f12c:	f023 0303 	bic.w	r3, r3, #3
 800f130:	f043 0302 	orr.w	r3, r3, #2
 800f134:	81a3      	strh	r3, [r4, #12]
 800f136:	e7e3      	b.n	800f100 <__smakebuf_r+0xc>
 800f138:	4b0d      	ldr	r3, [pc, #52]	; (800f170 <__smakebuf_r+0x7c>)
 800f13a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f13c:	89a3      	ldrh	r3, [r4, #12]
 800f13e:	6020      	str	r0, [r4, #0]
 800f140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f144:	81a3      	strh	r3, [r4, #12]
 800f146:	9b00      	ldr	r3, [sp, #0]
 800f148:	6163      	str	r3, [r4, #20]
 800f14a:	9b01      	ldr	r3, [sp, #4]
 800f14c:	6120      	str	r0, [r4, #16]
 800f14e:	b15b      	cbz	r3, 800f168 <__smakebuf_r+0x74>
 800f150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f154:	4630      	mov	r0, r6
 800f156:	f000 fb2b 	bl	800f7b0 <_isatty_r>
 800f15a:	b128      	cbz	r0, 800f168 <__smakebuf_r+0x74>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	f023 0303 	bic.w	r3, r3, #3
 800f162:	f043 0301 	orr.w	r3, r3, #1
 800f166:	81a3      	strh	r3, [r4, #12]
 800f168:	89a0      	ldrh	r0, [r4, #12]
 800f16a:	4305      	orrs	r5, r0
 800f16c:	81a5      	strh	r5, [r4, #12]
 800f16e:	e7cd      	b.n	800f10c <__smakebuf_r+0x18>
 800f170:	0800e7d9 	.word	0x0800e7d9

0800f174 <__malloc_lock>:
 800f174:	4801      	ldr	r0, [pc, #4]	; (800f17c <__malloc_lock+0x8>)
 800f176:	f7ff bc26 	b.w	800e9c6 <__retarget_lock_acquire_recursive>
 800f17a:	bf00      	nop
 800f17c:	200052b8 	.word	0x200052b8

0800f180 <__malloc_unlock>:
 800f180:	4801      	ldr	r0, [pc, #4]	; (800f188 <__malloc_unlock+0x8>)
 800f182:	f7ff bc21 	b.w	800e9c8 <__retarget_lock_release_recursive>
 800f186:	bf00      	nop
 800f188:	200052b8 	.word	0x200052b8

0800f18c <__sfputc_r>:
 800f18c:	6893      	ldr	r3, [r2, #8]
 800f18e:	3b01      	subs	r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	b410      	push	{r4}
 800f194:	6093      	str	r3, [r2, #8]
 800f196:	da08      	bge.n	800f1aa <__sfputc_r+0x1e>
 800f198:	6994      	ldr	r4, [r2, #24]
 800f19a:	42a3      	cmp	r3, r4
 800f19c:	db01      	blt.n	800f1a2 <__sfputc_r+0x16>
 800f19e:	290a      	cmp	r1, #10
 800f1a0:	d103      	bne.n	800f1aa <__sfputc_r+0x1e>
 800f1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1a6:	f7ff be8b 	b.w	800eec0 <__swbuf_r>
 800f1aa:	6813      	ldr	r3, [r2, #0]
 800f1ac:	1c58      	adds	r0, r3, #1
 800f1ae:	6010      	str	r0, [r2, #0]
 800f1b0:	7019      	strb	r1, [r3, #0]
 800f1b2:	4608      	mov	r0, r1
 800f1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <__sfputs_r>:
 800f1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1bc:	4606      	mov	r6, r0
 800f1be:	460f      	mov	r7, r1
 800f1c0:	4614      	mov	r4, r2
 800f1c2:	18d5      	adds	r5, r2, r3
 800f1c4:	42ac      	cmp	r4, r5
 800f1c6:	d101      	bne.n	800f1cc <__sfputs_r+0x12>
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	e007      	b.n	800f1dc <__sfputs_r+0x22>
 800f1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1d0:	463a      	mov	r2, r7
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7ff ffda 	bl	800f18c <__sfputc_r>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d1f3      	bne.n	800f1c4 <__sfputs_r+0xa>
 800f1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1e0 <_vfiprintf_r>:
 800f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	460d      	mov	r5, r1
 800f1e6:	b09d      	sub	sp, #116	; 0x74
 800f1e8:	4614      	mov	r4, r2
 800f1ea:	4698      	mov	r8, r3
 800f1ec:	4606      	mov	r6, r0
 800f1ee:	b118      	cbz	r0, 800f1f8 <_vfiprintf_r+0x18>
 800f1f0:	6983      	ldr	r3, [r0, #24]
 800f1f2:	b90b      	cbnz	r3, 800f1f8 <_vfiprintf_r+0x18>
 800f1f4:	f7ff fb24 	bl	800e840 <__sinit>
 800f1f8:	4b89      	ldr	r3, [pc, #548]	; (800f420 <_vfiprintf_r+0x240>)
 800f1fa:	429d      	cmp	r5, r3
 800f1fc:	d11b      	bne.n	800f236 <_vfiprintf_r+0x56>
 800f1fe:	6875      	ldr	r5, [r6, #4]
 800f200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f202:	07d9      	lsls	r1, r3, #31
 800f204:	d405      	bmi.n	800f212 <_vfiprintf_r+0x32>
 800f206:	89ab      	ldrh	r3, [r5, #12]
 800f208:	059a      	lsls	r2, r3, #22
 800f20a:	d402      	bmi.n	800f212 <_vfiprintf_r+0x32>
 800f20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f20e:	f7ff fbda 	bl	800e9c6 <__retarget_lock_acquire_recursive>
 800f212:	89ab      	ldrh	r3, [r5, #12]
 800f214:	071b      	lsls	r3, r3, #28
 800f216:	d501      	bpl.n	800f21c <_vfiprintf_r+0x3c>
 800f218:	692b      	ldr	r3, [r5, #16]
 800f21a:	b9eb      	cbnz	r3, 800f258 <_vfiprintf_r+0x78>
 800f21c:	4629      	mov	r1, r5
 800f21e:	4630      	mov	r0, r6
 800f220:	f7ff feb2 	bl	800ef88 <__swsetup_r>
 800f224:	b1c0      	cbz	r0, 800f258 <_vfiprintf_r+0x78>
 800f226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f228:	07dc      	lsls	r4, r3, #31
 800f22a:	d50e      	bpl.n	800f24a <_vfiprintf_r+0x6a>
 800f22c:	f04f 30ff 	mov.w	r0, #4294967295
 800f230:	b01d      	add	sp, #116	; 0x74
 800f232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f236:	4b7b      	ldr	r3, [pc, #492]	; (800f424 <_vfiprintf_r+0x244>)
 800f238:	429d      	cmp	r5, r3
 800f23a:	d101      	bne.n	800f240 <_vfiprintf_r+0x60>
 800f23c:	68b5      	ldr	r5, [r6, #8]
 800f23e:	e7df      	b.n	800f200 <_vfiprintf_r+0x20>
 800f240:	4b79      	ldr	r3, [pc, #484]	; (800f428 <_vfiprintf_r+0x248>)
 800f242:	429d      	cmp	r5, r3
 800f244:	bf08      	it	eq
 800f246:	68f5      	ldreq	r5, [r6, #12]
 800f248:	e7da      	b.n	800f200 <_vfiprintf_r+0x20>
 800f24a:	89ab      	ldrh	r3, [r5, #12]
 800f24c:	0598      	lsls	r0, r3, #22
 800f24e:	d4ed      	bmi.n	800f22c <_vfiprintf_r+0x4c>
 800f250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f252:	f7ff fbb9 	bl	800e9c8 <__retarget_lock_release_recursive>
 800f256:	e7e9      	b.n	800f22c <_vfiprintf_r+0x4c>
 800f258:	2300      	movs	r3, #0
 800f25a:	9309      	str	r3, [sp, #36]	; 0x24
 800f25c:	2320      	movs	r3, #32
 800f25e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f262:	f8cd 800c 	str.w	r8, [sp, #12]
 800f266:	2330      	movs	r3, #48	; 0x30
 800f268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f42c <_vfiprintf_r+0x24c>
 800f26c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f270:	f04f 0901 	mov.w	r9, #1
 800f274:	4623      	mov	r3, r4
 800f276:	469a      	mov	sl, r3
 800f278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f27c:	b10a      	cbz	r2, 800f282 <_vfiprintf_r+0xa2>
 800f27e:	2a25      	cmp	r2, #37	; 0x25
 800f280:	d1f9      	bne.n	800f276 <_vfiprintf_r+0x96>
 800f282:	ebba 0b04 	subs.w	fp, sl, r4
 800f286:	d00b      	beq.n	800f2a0 <_vfiprintf_r+0xc0>
 800f288:	465b      	mov	r3, fp
 800f28a:	4622      	mov	r2, r4
 800f28c:	4629      	mov	r1, r5
 800f28e:	4630      	mov	r0, r6
 800f290:	f7ff ff93 	bl	800f1ba <__sfputs_r>
 800f294:	3001      	adds	r0, #1
 800f296:	f000 80aa 	beq.w	800f3ee <_vfiprintf_r+0x20e>
 800f29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f29c:	445a      	add	r2, fp
 800f29e:	9209      	str	r2, [sp, #36]	; 0x24
 800f2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 80a2 	beq.w	800f3ee <_vfiprintf_r+0x20e>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2b4:	f10a 0a01 	add.w	sl, sl, #1
 800f2b8:	9304      	str	r3, [sp, #16]
 800f2ba:	9307      	str	r3, [sp, #28]
 800f2bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2c0:	931a      	str	r3, [sp, #104]	; 0x68
 800f2c2:	4654      	mov	r4, sl
 800f2c4:	2205      	movs	r2, #5
 800f2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ca:	4858      	ldr	r0, [pc, #352]	; (800f42c <_vfiprintf_r+0x24c>)
 800f2cc:	f7f0 ff88 	bl	80001e0 <memchr>
 800f2d0:	9a04      	ldr	r2, [sp, #16]
 800f2d2:	b9d8      	cbnz	r0, 800f30c <_vfiprintf_r+0x12c>
 800f2d4:	06d1      	lsls	r1, r2, #27
 800f2d6:	bf44      	itt	mi
 800f2d8:	2320      	movmi	r3, #32
 800f2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2de:	0713      	lsls	r3, r2, #28
 800f2e0:	bf44      	itt	mi
 800f2e2:	232b      	movmi	r3, #43	; 0x2b
 800f2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ee:	d015      	beq.n	800f31c <_vfiprintf_r+0x13c>
 800f2f0:	9a07      	ldr	r2, [sp, #28]
 800f2f2:	4654      	mov	r4, sl
 800f2f4:	2000      	movs	r0, #0
 800f2f6:	f04f 0c0a 	mov.w	ip, #10
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f300:	3b30      	subs	r3, #48	; 0x30
 800f302:	2b09      	cmp	r3, #9
 800f304:	d94e      	bls.n	800f3a4 <_vfiprintf_r+0x1c4>
 800f306:	b1b0      	cbz	r0, 800f336 <_vfiprintf_r+0x156>
 800f308:	9207      	str	r2, [sp, #28]
 800f30a:	e014      	b.n	800f336 <_vfiprintf_r+0x156>
 800f30c:	eba0 0308 	sub.w	r3, r0, r8
 800f310:	fa09 f303 	lsl.w	r3, r9, r3
 800f314:	4313      	orrs	r3, r2
 800f316:	9304      	str	r3, [sp, #16]
 800f318:	46a2      	mov	sl, r4
 800f31a:	e7d2      	b.n	800f2c2 <_vfiprintf_r+0xe2>
 800f31c:	9b03      	ldr	r3, [sp, #12]
 800f31e:	1d19      	adds	r1, r3, #4
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	9103      	str	r1, [sp, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	bfbb      	ittet	lt
 800f328:	425b      	neglt	r3, r3
 800f32a:	f042 0202 	orrlt.w	r2, r2, #2
 800f32e:	9307      	strge	r3, [sp, #28]
 800f330:	9307      	strlt	r3, [sp, #28]
 800f332:	bfb8      	it	lt
 800f334:	9204      	strlt	r2, [sp, #16]
 800f336:	7823      	ldrb	r3, [r4, #0]
 800f338:	2b2e      	cmp	r3, #46	; 0x2e
 800f33a:	d10c      	bne.n	800f356 <_vfiprintf_r+0x176>
 800f33c:	7863      	ldrb	r3, [r4, #1]
 800f33e:	2b2a      	cmp	r3, #42	; 0x2a
 800f340:	d135      	bne.n	800f3ae <_vfiprintf_r+0x1ce>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	1d1a      	adds	r2, r3, #4
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	9203      	str	r2, [sp, #12]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	bfb8      	it	lt
 800f34e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f352:	3402      	adds	r4, #2
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f43c <_vfiprintf_r+0x25c>
 800f35a:	7821      	ldrb	r1, [r4, #0]
 800f35c:	2203      	movs	r2, #3
 800f35e:	4650      	mov	r0, sl
 800f360:	f7f0 ff3e 	bl	80001e0 <memchr>
 800f364:	b140      	cbz	r0, 800f378 <_vfiprintf_r+0x198>
 800f366:	2340      	movs	r3, #64	; 0x40
 800f368:	eba0 000a 	sub.w	r0, r0, sl
 800f36c:	fa03 f000 	lsl.w	r0, r3, r0
 800f370:	9b04      	ldr	r3, [sp, #16]
 800f372:	4303      	orrs	r3, r0
 800f374:	3401      	adds	r4, #1
 800f376:	9304      	str	r3, [sp, #16]
 800f378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f37c:	482c      	ldr	r0, [pc, #176]	; (800f430 <_vfiprintf_r+0x250>)
 800f37e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f382:	2206      	movs	r2, #6
 800f384:	f7f0 ff2c 	bl	80001e0 <memchr>
 800f388:	2800      	cmp	r0, #0
 800f38a:	d03f      	beq.n	800f40c <_vfiprintf_r+0x22c>
 800f38c:	4b29      	ldr	r3, [pc, #164]	; (800f434 <_vfiprintf_r+0x254>)
 800f38e:	bb1b      	cbnz	r3, 800f3d8 <_vfiprintf_r+0x1f8>
 800f390:	9b03      	ldr	r3, [sp, #12]
 800f392:	3307      	adds	r3, #7
 800f394:	f023 0307 	bic.w	r3, r3, #7
 800f398:	3308      	adds	r3, #8
 800f39a:	9303      	str	r3, [sp, #12]
 800f39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f39e:	443b      	add	r3, r7
 800f3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a2:	e767      	b.n	800f274 <_vfiprintf_r+0x94>
 800f3a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3a8:	460c      	mov	r4, r1
 800f3aa:	2001      	movs	r0, #1
 800f3ac:	e7a5      	b.n	800f2fa <_vfiprintf_r+0x11a>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	3401      	adds	r4, #1
 800f3b2:	9305      	str	r3, [sp, #20]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	f04f 0c0a 	mov.w	ip, #10
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3c0:	3a30      	subs	r2, #48	; 0x30
 800f3c2:	2a09      	cmp	r2, #9
 800f3c4:	d903      	bls.n	800f3ce <_vfiprintf_r+0x1ee>
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d0c5      	beq.n	800f356 <_vfiprintf_r+0x176>
 800f3ca:	9105      	str	r1, [sp, #20]
 800f3cc:	e7c3      	b.n	800f356 <_vfiprintf_r+0x176>
 800f3ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e7f0      	b.n	800f3ba <_vfiprintf_r+0x1da>
 800f3d8:	ab03      	add	r3, sp, #12
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	462a      	mov	r2, r5
 800f3de:	4b16      	ldr	r3, [pc, #88]	; (800f438 <_vfiprintf_r+0x258>)
 800f3e0:	a904      	add	r1, sp, #16
 800f3e2:	4630      	mov	r0, r6
 800f3e4:	f3af 8000 	nop.w
 800f3e8:	4607      	mov	r7, r0
 800f3ea:	1c78      	adds	r0, r7, #1
 800f3ec:	d1d6      	bne.n	800f39c <_vfiprintf_r+0x1bc>
 800f3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3f0:	07d9      	lsls	r1, r3, #31
 800f3f2:	d405      	bmi.n	800f400 <_vfiprintf_r+0x220>
 800f3f4:	89ab      	ldrh	r3, [r5, #12]
 800f3f6:	059a      	lsls	r2, r3, #22
 800f3f8:	d402      	bmi.n	800f400 <_vfiprintf_r+0x220>
 800f3fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3fc:	f7ff fae4 	bl	800e9c8 <__retarget_lock_release_recursive>
 800f400:	89ab      	ldrh	r3, [r5, #12]
 800f402:	065b      	lsls	r3, r3, #25
 800f404:	f53f af12 	bmi.w	800f22c <_vfiprintf_r+0x4c>
 800f408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f40a:	e711      	b.n	800f230 <_vfiprintf_r+0x50>
 800f40c:	ab03      	add	r3, sp, #12
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	462a      	mov	r2, r5
 800f412:	4b09      	ldr	r3, [pc, #36]	; (800f438 <_vfiprintf_r+0x258>)
 800f414:	a904      	add	r1, sp, #16
 800f416:	4630      	mov	r0, r6
 800f418:	f000 f880 	bl	800f51c <_printf_i>
 800f41c:	e7e4      	b.n	800f3e8 <_vfiprintf_r+0x208>
 800f41e:	bf00      	nop
 800f420:	08011498 	.word	0x08011498
 800f424:	080114b8 	.word	0x080114b8
 800f428:	08011478 	.word	0x08011478
 800f42c:	080114dc 	.word	0x080114dc
 800f430:	080114e6 	.word	0x080114e6
 800f434:	00000000 	.word	0x00000000
 800f438:	0800f1bb 	.word	0x0800f1bb
 800f43c:	080114e2 	.word	0x080114e2

0800f440 <_printf_common>:
 800f440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f444:	4616      	mov	r6, r2
 800f446:	4699      	mov	r9, r3
 800f448:	688a      	ldr	r2, [r1, #8]
 800f44a:	690b      	ldr	r3, [r1, #16]
 800f44c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f450:	4293      	cmp	r3, r2
 800f452:	bfb8      	it	lt
 800f454:	4613      	movlt	r3, r2
 800f456:	6033      	str	r3, [r6, #0]
 800f458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f45c:	4607      	mov	r7, r0
 800f45e:	460c      	mov	r4, r1
 800f460:	b10a      	cbz	r2, 800f466 <_printf_common+0x26>
 800f462:	3301      	adds	r3, #1
 800f464:	6033      	str	r3, [r6, #0]
 800f466:	6823      	ldr	r3, [r4, #0]
 800f468:	0699      	lsls	r1, r3, #26
 800f46a:	bf42      	ittt	mi
 800f46c:	6833      	ldrmi	r3, [r6, #0]
 800f46e:	3302      	addmi	r3, #2
 800f470:	6033      	strmi	r3, [r6, #0]
 800f472:	6825      	ldr	r5, [r4, #0]
 800f474:	f015 0506 	ands.w	r5, r5, #6
 800f478:	d106      	bne.n	800f488 <_printf_common+0x48>
 800f47a:	f104 0a19 	add.w	sl, r4, #25
 800f47e:	68e3      	ldr	r3, [r4, #12]
 800f480:	6832      	ldr	r2, [r6, #0]
 800f482:	1a9b      	subs	r3, r3, r2
 800f484:	42ab      	cmp	r3, r5
 800f486:	dc26      	bgt.n	800f4d6 <_printf_common+0x96>
 800f488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f48c:	1e13      	subs	r3, r2, #0
 800f48e:	6822      	ldr	r2, [r4, #0]
 800f490:	bf18      	it	ne
 800f492:	2301      	movne	r3, #1
 800f494:	0692      	lsls	r2, r2, #26
 800f496:	d42b      	bmi.n	800f4f0 <_printf_common+0xb0>
 800f498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f49c:	4649      	mov	r1, r9
 800f49e:	4638      	mov	r0, r7
 800f4a0:	47c0      	blx	r8
 800f4a2:	3001      	adds	r0, #1
 800f4a4:	d01e      	beq.n	800f4e4 <_printf_common+0xa4>
 800f4a6:	6823      	ldr	r3, [r4, #0]
 800f4a8:	68e5      	ldr	r5, [r4, #12]
 800f4aa:	6832      	ldr	r2, [r6, #0]
 800f4ac:	f003 0306 	and.w	r3, r3, #6
 800f4b0:	2b04      	cmp	r3, #4
 800f4b2:	bf08      	it	eq
 800f4b4:	1aad      	subeq	r5, r5, r2
 800f4b6:	68a3      	ldr	r3, [r4, #8]
 800f4b8:	6922      	ldr	r2, [r4, #16]
 800f4ba:	bf0c      	ite	eq
 800f4bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4c0:	2500      	movne	r5, #0
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	bfc4      	itt	gt
 800f4c6:	1a9b      	subgt	r3, r3, r2
 800f4c8:	18ed      	addgt	r5, r5, r3
 800f4ca:	2600      	movs	r6, #0
 800f4cc:	341a      	adds	r4, #26
 800f4ce:	42b5      	cmp	r5, r6
 800f4d0:	d11a      	bne.n	800f508 <_printf_common+0xc8>
 800f4d2:	2000      	movs	r0, #0
 800f4d4:	e008      	b.n	800f4e8 <_printf_common+0xa8>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	4652      	mov	r2, sl
 800f4da:	4649      	mov	r1, r9
 800f4dc:	4638      	mov	r0, r7
 800f4de:	47c0      	blx	r8
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	d103      	bne.n	800f4ec <_printf_common+0xac>
 800f4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ec:	3501      	adds	r5, #1
 800f4ee:	e7c6      	b.n	800f47e <_printf_common+0x3e>
 800f4f0:	18e1      	adds	r1, r4, r3
 800f4f2:	1c5a      	adds	r2, r3, #1
 800f4f4:	2030      	movs	r0, #48	; 0x30
 800f4f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4fa:	4422      	add	r2, r4
 800f4fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f504:	3302      	adds	r3, #2
 800f506:	e7c7      	b.n	800f498 <_printf_common+0x58>
 800f508:	2301      	movs	r3, #1
 800f50a:	4622      	mov	r2, r4
 800f50c:	4649      	mov	r1, r9
 800f50e:	4638      	mov	r0, r7
 800f510:	47c0      	blx	r8
 800f512:	3001      	adds	r0, #1
 800f514:	d0e6      	beq.n	800f4e4 <_printf_common+0xa4>
 800f516:	3601      	adds	r6, #1
 800f518:	e7d9      	b.n	800f4ce <_printf_common+0x8e>
	...

0800f51c <_printf_i>:
 800f51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f520:	7e0f      	ldrb	r7, [r1, #24]
 800f522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f524:	2f78      	cmp	r7, #120	; 0x78
 800f526:	4691      	mov	r9, r2
 800f528:	4680      	mov	r8, r0
 800f52a:	460c      	mov	r4, r1
 800f52c:	469a      	mov	sl, r3
 800f52e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f532:	d807      	bhi.n	800f544 <_printf_i+0x28>
 800f534:	2f62      	cmp	r7, #98	; 0x62
 800f536:	d80a      	bhi.n	800f54e <_printf_i+0x32>
 800f538:	2f00      	cmp	r7, #0
 800f53a:	f000 80d8 	beq.w	800f6ee <_printf_i+0x1d2>
 800f53e:	2f58      	cmp	r7, #88	; 0x58
 800f540:	f000 80a3 	beq.w	800f68a <_printf_i+0x16e>
 800f544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f54c:	e03a      	b.n	800f5c4 <_printf_i+0xa8>
 800f54e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f552:	2b15      	cmp	r3, #21
 800f554:	d8f6      	bhi.n	800f544 <_printf_i+0x28>
 800f556:	a101      	add	r1, pc, #4	; (adr r1, 800f55c <_printf_i+0x40>)
 800f558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f55c:	0800f5b5 	.word	0x0800f5b5
 800f560:	0800f5c9 	.word	0x0800f5c9
 800f564:	0800f545 	.word	0x0800f545
 800f568:	0800f545 	.word	0x0800f545
 800f56c:	0800f545 	.word	0x0800f545
 800f570:	0800f545 	.word	0x0800f545
 800f574:	0800f5c9 	.word	0x0800f5c9
 800f578:	0800f545 	.word	0x0800f545
 800f57c:	0800f545 	.word	0x0800f545
 800f580:	0800f545 	.word	0x0800f545
 800f584:	0800f545 	.word	0x0800f545
 800f588:	0800f6d5 	.word	0x0800f6d5
 800f58c:	0800f5f9 	.word	0x0800f5f9
 800f590:	0800f6b7 	.word	0x0800f6b7
 800f594:	0800f545 	.word	0x0800f545
 800f598:	0800f545 	.word	0x0800f545
 800f59c:	0800f6f7 	.word	0x0800f6f7
 800f5a0:	0800f545 	.word	0x0800f545
 800f5a4:	0800f5f9 	.word	0x0800f5f9
 800f5a8:	0800f545 	.word	0x0800f545
 800f5ac:	0800f545 	.word	0x0800f545
 800f5b0:	0800f6bf 	.word	0x0800f6bf
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	1d1a      	adds	r2, r3, #4
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	602a      	str	r2, [r5, #0]
 800f5bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e0a3      	b.n	800f710 <_printf_i+0x1f4>
 800f5c8:	6820      	ldr	r0, [r4, #0]
 800f5ca:	6829      	ldr	r1, [r5, #0]
 800f5cc:	0606      	lsls	r6, r0, #24
 800f5ce:	f101 0304 	add.w	r3, r1, #4
 800f5d2:	d50a      	bpl.n	800f5ea <_printf_i+0xce>
 800f5d4:	680e      	ldr	r6, [r1, #0]
 800f5d6:	602b      	str	r3, [r5, #0]
 800f5d8:	2e00      	cmp	r6, #0
 800f5da:	da03      	bge.n	800f5e4 <_printf_i+0xc8>
 800f5dc:	232d      	movs	r3, #45	; 0x2d
 800f5de:	4276      	negs	r6, r6
 800f5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5e4:	485e      	ldr	r0, [pc, #376]	; (800f760 <_printf_i+0x244>)
 800f5e6:	230a      	movs	r3, #10
 800f5e8:	e019      	b.n	800f61e <_printf_i+0x102>
 800f5ea:	680e      	ldr	r6, [r1, #0]
 800f5ec:	602b      	str	r3, [r5, #0]
 800f5ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f5f2:	bf18      	it	ne
 800f5f4:	b236      	sxthne	r6, r6
 800f5f6:	e7ef      	b.n	800f5d8 <_printf_i+0xbc>
 800f5f8:	682b      	ldr	r3, [r5, #0]
 800f5fa:	6820      	ldr	r0, [r4, #0]
 800f5fc:	1d19      	adds	r1, r3, #4
 800f5fe:	6029      	str	r1, [r5, #0]
 800f600:	0601      	lsls	r1, r0, #24
 800f602:	d501      	bpl.n	800f608 <_printf_i+0xec>
 800f604:	681e      	ldr	r6, [r3, #0]
 800f606:	e002      	b.n	800f60e <_printf_i+0xf2>
 800f608:	0646      	lsls	r6, r0, #25
 800f60a:	d5fb      	bpl.n	800f604 <_printf_i+0xe8>
 800f60c:	881e      	ldrh	r6, [r3, #0]
 800f60e:	4854      	ldr	r0, [pc, #336]	; (800f760 <_printf_i+0x244>)
 800f610:	2f6f      	cmp	r7, #111	; 0x6f
 800f612:	bf0c      	ite	eq
 800f614:	2308      	moveq	r3, #8
 800f616:	230a      	movne	r3, #10
 800f618:	2100      	movs	r1, #0
 800f61a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f61e:	6865      	ldr	r5, [r4, #4]
 800f620:	60a5      	str	r5, [r4, #8]
 800f622:	2d00      	cmp	r5, #0
 800f624:	bfa2      	ittt	ge
 800f626:	6821      	ldrge	r1, [r4, #0]
 800f628:	f021 0104 	bicge.w	r1, r1, #4
 800f62c:	6021      	strge	r1, [r4, #0]
 800f62e:	b90e      	cbnz	r6, 800f634 <_printf_i+0x118>
 800f630:	2d00      	cmp	r5, #0
 800f632:	d04d      	beq.n	800f6d0 <_printf_i+0x1b4>
 800f634:	4615      	mov	r5, r2
 800f636:	fbb6 f1f3 	udiv	r1, r6, r3
 800f63a:	fb03 6711 	mls	r7, r3, r1, r6
 800f63e:	5dc7      	ldrb	r7, [r0, r7]
 800f640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f644:	4637      	mov	r7, r6
 800f646:	42bb      	cmp	r3, r7
 800f648:	460e      	mov	r6, r1
 800f64a:	d9f4      	bls.n	800f636 <_printf_i+0x11a>
 800f64c:	2b08      	cmp	r3, #8
 800f64e:	d10b      	bne.n	800f668 <_printf_i+0x14c>
 800f650:	6823      	ldr	r3, [r4, #0]
 800f652:	07de      	lsls	r6, r3, #31
 800f654:	d508      	bpl.n	800f668 <_printf_i+0x14c>
 800f656:	6923      	ldr	r3, [r4, #16]
 800f658:	6861      	ldr	r1, [r4, #4]
 800f65a:	4299      	cmp	r1, r3
 800f65c:	bfde      	ittt	le
 800f65e:	2330      	movle	r3, #48	; 0x30
 800f660:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f664:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f668:	1b52      	subs	r2, r2, r5
 800f66a:	6122      	str	r2, [r4, #16]
 800f66c:	f8cd a000 	str.w	sl, [sp]
 800f670:	464b      	mov	r3, r9
 800f672:	aa03      	add	r2, sp, #12
 800f674:	4621      	mov	r1, r4
 800f676:	4640      	mov	r0, r8
 800f678:	f7ff fee2 	bl	800f440 <_printf_common>
 800f67c:	3001      	adds	r0, #1
 800f67e:	d14c      	bne.n	800f71a <_printf_i+0x1fe>
 800f680:	f04f 30ff 	mov.w	r0, #4294967295
 800f684:	b004      	add	sp, #16
 800f686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68a:	4835      	ldr	r0, [pc, #212]	; (800f760 <_printf_i+0x244>)
 800f68c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f690:	6829      	ldr	r1, [r5, #0]
 800f692:	6823      	ldr	r3, [r4, #0]
 800f694:	f851 6b04 	ldr.w	r6, [r1], #4
 800f698:	6029      	str	r1, [r5, #0]
 800f69a:	061d      	lsls	r5, r3, #24
 800f69c:	d514      	bpl.n	800f6c8 <_printf_i+0x1ac>
 800f69e:	07df      	lsls	r7, r3, #31
 800f6a0:	bf44      	itt	mi
 800f6a2:	f043 0320 	orrmi.w	r3, r3, #32
 800f6a6:	6023      	strmi	r3, [r4, #0]
 800f6a8:	b91e      	cbnz	r6, 800f6b2 <_printf_i+0x196>
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	f023 0320 	bic.w	r3, r3, #32
 800f6b0:	6023      	str	r3, [r4, #0]
 800f6b2:	2310      	movs	r3, #16
 800f6b4:	e7b0      	b.n	800f618 <_printf_i+0xfc>
 800f6b6:	6823      	ldr	r3, [r4, #0]
 800f6b8:	f043 0320 	orr.w	r3, r3, #32
 800f6bc:	6023      	str	r3, [r4, #0]
 800f6be:	2378      	movs	r3, #120	; 0x78
 800f6c0:	4828      	ldr	r0, [pc, #160]	; (800f764 <_printf_i+0x248>)
 800f6c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6c6:	e7e3      	b.n	800f690 <_printf_i+0x174>
 800f6c8:	0659      	lsls	r1, r3, #25
 800f6ca:	bf48      	it	mi
 800f6cc:	b2b6      	uxthmi	r6, r6
 800f6ce:	e7e6      	b.n	800f69e <_printf_i+0x182>
 800f6d0:	4615      	mov	r5, r2
 800f6d2:	e7bb      	b.n	800f64c <_printf_i+0x130>
 800f6d4:	682b      	ldr	r3, [r5, #0]
 800f6d6:	6826      	ldr	r6, [r4, #0]
 800f6d8:	6961      	ldr	r1, [r4, #20]
 800f6da:	1d18      	adds	r0, r3, #4
 800f6dc:	6028      	str	r0, [r5, #0]
 800f6de:	0635      	lsls	r5, r6, #24
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	d501      	bpl.n	800f6e8 <_printf_i+0x1cc>
 800f6e4:	6019      	str	r1, [r3, #0]
 800f6e6:	e002      	b.n	800f6ee <_printf_i+0x1d2>
 800f6e8:	0670      	lsls	r0, r6, #25
 800f6ea:	d5fb      	bpl.n	800f6e4 <_printf_i+0x1c8>
 800f6ec:	8019      	strh	r1, [r3, #0]
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	6123      	str	r3, [r4, #16]
 800f6f2:	4615      	mov	r5, r2
 800f6f4:	e7ba      	b.n	800f66c <_printf_i+0x150>
 800f6f6:	682b      	ldr	r3, [r5, #0]
 800f6f8:	1d1a      	adds	r2, r3, #4
 800f6fa:	602a      	str	r2, [r5, #0]
 800f6fc:	681d      	ldr	r5, [r3, #0]
 800f6fe:	6862      	ldr	r2, [r4, #4]
 800f700:	2100      	movs	r1, #0
 800f702:	4628      	mov	r0, r5
 800f704:	f7f0 fd6c 	bl	80001e0 <memchr>
 800f708:	b108      	cbz	r0, 800f70e <_printf_i+0x1f2>
 800f70a:	1b40      	subs	r0, r0, r5
 800f70c:	6060      	str	r0, [r4, #4]
 800f70e:	6863      	ldr	r3, [r4, #4]
 800f710:	6123      	str	r3, [r4, #16]
 800f712:	2300      	movs	r3, #0
 800f714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f718:	e7a8      	b.n	800f66c <_printf_i+0x150>
 800f71a:	6923      	ldr	r3, [r4, #16]
 800f71c:	462a      	mov	r2, r5
 800f71e:	4649      	mov	r1, r9
 800f720:	4640      	mov	r0, r8
 800f722:	47d0      	blx	sl
 800f724:	3001      	adds	r0, #1
 800f726:	d0ab      	beq.n	800f680 <_printf_i+0x164>
 800f728:	6823      	ldr	r3, [r4, #0]
 800f72a:	079b      	lsls	r3, r3, #30
 800f72c:	d413      	bmi.n	800f756 <_printf_i+0x23a>
 800f72e:	68e0      	ldr	r0, [r4, #12]
 800f730:	9b03      	ldr	r3, [sp, #12]
 800f732:	4298      	cmp	r0, r3
 800f734:	bfb8      	it	lt
 800f736:	4618      	movlt	r0, r3
 800f738:	e7a4      	b.n	800f684 <_printf_i+0x168>
 800f73a:	2301      	movs	r3, #1
 800f73c:	4632      	mov	r2, r6
 800f73e:	4649      	mov	r1, r9
 800f740:	4640      	mov	r0, r8
 800f742:	47d0      	blx	sl
 800f744:	3001      	adds	r0, #1
 800f746:	d09b      	beq.n	800f680 <_printf_i+0x164>
 800f748:	3501      	adds	r5, #1
 800f74a:	68e3      	ldr	r3, [r4, #12]
 800f74c:	9903      	ldr	r1, [sp, #12]
 800f74e:	1a5b      	subs	r3, r3, r1
 800f750:	42ab      	cmp	r3, r5
 800f752:	dcf2      	bgt.n	800f73a <_printf_i+0x21e>
 800f754:	e7eb      	b.n	800f72e <_printf_i+0x212>
 800f756:	2500      	movs	r5, #0
 800f758:	f104 0619 	add.w	r6, r4, #25
 800f75c:	e7f5      	b.n	800f74a <_printf_i+0x22e>
 800f75e:	bf00      	nop
 800f760:	080114ed 	.word	0x080114ed
 800f764:	080114fe 	.word	0x080114fe

0800f768 <_read_r>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4d07      	ldr	r5, [pc, #28]	; (800f788 <_read_r+0x20>)
 800f76c:	4604      	mov	r4, r0
 800f76e:	4608      	mov	r0, r1
 800f770:	4611      	mov	r1, r2
 800f772:	2200      	movs	r2, #0
 800f774:	602a      	str	r2, [r5, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	f7f9 fe7a 	bl	8009470 <_read>
 800f77c:	1c43      	adds	r3, r0, #1
 800f77e:	d102      	bne.n	800f786 <_read_r+0x1e>
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	b103      	cbz	r3, 800f786 <_read_r+0x1e>
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	200052c4 	.word	0x200052c4

0800f78c <_fstat_r>:
 800f78c:	b538      	push	{r3, r4, r5, lr}
 800f78e:	4d07      	ldr	r5, [pc, #28]	; (800f7ac <_fstat_r+0x20>)
 800f790:	2300      	movs	r3, #0
 800f792:	4604      	mov	r4, r0
 800f794:	4608      	mov	r0, r1
 800f796:	4611      	mov	r1, r2
 800f798:	602b      	str	r3, [r5, #0]
 800f79a:	f7f9 feae 	bl	80094fa <_fstat>
 800f79e:	1c43      	adds	r3, r0, #1
 800f7a0:	d102      	bne.n	800f7a8 <_fstat_r+0x1c>
 800f7a2:	682b      	ldr	r3, [r5, #0]
 800f7a4:	b103      	cbz	r3, 800f7a8 <_fstat_r+0x1c>
 800f7a6:	6023      	str	r3, [r4, #0]
 800f7a8:	bd38      	pop	{r3, r4, r5, pc}
 800f7aa:	bf00      	nop
 800f7ac:	200052c4 	.word	0x200052c4

0800f7b0 <_isatty_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4d06      	ldr	r5, [pc, #24]	; (800f7cc <_isatty_r+0x1c>)
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	f7f9 fead 	bl	800951a <_isatty>
 800f7c0:	1c43      	adds	r3, r0, #1
 800f7c2:	d102      	bne.n	800f7ca <_isatty_r+0x1a>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	b103      	cbz	r3, 800f7ca <_isatty_r+0x1a>
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	bd38      	pop	{r3, r4, r5, pc}
 800f7cc:	200052c4 	.word	0x200052c4

0800f7d0 <sin>:
 800f7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7d2:	ec53 2b10 	vmov	r2, r3, d0
 800f7d6:	4828      	ldr	r0, [pc, #160]	; (800f878 <sin+0xa8>)
 800f7d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f7dc:	4281      	cmp	r1, r0
 800f7de:	dc07      	bgt.n	800f7f0 <sin+0x20>
 800f7e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f870 <sin+0xa0>
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	b005      	add	sp, #20
 800f7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7ec:	f000 be6c 	b.w	80104c8 <__kernel_sin>
 800f7f0:	4822      	ldr	r0, [pc, #136]	; (800f87c <sin+0xac>)
 800f7f2:	4281      	cmp	r1, r0
 800f7f4:	dd09      	ble.n	800f80a <sin+0x3a>
 800f7f6:	ee10 0a10 	vmov	r0, s0
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	f7f0 fe6e 	bl	80004dc <__aeabi_dsub>
 800f800:	ec41 0b10 	vmov	d0, r0, r1
 800f804:	b005      	add	sp, #20
 800f806:	f85d fb04 	ldr.w	pc, [sp], #4
 800f80a:	4668      	mov	r0, sp
 800f80c:	f000 f838 	bl	800f880 <__ieee754_rem_pio2>
 800f810:	f000 0003 	and.w	r0, r0, #3
 800f814:	2801      	cmp	r0, #1
 800f816:	d00c      	beq.n	800f832 <sin+0x62>
 800f818:	2802      	cmp	r0, #2
 800f81a:	d011      	beq.n	800f840 <sin+0x70>
 800f81c:	b9f0      	cbnz	r0, 800f85c <sin+0x8c>
 800f81e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f822:	ed9d 0b00 	vldr	d0, [sp]
 800f826:	2001      	movs	r0, #1
 800f828:	f000 fe4e 	bl	80104c8 <__kernel_sin>
 800f82c:	ec51 0b10 	vmov	r0, r1, d0
 800f830:	e7e6      	b.n	800f800 <sin+0x30>
 800f832:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f836:	ed9d 0b00 	vldr	d0, [sp]
 800f83a:	f000 fa2d 	bl	800fc98 <__kernel_cos>
 800f83e:	e7f5      	b.n	800f82c <sin+0x5c>
 800f840:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f844:	ed9d 0b00 	vldr	d0, [sp]
 800f848:	2001      	movs	r0, #1
 800f84a:	f000 fe3d 	bl	80104c8 <__kernel_sin>
 800f84e:	ec53 2b10 	vmov	r2, r3, d0
 800f852:	ee10 0a10 	vmov	r0, s0
 800f856:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f85a:	e7d1      	b.n	800f800 <sin+0x30>
 800f85c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f860:	ed9d 0b00 	vldr	d0, [sp]
 800f864:	f000 fa18 	bl	800fc98 <__kernel_cos>
 800f868:	e7f1      	b.n	800f84e <sin+0x7e>
 800f86a:	bf00      	nop
 800f86c:	f3af 8000 	nop.w
	...
 800f878:	3fe921fb 	.word	0x3fe921fb
 800f87c:	7fefffff 	.word	0x7fefffff

0800f880 <__ieee754_rem_pio2>:
 800f880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f884:	ed2d 8b02 	vpush	{d8}
 800f888:	ec55 4b10 	vmov	r4, r5, d0
 800f88c:	4bca      	ldr	r3, [pc, #808]	; (800fbb8 <__ieee754_rem_pio2+0x338>)
 800f88e:	b08b      	sub	sp, #44	; 0x2c
 800f890:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f894:	4598      	cmp	r8, r3
 800f896:	4682      	mov	sl, r0
 800f898:	9502      	str	r5, [sp, #8]
 800f89a:	dc08      	bgt.n	800f8ae <__ieee754_rem_pio2+0x2e>
 800f89c:	2200      	movs	r2, #0
 800f89e:	2300      	movs	r3, #0
 800f8a0:	ed80 0b00 	vstr	d0, [r0]
 800f8a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f8a8:	f04f 0b00 	mov.w	fp, #0
 800f8ac:	e028      	b.n	800f900 <__ieee754_rem_pio2+0x80>
 800f8ae:	4bc3      	ldr	r3, [pc, #780]	; (800fbbc <__ieee754_rem_pio2+0x33c>)
 800f8b0:	4598      	cmp	r8, r3
 800f8b2:	dc78      	bgt.n	800f9a6 <__ieee754_rem_pio2+0x126>
 800f8b4:	9b02      	ldr	r3, [sp, #8]
 800f8b6:	4ec2      	ldr	r6, [pc, #776]	; (800fbc0 <__ieee754_rem_pio2+0x340>)
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	ee10 0a10 	vmov	r0, s0
 800f8be:	a3b0      	add	r3, pc, #704	; (adr r3, 800fb80 <__ieee754_rem_pio2+0x300>)
 800f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	dd39      	ble.n	800f93c <__ieee754_rem_pio2+0xbc>
 800f8c8:	f7f0 fe08 	bl	80004dc <__aeabi_dsub>
 800f8cc:	45b0      	cmp	r8, r6
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	460d      	mov	r5, r1
 800f8d2:	d01b      	beq.n	800f90c <__ieee754_rem_pio2+0x8c>
 800f8d4:	a3ac      	add	r3, pc, #688	; (adr r3, 800fb88 <__ieee754_rem_pio2+0x308>)
 800f8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8da:	f7f0 fdff 	bl	80004dc <__aeabi_dsub>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	e9ca 2300 	strd	r2, r3, [sl]
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	f7f0 fdf7 	bl	80004dc <__aeabi_dsub>
 800f8ee:	a3a6      	add	r3, pc, #664	; (adr r3, 800fb88 <__ieee754_rem_pio2+0x308>)
 800f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f4:	f7f0 fdf2 	bl	80004dc <__aeabi_dsub>
 800f8f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f8fc:	f04f 0b01 	mov.w	fp, #1
 800f900:	4658      	mov	r0, fp
 800f902:	b00b      	add	sp, #44	; 0x2c
 800f904:	ecbd 8b02 	vpop	{d8}
 800f908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90c:	a3a0      	add	r3, pc, #640	; (adr r3, 800fb90 <__ieee754_rem_pio2+0x310>)
 800f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f912:	f7f0 fde3 	bl	80004dc <__aeabi_dsub>
 800f916:	a3a0      	add	r3, pc, #640	; (adr r3, 800fb98 <__ieee754_rem_pio2+0x318>)
 800f918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91c:	4604      	mov	r4, r0
 800f91e:	460d      	mov	r5, r1
 800f920:	f7f0 fddc 	bl	80004dc <__aeabi_dsub>
 800f924:	4602      	mov	r2, r0
 800f926:	460b      	mov	r3, r1
 800f928:	e9ca 2300 	strd	r2, r3, [sl]
 800f92c:	4620      	mov	r0, r4
 800f92e:	4629      	mov	r1, r5
 800f930:	f7f0 fdd4 	bl	80004dc <__aeabi_dsub>
 800f934:	a398      	add	r3, pc, #608	; (adr r3, 800fb98 <__ieee754_rem_pio2+0x318>)
 800f936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93a:	e7db      	b.n	800f8f4 <__ieee754_rem_pio2+0x74>
 800f93c:	f7f0 fdd0 	bl	80004e0 <__adddf3>
 800f940:	45b0      	cmp	r8, r6
 800f942:	4604      	mov	r4, r0
 800f944:	460d      	mov	r5, r1
 800f946:	d016      	beq.n	800f976 <__ieee754_rem_pio2+0xf6>
 800f948:	a38f      	add	r3, pc, #572	; (adr r3, 800fb88 <__ieee754_rem_pio2+0x308>)
 800f94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94e:	f7f0 fdc7 	bl	80004e0 <__adddf3>
 800f952:	4602      	mov	r2, r0
 800f954:	460b      	mov	r3, r1
 800f956:	e9ca 2300 	strd	r2, r3, [sl]
 800f95a:	4620      	mov	r0, r4
 800f95c:	4629      	mov	r1, r5
 800f95e:	f7f0 fdbd 	bl	80004dc <__aeabi_dsub>
 800f962:	a389      	add	r3, pc, #548	; (adr r3, 800fb88 <__ieee754_rem_pio2+0x308>)
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	f7f0 fdba 	bl	80004e0 <__adddf3>
 800f96c:	f04f 3bff 	mov.w	fp, #4294967295
 800f970:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f974:	e7c4      	b.n	800f900 <__ieee754_rem_pio2+0x80>
 800f976:	a386      	add	r3, pc, #536	; (adr r3, 800fb90 <__ieee754_rem_pio2+0x310>)
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	f7f0 fdb0 	bl	80004e0 <__adddf3>
 800f980:	a385      	add	r3, pc, #532	; (adr r3, 800fb98 <__ieee754_rem_pio2+0x318>)
 800f982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f986:	4604      	mov	r4, r0
 800f988:	460d      	mov	r5, r1
 800f98a:	f7f0 fda9 	bl	80004e0 <__adddf3>
 800f98e:	4602      	mov	r2, r0
 800f990:	460b      	mov	r3, r1
 800f992:	e9ca 2300 	strd	r2, r3, [sl]
 800f996:	4620      	mov	r0, r4
 800f998:	4629      	mov	r1, r5
 800f99a:	f7f0 fd9f 	bl	80004dc <__aeabi_dsub>
 800f99e:	a37e      	add	r3, pc, #504	; (adr r3, 800fb98 <__ieee754_rem_pio2+0x318>)
 800f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a4:	e7e0      	b.n	800f968 <__ieee754_rem_pio2+0xe8>
 800f9a6:	4b87      	ldr	r3, [pc, #540]	; (800fbc4 <__ieee754_rem_pio2+0x344>)
 800f9a8:	4598      	cmp	r8, r3
 800f9aa:	f300 80d9 	bgt.w	800fb60 <__ieee754_rem_pio2+0x2e0>
 800f9ae:	f000 fe49 	bl	8010644 <fabs>
 800f9b2:	ec55 4b10 	vmov	r4, r5, d0
 800f9b6:	ee10 0a10 	vmov	r0, s0
 800f9ba:	a379      	add	r3, pc, #484	; (adr r3, 800fba0 <__ieee754_rem_pio2+0x320>)
 800f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c0:	4629      	mov	r1, r5
 800f9c2:	f7f0 fc5d 	bl	8000280 <__aeabi_dmul>
 800f9c6:	4b80      	ldr	r3, [pc, #512]	; (800fbc8 <__ieee754_rem_pio2+0x348>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f7f0 fd89 	bl	80004e0 <__adddf3>
 800f9ce:	f7f0 ffc5 	bl	800095c <__aeabi_d2iz>
 800f9d2:	4683      	mov	fp, r0
 800f9d4:	f7f0 fed0 	bl	8000778 <__aeabi_i2d>
 800f9d8:	4602      	mov	r2, r0
 800f9da:	460b      	mov	r3, r1
 800f9dc:	ec43 2b18 	vmov	d8, r2, r3
 800f9e0:	a367      	add	r3, pc, #412	; (adr r3, 800fb80 <__ieee754_rem_pio2+0x300>)
 800f9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e6:	f7f0 fc4b 	bl	8000280 <__aeabi_dmul>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	f7f0 fd73 	bl	80004dc <__aeabi_dsub>
 800f9f6:	a364      	add	r3, pc, #400	; (adr r3, 800fb88 <__ieee754_rem_pio2+0x308>)
 800f9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fc:	4606      	mov	r6, r0
 800f9fe:	460f      	mov	r7, r1
 800fa00:	ec51 0b18 	vmov	r0, r1, d8
 800fa04:	f7f0 fc3c 	bl	8000280 <__aeabi_dmul>
 800fa08:	f1bb 0f1f 	cmp.w	fp, #31
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	460d      	mov	r5, r1
 800fa10:	dc0d      	bgt.n	800fa2e <__ieee754_rem_pio2+0x1ae>
 800fa12:	4b6e      	ldr	r3, [pc, #440]	; (800fbcc <__ieee754_rem_pio2+0x34c>)
 800fa14:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fa18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa1c:	4543      	cmp	r3, r8
 800fa1e:	d006      	beq.n	800fa2e <__ieee754_rem_pio2+0x1ae>
 800fa20:	4622      	mov	r2, r4
 800fa22:	462b      	mov	r3, r5
 800fa24:	4630      	mov	r0, r6
 800fa26:	4639      	mov	r1, r7
 800fa28:	f7f0 fd58 	bl	80004dc <__aeabi_dsub>
 800fa2c:	e00f      	b.n	800fa4e <__ieee754_rem_pio2+0x1ce>
 800fa2e:	462b      	mov	r3, r5
 800fa30:	4622      	mov	r2, r4
 800fa32:	4630      	mov	r0, r6
 800fa34:	4639      	mov	r1, r7
 800fa36:	f7f0 fd51 	bl	80004dc <__aeabi_dsub>
 800fa3a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fa3e:	9303      	str	r3, [sp, #12]
 800fa40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fa44:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800fa48:	f1b8 0f10 	cmp.w	r8, #16
 800fa4c:	dc02      	bgt.n	800fa54 <__ieee754_rem_pio2+0x1d4>
 800fa4e:	e9ca 0100 	strd	r0, r1, [sl]
 800fa52:	e039      	b.n	800fac8 <__ieee754_rem_pio2+0x248>
 800fa54:	a34e      	add	r3, pc, #312	; (adr r3, 800fb90 <__ieee754_rem_pio2+0x310>)
 800fa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5a:	ec51 0b18 	vmov	r0, r1, d8
 800fa5e:	f7f0 fc0f 	bl	8000280 <__aeabi_dmul>
 800fa62:	4604      	mov	r4, r0
 800fa64:	460d      	mov	r5, r1
 800fa66:	4602      	mov	r2, r0
 800fa68:	460b      	mov	r3, r1
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	4639      	mov	r1, r7
 800fa6e:	f7f0 fd35 	bl	80004dc <__aeabi_dsub>
 800fa72:	4602      	mov	r2, r0
 800fa74:	460b      	mov	r3, r1
 800fa76:	4680      	mov	r8, r0
 800fa78:	4689      	mov	r9, r1
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	f7f0 fd2d 	bl	80004dc <__aeabi_dsub>
 800fa82:	4622      	mov	r2, r4
 800fa84:	462b      	mov	r3, r5
 800fa86:	f7f0 fd29 	bl	80004dc <__aeabi_dsub>
 800fa8a:	a343      	add	r3, pc, #268	; (adr r3, 800fb98 <__ieee754_rem_pio2+0x318>)
 800fa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa90:	4604      	mov	r4, r0
 800fa92:	460d      	mov	r5, r1
 800fa94:	ec51 0b18 	vmov	r0, r1, d8
 800fa98:	f7f0 fbf2 	bl	8000280 <__aeabi_dmul>
 800fa9c:	4622      	mov	r2, r4
 800fa9e:	462b      	mov	r3, r5
 800faa0:	f7f0 fd1c 	bl	80004dc <__aeabi_dsub>
 800faa4:	4602      	mov	r2, r0
 800faa6:	460b      	mov	r3, r1
 800faa8:	4604      	mov	r4, r0
 800faaa:	460d      	mov	r5, r1
 800faac:	4640      	mov	r0, r8
 800faae:	4649      	mov	r1, r9
 800fab0:	f7f0 fd14 	bl	80004dc <__aeabi_dsub>
 800fab4:	9a03      	ldr	r2, [sp, #12]
 800fab6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	2b31      	cmp	r3, #49	; 0x31
 800fabe:	dc24      	bgt.n	800fb0a <__ieee754_rem_pio2+0x28a>
 800fac0:	e9ca 0100 	strd	r0, r1, [sl]
 800fac4:	4646      	mov	r6, r8
 800fac6:	464f      	mov	r7, r9
 800fac8:	e9da 8900 	ldrd	r8, r9, [sl]
 800facc:	4630      	mov	r0, r6
 800face:	4642      	mov	r2, r8
 800fad0:	464b      	mov	r3, r9
 800fad2:	4639      	mov	r1, r7
 800fad4:	f7f0 fd02 	bl	80004dc <__aeabi_dsub>
 800fad8:	462b      	mov	r3, r5
 800fada:	4622      	mov	r2, r4
 800fadc:	f7f0 fcfe 	bl	80004dc <__aeabi_dsub>
 800fae0:	9b02      	ldr	r3, [sp, #8]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fae8:	f6bf af0a 	bge.w	800f900 <__ieee754_rem_pio2+0x80>
 800faec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800faf0:	f8ca 3004 	str.w	r3, [sl, #4]
 800faf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800faf8:	f8ca 8000 	str.w	r8, [sl]
 800fafc:	f8ca 0008 	str.w	r0, [sl, #8]
 800fb00:	f8ca 300c 	str.w	r3, [sl, #12]
 800fb04:	f1cb 0b00 	rsb	fp, fp, #0
 800fb08:	e6fa      	b.n	800f900 <__ieee754_rem_pio2+0x80>
 800fb0a:	a327      	add	r3, pc, #156	; (adr r3, 800fba8 <__ieee754_rem_pio2+0x328>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	ec51 0b18 	vmov	r0, r1, d8
 800fb14:	f7f0 fbb4 	bl	8000280 <__aeabi_dmul>
 800fb18:	4604      	mov	r4, r0
 800fb1a:	460d      	mov	r5, r1
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	460b      	mov	r3, r1
 800fb20:	4640      	mov	r0, r8
 800fb22:	4649      	mov	r1, r9
 800fb24:	f7f0 fcda 	bl	80004dc <__aeabi_dsub>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	460f      	mov	r7, r1
 800fb30:	4640      	mov	r0, r8
 800fb32:	4649      	mov	r1, r9
 800fb34:	f7f0 fcd2 	bl	80004dc <__aeabi_dsub>
 800fb38:	4622      	mov	r2, r4
 800fb3a:	462b      	mov	r3, r5
 800fb3c:	f7f0 fcce 	bl	80004dc <__aeabi_dsub>
 800fb40:	a31b      	add	r3, pc, #108	; (adr r3, 800fbb0 <__ieee754_rem_pio2+0x330>)
 800fb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb46:	4604      	mov	r4, r0
 800fb48:	460d      	mov	r5, r1
 800fb4a:	ec51 0b18 	vmov	r0, r1, d8
 800fb4e:	f7f0 fb97 	bl	8000280 <__aeabi_dmul>
 800fb52:	4622      	mov	r2, r4
 800fb54:	462b      	mov	r3, r5
 800fb56:	f7f0 fcc1 	bl	80004dc <__aeabi_dsub>
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	460d      	mov	r5, r1
 800fb5e:	e75f      	b.n	800fa20 <__ieee754_rem_pio2+0x1a0>
 800fb60:	4b1b      	ldr	r3, [pc, #108]	; (800fbd0 <__ieee754_rem_pio2+0x350>)
 800fb62:	4598      	cmp	r8, r3
 800fb64:	dd36      	ble.n	800fbd4 <__ieee754_rem_pio2+0x354>
 800fb66:	ee10 2a10 	vmov	r2, s0
 800fb6a:	462b      	mov	r3, r5
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	4629      	mov	r1, r5
 800fb70:	f7f0 fcb4 	bl	80004dc <__aeabi_dsub>
 800fb74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fb78:	e9ca 0100 	strd	r0, r1, [sl]
 800fb7c:	e694      	b.n	800f8a8 <__ieee754_rem_pio2+0x28>
 800fb7e:	bf00      	nop
 800fb80:	54400000 	.word	0x54400000
 800fb84:	3ff921fb 	.word	0x3ff921fb
 800fb88:	1a626331 	.word	0x1a626331
 800fb8c:	3dd0b461 	.word	0x3dd0b461
 800fb90:	1a600000 	.word	0x1a600000
 800fb94:	3dd0b461 	.word	0x3dd0b461
 800fb98:	2e037073 	.word	0x2e037073
 800fb9c:	3ba3198a 	.word	0x3ba3198a
 800fba0:	6dc9c883 	.word	0x6dc9c883
 800fba4:	3fe45f30 	.word	0x3fe45f30
 800fba8:	2e000000 	.word	0x2e000000
 800fbac:	3ba3198a 	.word	0x3ba3198a
 800fbb0:	252049c1 	.word	0x252049c1
 800fbb4:	397b839a 	.word	0x397b839a
 800fbb8:	3fe921fb 	.word	0x3fe921fb
 800fbbc:	4002d97b 	.word	0x4002d97b
 800fbc0:	3ff921fb 	.word	0x3ff921fb
 800fbc4:	413921fb 	.word	0x413921fb
 800fbc8:	3fe00000 	.word	0x3fe00000
 800fbcc:	08011510 	.word	0x08011510
 800fbd0:	7fefffff 	.word	0x7fefffff
 800fbd4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fbd8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fbdc:	ee10 0a10 	vmov	r0, s0
 800fbe0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fbe4:	ee10 6a10 	vmov	r6, s0
 800fbe8:	460f      	mov	r7, r1
 800fbea:	f7f0 feb7 	bl	800095c <__aeabi_d2iz>
 800fbee:	f7f0 fdc3 	bl	8000778 <__aeabi_i2d>
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	4639      	mov	r1, r7
 800fbfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fbfe:	f7f0 fc6d 	bl	80004dc <__aeabi_dsub>
 800fc02:	4b23      	ldr	r3, [pc, #140]	; (800fc90 <__ieee754_rem_pio2+0x410>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	f7f0 fb3b 	bl	8000280 <__aeabi_dmul>
 800fc0a:	460f      	mov	r7, r1
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	f7f0 fea5 	bl	800095c <__aeabi_d2iz>
 800fc12:	f7f0 fdb1 	bl	8000778 <__aeabi_i2d>
 800fc16:	4602      	mov	r2, r0
 800fc18:	460b      	mov	r3, r1
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	4639      	mov	r1, r7
 800fc1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fc22:	f7f0 fc5b 	bl	80004dc <__aeabi_dsub>
 800fc26:	4b1a      	ldr	r3, [pc, #104]	; (800fc90 <__ieee754_rem_pio2+0x410>)
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f7f0 fb29 	bl	8000280 <__aeabi_dmul>
 800fc2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fc32:	ad04      	add	r5, sp, #16
 800fc34:	f04f 0803 	mov.w	r8, #3
 800fc38:	46a9      	mov	r9, r5
 800fc3a:	2600      	movs	r6, #0
 800fc3c:	2700      	movs	r7, #0
 800fc3e:	4632      	mov	r2, r6
 800fc40:	463b      	mov	r3, r7
 800fc42:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fc46:	46c3      	mov	fp, r8
 800fc48:	3d08      	subs	r5, #8
 800fc4a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc4e:	f7f0 fe53 	bl	80008f8 <__aeabi_dcmpeq>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	d1f3      	bne.n	800fc3e <__ieee754_rem_pio2+0x3be>
 800fc56:	4b0f      	ldr	r3, [pc, #60]	; (800fc94 <__ieee754_rem_pio2+0x414>)
 800fc58:	9301      	str	r3, [sp, #4]
 800fc5a:	2302      	movs	r3, #2
 800fc5c:	9300      	str	r3, [sp, #0]
 800fc5e:	4622      	mov	r2, r4
 800fc60:	465b      	mov	r3, fp
 800fc62:	4651      	mov	r1, sl
 800fc64:	4648      	mov	r0, r9
 800fc66:	f000 f8df 	bl	800fe28 <__kernel_rem_pio2>
 800fc6a:	9b02      	ldr	r3, [sp, #8]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	4683      	mov	fp, r0
 800fc70:	f6bf ae46 	bge.w	800f900 <__ieee754_rem_pio2+0x80>
 800fc74:	e9da 2100 	ldrd	r2, r1, [sl]
 800fc78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc7c:	e9ca 2300 	strd	r2, r3, [sl]
 800fc80:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800fc84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc88:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800fc8c:	e73a      	b.n	800fb04 <__ieee754_rem_pio2+0x284>
 800fc8e:	bf00      	nop
 800fc90:	41700000 	.word	0x41700000
 800fc94:	08011590 	.word	0x08011590

0800fc98 <__kernel_cos>:
 800fc98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	ec57 6b10 	vmov	r6, r7, d0
 800fca0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fca4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fca8:	ed8d 1b00 	vstr	d1, [sp]
 800fcac:	da07      	bge.n	800fcbe <__kernel_cos+0x26>
 800fcae:	ee10 0a10 	vmov	r0, s0
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	f7f0 fe52 	bl	800095c <__aeabi_d2iz>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	f000 8088 	beq.w	800fdce <__kernel_cos+0x136>
 800fcbe:	4632      	mov	r2, r6
 800fcc0:	463b      	mov	r3, r7
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	4639      	mov	r1, r7
 800fcc6:	f7f0 fadb 	bl	8000280 <__aeabi_dmul>
 800fcca:	4b51      	ldr	r3, [pc, #324]	; (800fe10 <__kernel_cos+0x178>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	4604      	mov	r4, r0
 800fcd0:	460d      	mov	r5, r1
 800fcd2:	f7f0 fad5 	bl	8000280 <__aeabi_dmul>
 800fcd6:	a340      	add	r3, pc, #256	; (adr r3, 800fdd8 <__kernel_cos+0x140>)
 800fcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcdc:	4682      	mov	sl, r0
 800fcde:	468b      	mov	fp, r1
 800fce0:	4620      	mov	r0, r4
 800fce2:	4629      	mov	r1, r5
 800fce4:	f7f0 facc 	bl	8000280 <__aeabi_dmul>
 800fce8:	a33d      	add	r3, pc, #244	; (adr r3, 800fde0 <__kernel_cos+0x148>)
 800fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcee:	f7f0 fbf7 	bl	80004e0 <__adddf3>
 800fcf2:	4622      	mov	r2, r4
 800fcf4:	462b      	mov	r3, r5
 800fcf6:	f7f0 fac3 	bl	8000280 <__aeabi_dmul>
 800fcfa:	a33b      	add	r3, pc, #236	; (adr r3, 800fde8 <__kernel_cos+0x150>)
 800fcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd00:	f7f0 fbec 	bl	80004dc <__aeabi_dsub>
 800fd04:	4622      	mov	r2, r4
 800fd06:	462b      	mov	r3, r5
 800fd08:	f7f0 faba 	bl	8000280 <__aeabi_dmul>
 800fd0c:	a338      	add	r3, pc, #224	; (adr r3, 800fdf0 <__kernel_cos+0x158>)
 800fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd12:	f7f0 fbe5 	bl	80004e0 <__adddf3>
 800fd16:	4622      	mov	r2, r4
 800fd18:	462b      	mov	r3, r5
 800fd1a:	f7f0 fab1 	bl	8000280 <__aeabi_dmul>
 800fd1e:	a336      	add	r3, pc, #216	; (adr r3, 800fdf8 <__kernel_cos+0x160>)
 800fd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd24:	f7f0 fbda 	bl	80004dc <__aeabi_dsub>
 800fd28:	4622      	mov	r2, r4
 800fd2a:	462b      	mov	r3, r5
 800fd2c:	f7f0 faa8 	bl	8000280 <__aeabi_dmul>
 800fd30:	a333      	add	r3, pc, #204	; (adr r3, 800fe00 <__kernel_cos+0x168>)
 800fd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd36:	f7f0 fbd3 	bl	80004e0 <__adddf3>
 800fd3a:	4622      	mov	r2, r4
 800fd3c:	462b      	mov	r3, r5
 800fd3e:	f7f0 fa9f 	bl	8000280 <__aeabi_dmul>
 800fd42:	4622      	mov	r2, r4
 800fd44:	462b      	mov	r3, r5
 800fd46:	f7f0 fa9b 	bl	8000280 <__aeabi_dmul>
 800fd4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd4e:	4604      	mov	r4, r0
 800fd50:	460d      	mov	r5, r1
 800fd52:	4630      	mov	r0, r6
 800fd54:	4639      	mov	r1, r7
 800fd56:	f7f0 fa93 	bl	8000280 <__aeabi_dmul>
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	4629      	mov	r1, r5
 800fd60:	4620      	mov	r0, r4
 800fd62:	f7f0 fbbb 	bl	80004dc <__aeabi_dsub>
 800fd66:	4b2b      	ldr	r3, [pc, #172]	; (800fe14 <__kernel_cos+0x17c>)
 800fd68:	4598      	cmp	r8, r3
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	460f      	mov	r7, r1
 800fd6e:	dc10      	bgt.n	800fd92 <__kernel_cos+0xfa>
 800fd70:	4602      	mov	r2, r0
 800fd72:	460b      	mov	r3, r1
 800fd74:	4650      	mov	r0, sl
 800fd76:	4659      	mov	r1, fp
 800fd78:	f7f0 fbb0 	bl	80004dc <__aeabi_dsub>
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	4926      	ldr	r1, [pc, #152]	; (800fe18 <__kernel_cos+0x180>)
 800fd80:	4602      	mov	r2, r0
 800fd82:	2000      	movs	r0, #0
 800fd84:	f7f0 fbaa 	bl	80004dc <__aeabi_dsub>
 800fd88:	ec41 0b10 	vmov	d0, r0, r1
 800fd8c:	b003      	add	sp, #12
 800fd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd92:	4b22      	ldr	r3, [pc, #136]	; (800fe1c <__kernel_cos+0x184>)
 800fd94:	4920      	ldr	r1, [pc, #128]	; (800fe18 <__kernel_cos+0x180>)
 800fd96:	4598      	cmp	r8, r3
 800fd98:	bfcc      	ite	gt
 800fd9a:	4d21      	ldrgt	r5, [pc, #132]	; (800fe20 <__kernel_cos+0x188>)
 800fd9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fda0:	2400      	movs	r4, #0
 800fda2:	4622      	mov	r2, r4
 800fda4:	462b      	mov	r3, r5
 800fda6:	2000      	movs	r0, #0
 800fda8:	f7f0 fb98 	bl	80004dc <__aeabi_dsub>
 800fdac:	4622      	mov	r2, r4
 800fdae:	4680      	mov	r8, r0
 800fdb0:	4689      	mov	r9, r1
 800fdb2:	462b      	mov	r3, r5
 800fdb4:	4650      	mov	r0, sl
 800fdb6:	4659      	mov	r1, fp
 800fdb8:	f7f0 fb90 	bl	80004dc <__aeabi_dsub>
 800fdbc:	4632      	mov	r2, r6
 800fdbe:	463b      	mov	r3, r7
 800fdc0:	f7f0 fb8c 	bl	80004dc <__aeabi_dsub>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	4640      	mov	r0, r8
 800fdca:	4649      	mov	r1, r9
 800fdcc:	e7da      	b.n	800fd84 <__kernel_cos+0xec>
 800fdce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fe08 <__kernel_cos+0x170>
 800fdd2:	e7db      	b.n	800fd8c <__kernel_cos+0xf4>
 800fdd4:	f3af 8000 	nop.w
 800fdd8:	be8838d4 	.word	0xbe8838d4
 800fddc:	bda8fae9 	.word	0xbda8fae9
 800fde0:	bdb4b1c4 	.word	0xbdb4b1c4
 800fde4:	3e21ee9e 	.word	0x3e21ee9e
 800fde8:	809c52ad 	.word	0x809c52ad
 800fdec:	3e927e4f 	.word	0x3e927e4f
 800fdf0:	19cb1590 	.word	0x19cb1590
 800fdf4:	3efa01a0 	.word	0x3efa01a0
 800fdf8:	16c15177 	.word	0x16c15177
 800fdfc:	3f56c16c 	.word	0x3f56c16c
 800fe00:	5555554c 	.word	0x5555554c
 800fe04:	3fa55555 	.word	0x3fa55555
 800fe08:	00000000 	.word	0x00000000
 800fe0c:	3ff00000 	.word	0x3ff00000
 800fe10:	3fe00000 	.word	0x3fe00000
 800fe14:	3fd33332 	.word	0x3fd33332
 800fe18:	3ff00000 	.word	0x3ff00000
 800fe1c:	3fe90000 	.word	0x3fe90000
 800fe20:	3fd20000 	.word	0x3fd20000
 800fe24:	00000000 	.word	0x00000000

0800fe28 <__kernel_rem_pio2>:
 800fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2c:	ed2d 8b02 	vpush	{d8}
 800fe30:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fe34:	f112 0f14 	cmn.w	r2, #20
 800fe38:	9308      	str	r3, [sp, #32]
 800fe3a:	9101      	str	r1, [sp, #4]
 800fe3c:	4bc4      	ldr	r3, [pc, #784]	; (8010150 <__kernel_rem_pio2+0x328>)
 800fe3e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fe40:	900b      	str	r0, [sp, #44]	; 0x2c
 800fe42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe46:	9302      	str	r3, [sp, #8]
 800fe48:	9b08      	ldr	r3, [sp, #32]
 800fe4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe4e:	bfa8      	it	ge
 800fe50:	1ed4      	subge	r4, r2, #3
 800fe52:	9306      	str	r3, [sp, #24]
 800fe54:	bfb2      	itee	lt
 800fe56:	2400      	movlt	r4, #0
 800fe58:	2318      	movge	r3, #24
 800fe5a:	fb94 f4f3 	sdivge	r4, r4, r3
 800fe5e:	f06f 0317 	mvn.w	r3, #23
 800fe62:	fb04 3303 	mla	r3, r4, r3, r3
 800fe66:	eb03 0a02 	add.w	sl, r3, r2
 800fe6a:	9b02      	ldr	r3, [sp, #8]
 800fe6c:	9a06      	ldr	r2, [sp, #24]
 800fe6e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8010140 <__kernel_rem_pio2+0x318>
 800fe72:	eb03 0802 	add.w	r8, r3, r2
 800fe76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fe78:	1aa7      	subs	r7, r4, r2
 800fe7a:	ae22      	add	r6, sp, #136	; 0x88
 800fe7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fe80:	2500      	movs	r5, #0
 800fe82:	4545      	cmp	r5, r8
 800fe84:	dd13      	ble.n	800feae <__kernel_rem_pio2+0x86>
 800fe86:	9b08      	ldr	r3, [sp, #32]
 800fe88:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8010140 <__kernel_rem_pio2+0x318>
 800fe8c:	aa22      	add	r2, sp, #136	; 0x88
 800fe8e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fe92:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fe96:	f04f 0800 	mov.w	r8, #0
 800fe9a:	9b02      	ldr	r3, [sp, #8]
 800fe9c:	4598      	cmp	r8, r3
 800fe9e:	dc2f      	bgt.n	800ff00 <__kernel_rem_pio2+0xd8>
 800fea0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fea4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fea8:	462f      	mov	r7, r5
 800feaa:	2600      	movs	r6, #0
 800feac:	e01b      	b.n	800fee6 <__kernel_rem_pio2+0xbe>
 800feae:	42ef      	cmn	r7, r5
 800feb0:	d407      	bmi.n	800fec2 <__kernel_rem_pio2+0x9a>
 800feb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800feb6:	f7f0 fc5f 	bl	8000778 <__aeabi_i2d>
 800feba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800febe:	3501      	adds	r5, #1
 800fec0:	e7df      	b.n	800fe82 <__kernel_rem_pio2+0x5a>
 800fec2:	ec51 0b18 	vmov	r0, r1, d8
 800fec6:	e7f8      	b.n	800feba <__kernel_rem_pio2+0x92>
 800fec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fecc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fed0:	f7f0 f9d6 	bl	8000280 <__aeabi_dmul>
 800fed4:	4602      	mov	r2, r0
 800fed6:	460b      	mov	r3, r1
 800fed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fedc:	f7f0 fb00 	bl	80004e0 <__adddf3>
 800fee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fee4:	3601      	adds	r6, #1
 800fee6:	9b06      	ldr	r3, [sp, #24]
 800fee8:	429e      	cmp	r6, r3
 800feea:	f1a7 0708 	sub.w	r7, r7, #8
 800feee:	ddeb      	ble.n	800fec8 <__kernel_rem_pio2+0xa0>
 800fef0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fef4:	f108 0801 	add.w	r8, r8, #1
 800fef8:	ecab 7b02 	vstmia	fp!, {d7}
 800fefc:	3508      	adds	r5, #8
 800fefe:	e7cc      	b.n	800fe9a <__kernel_rem_pio2+0x72>
 800ff00:	9b02      	ldr	r3, [sp, #8]
 800ff02:	aa0e      	add	r2, sp, #56	; 0x38
 800ff04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff08:	930d      	str	r3, [sp, #52]	; 0x34
 800ff0a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ff0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ff10:	9c02      	ldr	r4, [sp, #8]
 800ff12:	930c      	str	r3, [sp, #48]	; 0x30
 800ff14:	00e3      	lsls	r3, r4, #3
 800ff16:	930a      	str	r3, [sp, #40]	; 0x28
 800ff18:	ab9a      	add	r3, sp, #616	; 0x268
 800ff1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff1e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ff22:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ff26:	ab72      	add	r3, sp, #456	; 0x1c8
 800ff28:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ff2c:	46c3      	mov	fp, r8
 800ff2e:	46a1      	mov	r9, r4
 800ff30:	f1b9 0f00 	cmp.w	r9, #0
 800ff34:	f1a5 0508 	sub.w	r5, r5, #8
 800ff38:	dc77      	bgt.n	801002a <__kernel_rem_pio2+0x202>
 800ff3a:	ec47 6b10 	vmov	d0, r6, r7
 800ff3e:	4650      	mov	r0, sl
 800ff40:	f000 fc0a 	bl	8010758 <scalbn>
 800ff44:	ec57 6b10 	vmov	r6, r7, d0
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ff4e:	ee10 0a10 	vmov	r0, s0
 800ff52:	4639      	mov	r1, r7
 800ff54:	f7f0 f994 	bl	8000280 <__aeabi_dmul>
 800ff58:	ec41 0b10 	vmov	d0, r0, r1
 800ff5c:	f000 fb7c 	bl	8010658 <floor>
 800ff60:	4b7c      	ldr	r3, [pc, #496]	; (8010154 <__kernel_rem_pio2+0x32c>)
 800ff62:	ec51 0b10 	vmov	r0, r1, d0
 800ff66:	2200      	movs	r2, #0
 800ff68:	f7f0 f98a 	bl	8000280 <__aeabi_dmul>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	4630      	mov	r0, r6
 800ff72:	4639      	mov	r1, r7
 800ff74:	f7f0 fab2 	bl	80004dc <__aeabi_dsub>
 800ff78:	460f      	mov	r7, r1
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	f7f0 fcee 	bl	800095c <__aeabi_d2iz>
 800ff80:	9004      	str	r0, [sp, #16]
 800ff82:	f7f0 fbf9 	bl	8000778 <__aeabi_i2d>
 800ff86:	4602      	mov	r2, r0
 800ff88:	460b      	mov	r3, r1
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	4639      	mov	r1, r7
 800ff8e:	f7f0 faa5 	bl	80004dc <__aeabi_dsub>
 800ff92:	f1ba 0f00 	cmp.w	sl, #0
 800ff96:	4606      	mov	r6, r0
 800ff98:	460f      	mov	r7, r1
 800ff9a:	dd6d      	ble.n	8010078 <__kernel_rem_pio2+0x250>
 800ff9c:	1e62      	subs	r2, r4, #1
 800ff9e:	ab0e      	add	r3, sp, #56	; 0x38
 800ffa0:	9d04      	ldr	r5, [sp, #16]
 800ffa2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ffa6:	f1ca 0118 	rsb	r1, sl, #24
 800ffaa:	fa40 f301 	asr.w	r3, r0, r1
 800ffae:	441d      	add	r5, r3
 800ffb0:	408b      	lsls	r3, r1
 800ffb2:	1ac0      	subs	r0, r0, r3
 800ffb4:	ab0e      	add	r3, sp, #56	; 0x38
 800ffb6:	9504      	str	r5, [sp, #16]
 800ffb8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ffbc:	f1ca 0317 	rsb	r3, sl, #23
 800ffc0:	fa40 fb03 	asr.w	fp, r0, r3
 800ffc4:	f1bb 0f00 	cmp.w	fp, #0
 800ffc8:	dd65      	ble.n	8010096 <__kernel_rem_pio2+0x26e>
 800ffca:	9b04      	ldr	r3, [sp, #16]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	3301      	adds	r3, #1
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	4615      	mov	r5, r2
 800ffd4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ffd8:	4294      	cmp	r4, r2
 800ffda:	f300 809c 	bgt.w	8010116 <__kernel_rem_pio2+0x2ee>
 800ffde:	f1ba 0f00 	cmp.w	sl, #0
 800ffe2:	dd07      	ble.n	800fff4 <__kernel_rem_pio2+0x1cc>
 800ffe4:	f1ba 0f01 	cmp.w	sl, #1
 800ffe8:	f000 80c0 	beq.w	801016c <__kernel_rem_pio2+0x344>
 800ffec:	f1ba 0f02 	cmp.w	sl, #2
 800fff0:	f000 80c6 	beq.w	8010180 <__kernel_rem_pio2+0x358>
 800fff4:	f1bb 0f02 	cmp.w	fp, #2
 800fff8:	d14d      	bne.n	8010096 <__kernel_rem_pio2+0x26e>
 800fffa:	4632      	mov	r2, r6
 800fffc:	463b      	mov	r3, r7
 800fffe:	4956      	ldr	r1, [pc, #344]	; (8010158 <__kernel_rem_pio2+0x330>)
 8010000:	2000      	movs	r0, #0
 8010002:	f7f0 fa6b 	bl	80004dc <__aeabi_dsub>
 8010006:	4606      	mov	r6, r0
 8010008:	460f      	mov	r7, r1
 801000a:	2d00      	cmp	r5, #0
 801000c:	d043      	beq.n	8010096 <__kernel_rem_pio2+0x26e>
 801000e:	4650      	mov	r0, sl
 8010010:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8010148 <__kernel_rem_pio2+0x320>
 8010014:	f000 fba0 	bl	8010758 <scalbn>
 8010018:	4630      	mov	r0, r6
 801001a:	4639      	mov	r1, r7
 801001c:	ec53 2b10 	vmov	r2, r3, d0
 8010020:	f7f0 fa5c 	bl	80004dc <__aeabi_dsub>
 8010024:	4606      	mov	r6, r0
 8010026:	460f      	mov	r7, r1
 8010028:	e035      	b.n	8010096 <__kernel_rem_pio2+0x26e>
 801002a:	4b4c      	ldr	r3, [pc, #304]	; (801015c <__kernel_rem_pio2+0x334>)
 801002c:	2200      	movs	r2, #0
 801002e:	4630      	mov	r0, r6
 8010030:	4639      	mov	r1, r7
 8010032:	f7f0 f925 	bl	8000280 <__aeabi_dmul>
 8010036:	f7f0 fc91 	bl	800095c <__aeabi_d2iz>
 801003a:	f7f0 fb9d 	bl	8000778 <__aeabi_i2d>
 801003e:	4602      	mov	r2, r0
 8010040:	460b      	mov	r3, r1
 8010042:	ec43 2b18 	vmov	d8, r2, r3
 8010046:	4b46      	ldr	r3, [pc, #280]	; (8010160 <__kernel_rem_pio2+0x338>)
 8010048:	2200      	movs	r2, #0
 801004a:	f7f0 f919 	bl	8000280 <__aeabi_dmul>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4630      	mov	r0, r6
 8010054:	4639      	mov	r1, r7
 8010056:	f7f0 fa41 	bl	80004dc <__aeabi_dsub>
 801005a:	f7f0 fc7f 	bl	800095c <__aeabi_d2iz>
 801005e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010062:	f84b 0b04 	str.w	r0, [fp], #4
 8010066:	ec51 0b18 	vmov	r0, r1, d8
 801006a:	f7f0 fa39 	bl	80004e0 <__adddf3>
 801006e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010072:	4606      	mov	r6, r0
 8010074:	460f      	mov	r7, r1
 8010076:	e75b      	b.n	800ff30 <__kernel_rem_pio2+0x108>
 8010078:	d106      	bne.n	8010088 <__kernel_rem_pio2+0x260>
 801007a:	1e63      	subs	r3, r4, #1
 801007c:	aa0e      	add	r2, sp, #56	; 0x38
 801007e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010082:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8010086:	e79d      	b.n	800ffc4 <__kernel_rem_pio2+0x19c>
 8010088:	4b36      	ldr	r3, [pc, #216]	; (8010164 <__kernel_rem_pio2+0x33c>)
 801008a:	2200      	movs	r2, #0
 801008c:	f7f0 fc52 	bl	8000934 <__aeabi_dcmpge>
 8010090:	2800      	cmp	r0, #0
 8010092:	d13d      	bne.n	8010110 <__kernel_rem_pio2+0x2e8>
 8010094:	4683      	mov	fp, r0
 8010096:	2200      	movs	r2, #0
 8010098:	2300      	movs	r3, #0
 801009a:	4630      	mov	r0, r6
 801009c:	4639      	mov	r1, r7
 801009e:	f7f0 fc2b 	bl	80008f8 <__aeabi_dcmpeq>
 80100a2:	2800      	cmp	r0, #0
 80100a4:	f000 80c0 	beq.w	8010228 <__kernel_rem_pio2+0x400>
 80100a8:	1e65      	subs	r5, r4, #1
 80100aa:	462b      	mov	r3, r5
 80100ac:	2200      	movs	r2, #0
 80100ae:	9902      	ldr	r1, [sp, #8]
 80100b0:	428b      	cmp	r3, r1
 80100b2:	da6c      	bge.n	801018e <__kernel_rem_pio2+0x366>
 80100b4:	2a00      	cmp	r2, #0
 80100b6:	f000 8089 	beq.w	80101cc <__kernel_rem_pio2+0x3a4>
 80100ba:	ab0e      	add	r3, sp, #56	; 0x38
 80100bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80100c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	f000 80ad 	beq.w	8010224 <__kernel_rem_pio2+0x3fc>
 80100ca:	4650      	mov	r0, sl
 80100cc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8010148 <__kernel_rem_pio2+0x320>
 80100d0:	f000 fb42 	bl	8010758 <scalbn>
 80100d4:	ab9a      	add	r3, sp, #616	; 0x268
 80100d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80100da:	ec57 6b10 	vmov	r6, r7, d0
 80100de:	00ec      	lsls	r4, r5, #3
 80100e0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80100e4:	46aa      	mov	sl, r5
 80100e6:	f1ba 0f00 	cmp.w	sl, #0
 80100ea:	f280 80d6 	bge.w	801029a <__kernel_rem_pio2+0x472>
 80100ee:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8010140 <__kernel_rem_pio2+0x318>
 80100f2:	462e      	mov	r6, r5
 80100f4:	2e00      	cmp	r6, #0
 80100f6:	f2c0 8104 	blt.w	8010302 <__kernel_rem_pio2+0x4da>
 80100fa:	ab72      	add	r3, sp, #456	; 0x1c8
 80100fc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010100:	f8df a064 	ldr.w	sl, [pc, #100]	; 8010168 <__kernel_rem_pio2+0x340>
 8010104:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010108:	f04f 0800 	mov.w	r8, #0
 801010c:	1baf      	subs	r7, r5, r6
 801010e:	e0ea      	b.n	80102e6 <__kernel_rem_pio2+0x4be>
 8010110:	f04f 0b02 	mov.w	fp, #2
 8010114:	e759      	b.n	800ffca <__kernel_rem_pio2+0x1a2>
 8010116:	f8d8 3000 	ldr.w	r3, [r8]
 801011a:	b955      	cbnz	r5, 8010132 <__kernel_rem_pio2+0x30a>
 801011c:	b123      	cbz	r3, 8010128 <__kernel_rem_pio2+0x300>
 801011e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010122:	f8c8 3000 	str.w	r3, [r8]
 8010126:	2301      	movs	r3, #1
 8010128:	3201      	adds	r2, #1
 801012a:	f108 0804 	add.w	r8, r8, #4
 801012e:	461d      	mov	r5, r3
 8010130:	e752      	b.n	800ffd8 <__kernel_rem_pio2+0x1b0>
 8010132:	1acb      	subs	r3, r1, r3
 8010134:	f8c8 3000 	str.w	r3, [r8]
 8010138:	462b      	mov	r3, r5
 801013a:	e7f5      	b.n	8010128 <__kernel_rem_pio2+0x300>
 801013c:	f3af 8000 	nop.w
	...
 801014c:	3ff00000 	.word	0x3ff00000
 8010150:	080116d8 	.word	0x080116d8
 8010154:	40200000 	.word	0x40200000
 8010158:	3ff00000 	.word	0x3ff00000
 801015c:	3e700000 	.word	0x3e700000
 8010160:	41700000 	.word	0x41700000
 8010164:	3fe00000 	.word	0x3fe00000
 8010168:	08011698 	.word	0x08011698
 801016c:	1e62      	subs	r2, r4, #1
 801016e:	ab0e      	add	r3, sp, #56	; 0x38
 8010170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010174:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010178:	a90e      	add	r1, sp, #56	; 0x38
 801017a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801017e:	e739      	b.n	800fff4 <__kernel_rem_pio2+0x1cc>
 8010180:	1e62      	subs	r2, r4, #1
 8010182:	ab0e      	add	r3, sp, #56	; 0x38
 8010184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010188:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801018c:	e7f4      	b.n	8010178 <__kernel_rem_pio2+0x350>
 801018e:	a90e      	add	r1, sp, #56	; 0x38
 8010190:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010194:	3b01      	subs	r3, #1
 8010196:	430a      	orrs	r2, r1
 8010198:	e789      	b.n	80100ae <__kernel_rem_pio2+0x286>
 801019a:	3301      	adds	r3, #1
 801019c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80101a0:	2900      	cmp	r1, #0
 80101a2:	d0fa      	beq.n	801019a <__kernel_rem_pio2+0x372>
 80101a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101a6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80101aa:	446a      	add	r2, sp
 80101ac:	3a98      	subs	r2, #152	; 0x98
 80101ae:	920a      	str	r2, [sp, #40]	; 0x28
 80101b0:	9a08      	ldr	r2, [sp, #32]
 80101b2:	18e3      	adds	r3, r4, r3
 80101b4:	18a5      	adds	r5, r4, r2
 80101b6:	aa22      	add	r2, sp, #136	; 0x88
 80101b8:	f104 0801 	add.w	r8, r4, #1
 80101bc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80101c0:	9304      	str	r3, [sp, #16]
 80101c2:	9b04      	ldr	r3, [sp, #16]
 80101c4:	4543      	cmp	r3, r8
 80101c6:	da04      	bge.n	80101d2 <__kernel_rem_pio2+0x3aa>
 80101c8:	461c      	mov	r4, r3
 80101ca:	e6a3      	b.n	800ff14 <__kernel_rem_pio2+0xec>
 80101cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101ce:	2301      	movs	r3, #1
 80101d0:	e7e4      	b.n	801019c <__kernel_rem_pio2+0x374>
 80101d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101d4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80101d8:	f7f0 face 	bl	8000778 <__aeabi_i2d>
 80101dc:	e8e5 0102 	strd	r0, r1, [r5], #8
 80101e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101e2:	46ab      	mov	fp, r5
 80101e4:	461c      	mov	r4, r3
 80101e6:	f04f 0900 	mov.w	r9, #0
 80101ea:	2600      	movs	r6, #0
 80101ec:	2700      	movs	r7, #0
 80101ee:	9b06      	ldr	r3, [sp, #24]
 80101f0:	4599      	cmp	r9, r3
 80101f2:	dd06      	ble.n	8010202 <__kernel_rem_pio2+0x3da>
 80101f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101f6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80101fa:	f108 0801 	add.w	r8, r8, #1
 80101fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010200:	e7df      	b.n	80101c2 <__kernel_rem_pio2+0x39a>
 8010202:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010206:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801020a:	f7f0 f839 	bl	8000280 <__aeabi_dmul>
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	4630      	mov	r0, r6
 8010214:	4639      	mov	r1, r7
 8010216:	f7f0 f963 	bl	80004e0 <__adddf3>
 801021a:	f109 0901 	add.w	r9, r9, #1
 801021e:	4606      	mov	r6, r0
 8010220:	460f      	mov	r7, r1
 8010222:	e7e4      	b.n	80101ee <__kernel_rem_pio2+0x3c6>
 8010224:	3d01      	subs	r5, #1
 8010226:	e748      	b.n	80100ba <__kernel_rem_pio2+0x292>
 8010228:	ec47 6b10 	vmov	d0, r6, r7
 801022c:	f1ca 0000 	rsb	r0, sl, #0
 8010230:	f000 fa92 	bl	8010758 <scalbn>
 8010234:	ec57 6b10 	vmov	r6, r7, d0
 8010238:	4ba0      	ldr	r3, [pc, #640]	; (80104bc <__kernel_rem_pio2+0x694>)
 801023a:	ee10 0a10 	vmov	r0, s0
 801023e:	2200      	movs	r2, #0
 8010240:	4639      	mov	r1, r7
 8010242:	f7f0 fb77 	bl	8000934 <__aeabi_dcmpge>
 8010246:	b1f8      	cbz	r0, 8010288 <__kernel_rem_pio2+0x460>
 8010248:	4b9d      	ldr	r3, [pc, #628]	; (80104c0 <__kernel_rem_pio2+0x698>)
 801024a:	2200      	movs	r2, #0
 801024c:	4630      	mov	r0, r6
 801024e:	4639      	mov	r1, r7
 8010250:	f7f0 f816 	bl	8000280 <__aeabi_dmul>
 8010254:	f7f0 fb82 	bl	800095c <__aeabi_d2iz>
 8010258:	4680      	mov	r8, r0
 801025a:	f7f0 fa8d 	bl	8000778 <__aeabi_i2d>
 801025e:	4b97      	ldr	r3, [pc, #604]	; (80104bc <__kernel_rem_pio2+0x694>)
 8010260:	2200      	movs	r2, #0
 8010262:	f7f0 f80d 	bl	8000280 <__aeabi_dmul>
 8010266:	460b      	mov	r3, r1
 8010268:	4602      	mov	r2, r0
 801026a:	4639      	mov	r1, r7
 801026c:	4630      	mov	r0, r6
 801026e:	f7f0 f935 	bl	80004dc <__aeabi_dsub>
 8010272:	f7f0 fb73 	bl	800095c <__aeabi_d2iz>
 8010276:	1c65      	adds	r5, r4, #1
 8010278:	ab0e      	add	r3, sp, #56	; 0x38
 801027a:	f10a 0a18 	add.w	sl, sl, #24
 801027e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010282:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010286:	e720      	b.n	80100ca <__kernel_rem_pio2+0x2a2>
 8010288:	4630      	mov	r0, r6
 801028a:	4639      	mov	r1, r7
 801028c:	f7f0 fb66 	bl	800095c <__aeabi_d2iz>
 8010290:	ab0e      	add	r3, sp, #56	; 0x38
 8010292:	4625      	mov	r5, r4
 8010294:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010298:	e717      	b.n	80100ca <__kernel_rem_pio2+0x2a2>
 801029a:	ab0e      	add	r3, sp, #56	; 0x38
 801029c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80102a0:	f7f0 fa6a 	bl	8000778 <__aeabi_i2d>
 80102a4:	4632      	mov	r2, r6
 80102a6:	463b      	mov	r3, r7
 80102a8:	f7ef ffea 	bl	8000280 <__aeabi_dmul>
 80102ac:	4b84      	ldr	r3, [pc, #528]	; (80104c0 <__kernel_rem_pio2+0x698>)
 80102ae:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80102b2:	2200      	movs	r2, #0
 80102b4:	4630      	mov	r0, r6
 80102b6:	4639      	mov	r1, r7
 80102b8:	f7ef ffe2 	bl	8000280 <__aeabi_dmul>
 80102bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102c0:	4606      	mov	r6, r0
 80102c2:	460f      	mov	r7, r1
 80102c4:	e70f      	b.n	80100e6 <__kernel_rem_pio2+0x2be>
 80102c6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80102ca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80102ce:	f7ef ffd7 	bl	8000280 <__aeabi_dmul>
 80102d2:	4602      	mov	r2, r0
 80102d4:	460b      	mov	r3, r1
 80102d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102da:	f7f0 f901 	bl	80004e0 <__adddf3>
 80102de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80102e2:	f108 0801 	add.w	r8, r8, #1
 80102e6:	9b02      	ldr	r3, [sp, #8]
 80102e8:	4598      	cmp	r8, r3
 80102ea:	dc01      	bgt.n	80102f0 <__kernel_rem_pio2+0x4c8>
 80102ec:	45b8      	cmp	r8, r7
 80102ee:	ddea      	ble.n	80102c6 <__kernel_rem_pio2+0x49e>
 80102f0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80102f4:	ab4a      	add	r3, sp, #296	; 0x128
 80102f6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80102fa:	ed87 7b00 	vstr	d7, [r7]
 80102fe:	3e01      	subs	r6, #1
 8010300:	e6f8      	b.n	80100f4 <__kernel_rem_pio2+0x2cc>
 8010302:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010304:	2b02      	cmp	r3, #2
 8010306:	dc0b      	bgt.n	8010320 <__kernel_rem_pio2+0x4f8>
 8010308:	2b00      	cmp	r3, #0
 801030a:	dc35      	bgt.n	8010378 <__kernel_rem_pio2+0x550>
 801030c:	d059      	beq.n	80103c2 <__kernel_rem_pio2+0x59a>
 801030e:	9b04      	ldr	r3, [sp, #16]
 8010310:	f003 0007 	and.w	r0, r3, #7
 8010314:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010318:	ecbd 8b02 	vpop	{d8}
 801031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010320:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010322:	2b03      	cmp	r3, #3
 8010324:	d1f3      	bne.n	801030e <__kernel_rem_pio2+0x4e6>
 8010326:	ab4a      	add	r3, sp, #296	; 0x128
 8010328:	4423      	add	r3, r4
 801032a:	9306      	str	r3, [sp, #24]
 801032c:	461c      	mov	r4, r3
 801032e:	469a      	mov	sl, r3
 8010330:	9502      	str	r5, [sp, #8]
 8010332:	9b02      	ldr	r3, [sp, #8]
 8010334:	2b00      	cmp	r3, #0
 8010336:	f1aa 0a08 	sub.w	sl, sl, #8
 801033a:	dc6b      	bgt.n	8010414 <__kernel_rem_pio2+0x5ec>
 801033c:	46aa      	mov	sl, r5
 801033e:	f1ba 0f01 	cmp.w	sl, #1
 8010342:	f1a4 0408 	sub.w	r4, r4, #8
 8010346:	f300 8085 	bgt.w	8010454 <__kernel_rem_pio2+0x62c>
 801034a:	9c06      	ldr	r4, [sp, #24]
 801034c:	2000      	movs	r0, #0
 801034e:	3408      	adds	r4, #8
 8010350:	2100      	movs	r1, #0
 8010352:	2d01      	cmp	r5, #1
 8010354:	f300 809d 	bgt.w	8010492 <__kernel_rem_pio2+0x66a>
 8010358:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801035c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010360:	f1bb 0f00 	cmp.w	fp, #0
 8010364:	f040 809b 	bne.w	801049e <__kernel_rem_pio2+0x676>
 8010368:	9b01      	ldr	r3, [sp, #4]
 801036a:	e9c3 5600 	strd	r5, r6, [r3]
 801036e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010372:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010376:	e7ca      	b.n	801030e <__kernel_rem_pio2+0x4e6>
 8010378:	3408      	adds	r4, #8
 801037a:	ab4a      	add	r3, sp, #296	; 0x128
 801037c:	441c      	add	r4, r3
 801037e:	462e      	mov	r6, r5
 8010380:	2000      	movs	r0, #0
 8010382:	2100      	movs	r1, #0
 8010384:	2e00      	cmp	r6, #0
 8010386:	da36      	bge.n	80103f6 <__kernel_rem_pio2+0x5ce>
 8010388:	f1bb 0f00 	cmp.w	fp, #0
 801038c:	d039      	beq.n	8010402 <__kernel_rem_pio2+0x5da>
 801038e:	4602      	mov	r2, r0
 8010390:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010394:	9c01      	ldr	r4, [sp, #4]
 8010396:	e9c4 2300 	strd	r2, r3, [r4]
 801039a:	4602      	mov	r2, r0
 801039c:	460b      	mov	r3, r1
 801039e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80103a2:	f7f0 f89b 	bl	80004dc <__aeabi_dsub>
 80103a6:	ae4c      	add	r6, sp, #304	; 0x130
 80103a8:	2401      	movs	r4, #1
 80103aa:	42a5      	cmp	r5, r4
 80103ac:	da2c      	bge.n	8010408 <__kernel_rem_pio2+0x5e0>
 80103ae:	f1bb 0f00 	cmp.w	fp, #0
 80103b2:	d002      	beq.n	80103ba <__kernel_rem_pio2+0x592>
 80103b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103b8:	4619      	mov	r1, r3
 80103ba:	9b01      	ldr	r3, [sp, #4]
 80103bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80103c0:	e7a5      	b.n	801030e <__kernel_rem_pio2+0x4e6>
 80103c2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80103c6:	eb0d 0403 	add.w	r4, sp, r3
 80103ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80103ce:	2000      	movs	r0, #0
 80103d0:	2100      	movs	r1, #0
 80103d2:	2d00      	cmp	r5, #0
 80103d4:	da09      	bge.n	80103ea <__kernel_rem_pio2+0x5c2>
 80103d6:	f1bb 0f00 	cmp.w	fp, #0
 80103da:	d002      	beq.n	80103e2 <__kernel_rem_pio2+0x5ba>
 80103dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103e0:	4619      	mov	r1, r3
 80103e2:	9b01      	ldr	r3, [sp, #4]
 80103e4:	e9c3 0100 	strd	r0, r1, [r3]
 80103e8:	e791      	b.n	801030e <__kernel_rem_pio2+0x4e6>
 80103ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80103ee:	f7f0 f877 	bl	80004e0 <__adddf3>
 80103f2:	3d01      	subs	r5, #1
 80103f4:	e7ed      	b.n	80103d2 <__kernel_rem_pio2+0x5aa>
 80103f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80103fa:	f7f0 f871 	bl	80004e0 <__adddf3>
 80103fe:	3e01      	subs	r6, #1
 8010400:	e7c0      	b.n	8010384 <__kernel_rem_pio2+0x55c>
 8010402:	4602      	mov	r2, r0
 8010404:	460b      	mov	r3, r1
 8010406:	e7c5      	b.n	8010394 <__kernel_rem_pio2+0x56c>
 8010408:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801040c:	f7f0 f868 	bl	80004e0 <__adddf3>
 8010410:	3401      	adds	r4, #1
 8010412:	e7ca      	b.n	80103aa <__kernel_rem_pio2+0x582>
 8010414:	e9da 8900 	ldrd	r8, r9, [sl]
 8010418:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801041c:	9b02      	ldr	r3, [sp, #8]
 801041e:	3b01      	subs	r3, #1
 8010420:	9302      	str	r3, [sp, #8]
 8010422:	4632      	mov	r2, r6
 8010424:	463b      	mov	r3, r7
 8010426:	4640      	mov	r0, r8
 8010428:	4649      	mov	r1, r9
 801042a:	f7f0 f859 	bl	80004e0 <__adddf3>
 801042e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010432:	4602      	mov	r2, r0
 8010434:	460b      	mov	r3, r1
 8010436:	4640      	mov	r0, r8
 8010438:	4649      	mov	r1, r9
 801043a:	f7f0 f84f 	bl	80004dc <__aeabi_dsub>
 801043e:	4632      	mov	r2, r6
 8010440:	463b      	mov	r3, r7
 8010442:	f7f0 f84d 	bl	80004e0 <__adddf3>
 8010446:	ed9d 7b08 	vldr	d7, [sp, #32]
 801044a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801044e:	ed8a 7b00 	vstr	d7, [sl]
 8010452:	e76e      	b.n	8010332 <__kernel_rem_pio2+0x50a>
 8010454:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010458:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801045c:	4640      	mov	r0, r8
 801045e:	4632      	mov	r2, r6
 8010460:	463b      	mov	r3, r7
 8010462:	4649      	mov	r1, r9
 8010464:	f7f0 f83c 	bl	80004e0 <__adddf3>
 8010468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801046c:	4602      	mov	r2, r0
 801046e:	460b      	mov	r3, r1
 8010470:	4640      	mov	r0, r8
 8010472:	4649      	mov	r1, r9
 8010474:	f7f0 f832 	bl	80004dc <__aeabi_dsub>
 8010478:	4632      	mov	r2, r6
 801047a:	463b      	mov	r3, r7
 801047c:	f7f0 f830 	bl	80004e0 <__adddf3>
 8010480:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010484:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010488:	ed84 7b00 	vstr	d7, [r4]
 801048c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010490:	e755      	b.n	801033e <__kernel_rem_pio2+0x516>
 8010492:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010496:	f7f0 f823 	bl	80004e0 <__adddf3>
 801049a:	3d01      	subs	r5, #1
 801049c:	e759      	b.n	8010352 <__kernel_rem_pio2+0x52a>
 801049e:	9b01      	ldr	r3, [sp, #4]
 80104a0:	9a01      	ldr	r2, [sp, #4]
 80104a2:	601d      	str	r5, [r3, #0]
 80104a4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80104a8:	605c      	str	r4, [r3, #4]
 80104aa:	609f      	str	r7, [r3, #8]
 80104ac:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80104b0:	60d3      	str	r3, [r2, #12]
 80104b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104b6:	6110      	str	r0, [r2, #16]
 80104b8:	6153      	str	r3, [r2, #20]
 80104ba:	e728      	b.n	801030e <__kernel_rem_pio2+0x4e6>
 80104bc:	41700000 	.word	0x41700000
 80104c0:	3e700000 	.word	0x3e700000
 80104c4:	00000000 	.word	0x00000000

080104c8 <__kernel_sin>:
 80104c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	ed2d 8b04 	vpush	{d8-d9}
 80104d0:	eeb0 8a41 	vmov.f32	s16, s2
 80104d4:	eef0 8a61 	vmov.f32	s17, s3
 80104d8:	ec55 4b10 	vmov	r4, r5, d0
 80104dc:	b083      	sub	sp, #12
 80104de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80104e6:	9001      	str	r0, [sp, #4]
 80104e8:	da06      	bge.n	80104f8 <__kernel_sin+0x30>
 80104ea:	ee10 0a10 	vmov	r0, s0
 80104ee:	4629      	mov	r1, r5
 80104f0:	f7f0 fa34 	bl	800095c <__aeabi_d2iz>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d051      	beq.n	801059c <__kernel_sin+0xd4>
 80104f8:	4622      	mov	r2, r4
 80104fa:	462b      	mov	r3, r5
 80104fc:	4620      	mov	r0, r4
 80104fe:	4629      	mov	r1, r5
 8010500:	f7ef febe 	bl	8000280 <__aeabi_dmul>
 8010504:	4682      	mov	sl, r0
 8010506:	468b      	mov	fp, r1
 8010508:	4602      	mov	r2, r0
 801050a:	460b      	mov	r3, r1
 801050c:	4620      	mov	r0, r4
 801050e:	4629      	mov	r1, r5
 8010510:	f7ef feb6 	bl	8000280 <__aeabi_dmul>
 8010514:	a341      	add	r3, pc, #260	; (adr r3, 801061c <__kernel_sin+0x154>)
 8010516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051a:	4680      	mov	r8, r0
 801051c:	4689      	mov	r9, r1
 801051e:	4650      	mov	r0, sl
 8010520:	4659      	mov	r1, fp
 8010522:	f7ef fead 	bl	8000280 <__aeabi_dmul>
 8010526:	a33f      	add	r3, pc, #252	; (adr r3, 8010624 <__kernel_sin+0x15c>)
 8010528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052c:	f7ef ffd6 	bl	80004dc <__aeabi_dsub>
 8010530:	4652      	mov	r2, sl
 8010532:	465b      	mov	r3, fp
 8010534:	f7ef fea4 	bl	8000280 <__aeabi_dmul>
 8010538:	a33c      	add	r3, pc, #240	; (adr r3, 801062c <__kernel_sin+0x164>)
 801053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053e:	f7ef ffcf 	bl	80004e0 <__adddf3>
 8010542:	4652      	mov	r2, sl
 8010544:	465b      	mov	r3, fp
 8010546:	f7ef fe9b 	bl	8000280 <__aeabi_dmul>
 801054a:	a33a      	add	r3, pc, #232	; (adr r3, 8010634 <__kernel_sin+0x16c>)
 801054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010550:	f7ef ffc4 	bl	80004dc <__aeabi_dsub>
 8010554:	4652      	mov	r2, sl
 8010556:	465b      	mov	r3, fp
 8010558:	f7ef fe92 	bl	8000280 <__aeabi_dmul>
 801055c:	a337      	add	r3, pc, #220	; (adr r3, 801063c <__kernel_sin+0x174>)
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	f7ef ffbd 	bl	80004e0 <__adddf3>
 8010566:	9b01      	ldr	r3, [sp, #4]
 8010568:	4606      	mov	r6, r0
 801056a:	460f      	mov	r7, r1
 801056c:	b9eb      	cbnz	r3, 80105aa <__kernel_sin+0xe2>
 801056e:	4602      	mov	r2, r0
 8010570:	460b      	mov	r3, r1
 8010572:	4650      	mov	r0, sl
 8010574:	4659      	mov	r1, fp
 8010576:	f7ef fe83 	bl	8000280 <__aeabi_dmul>
 801057a:	a325      	add	r3, pc, #148	; (adr r3, 8010610 <__kernel_sin+0x148>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	f7ef ffac 	bl	80004dc <__aeabi_dsub>
 8010584:	4642      	mov	r2, r8
 8010586:	464b      	mov	r3, r9
 8010588:	f7ef fe7a 	bl	8000280 <__aeabi_dmul>
 801058c:	4602      	mov	r2, r0
 801058e:	460b      	mov	r3, r1
 8010590:	4620      	mov	r0, r4
 8010592:	4629      	mov	r1, r5
 8010594:	f7ef ffa4 	bl	80004e0 <__adddf3>
 8010598:	4604      	mov	r4, r0
 801059a:	460d      	mov	r5, r1
 801059c:	ec45 4b10 	vmov	d0, r4, r5
 80105a0:	b003      	add	sp, #12
 80105a2:	ecbd 8b04 	vpop	{d8-d9}
 80105a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105aa:	4b1b      	ldr	r3, [pc, #108]	; (8010618 <__kernel_sin+0x150>)
 80105ac:	ec51 0b18 	vmov	r0, r1, d8
 80105b0:	2200      	movs	r2, #0
 80105b2:	f7ef fe65 	bl	8000280 <__aeabi_dmul>
 80105b6:	4632      	mov	r2, r6
 80105b8:	ec41 0b19 	vmov	d9, r0, r1
 80105bc:	463b      	mov	r3, r7
 80105be:	4640      	mov	r0, r8
 80105c0:	4649      	mov	r1, r9
 80105c2:	f7ef fe5d 	bl	8000280 <__aeabi_dmul>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	ec51 0b19 	vmov	r0, r1, d9
 80105ce:	f7ef ff85 	bl	80004dc <__aeabi_dsub>
 80105d2:	4652      	mov	r2, sl
 80105d4:	465b      	mov	r3, fp
 80105d6:	f7ef fe53 	bl	8000280 <__aeabi_dmul>
 80105da:	ec53 2b18 	vmov	r2, r3, d8
 80105de:	f7ef ff7d 	bl	80004dc <__aeabi_dsub>
 80105e2:	a30b      	add	r3, pc, #44	; (adr r3, 8010610 <__kernel_sin+0x148>)
 80105e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e8:	4606      	mov	r6, r0
 80105ea:	460f      	mov	r7, r1
 80105ec:	4640      	mov	r0, r8
 80105ee:	4649      	mov	r1, r9
 80105f0:	f7ef fe46 	bl	8000280 <__aeabi_dmul>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	4630      	mov	r0, r6
 80105fa:	4639      	mov	r1, r7
 80105fc:	f7ef ff70 	bl	80004e0 <__adddf3>
 8010600:	4602      	mov	r2, r0
 8010602:	460b      	mov	r3, r1
 8010604:	4620      	mov	r0, r4
 8010606:	4629      	mov	r1, r5
 8010608:	f7ef ff68 	bl	80004dc <__aeabi_dsub>
 801060c:	e7c4      	b.n	8010598 <__kernel_sin+0xd0>
 801060e:	bf00      	nop
 8010610:	55555549 	.word	0x55555549
 8010614:	3fc55555 	.word	0x3fc55555
 8010618:	3fe00000 	.word	0x3fe00000
 801061c:	5acfd57c 	.word	0x5acfd57c
 8010620:	3de5d93a 	.word	0x3de5d93a
 8010624:	8a2b9ceb 	.word	0x8a2b9ceb
 8010628:	3e5ae5e6 	.word	0x3e5ae5e6
 801062c:	57b1fe7d 	.word	0x57b1fe7d
 8010630:	3ec71de3 	.word	0x3ec71de3
 8010634:	19c161d5 	.word	0x19c161d5
 8010638:	3f2a01a0 	.word	0x3f2a01a0
 801063c:	1110f8a6 	.word	0x1110f8a6
 8010640:	3f811111 	.word	0x3f811111

08010644 <fabs>:
 8010644:	ec51 0b10 	vmov	r0, r1, d0
 8010648:	ee10 2a10 	vmov	r2, s0
 801064c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010650:	ec43 2b10 	vmov	d0, r2, r3
 8010654:	4770      	bx	lr
	...

08010658 <floor>:
 8010658:	ec51 0b10 	vmov	r0, r1, d0
 801065c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010660:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010664:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010668:	2e13      	cmp	r6, #19
 801066a:	ee10 5a10 	vmov	r5, s0
 801066e:	ee10 8a10 	vmov	r8, s0
 8010672:	460c      	mov	r4, r1
 8010674:	dc32      	bgt.n	80106dc <floor+0x84>
 8010676:	2e00      	cmp	r6, #0
 8010678:	da14      	bge.n	80106a4 <floor+0x4c>
 801067a:	a333      	add	r3, pc, #204	; (adr r3, 8010748 <floor+0xf0>)
 801067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010680:	f7ef ff2e 	bl	80004e0 <__adddf3>
 8010684:	2200      	movs	r2, #0
 8010686:	2300      	movs	r3, #0
 8010688:	f7f0 f95e 	bl	8000948 <__aeabi_dcmpgt>
 801068c:	b138      	cbz	r0, 801069e <floor+0x46>
 801068e:	2c00      	cmp	r4, #0
 8010690:	da57      	bge.n	8010742 <floor+0xea>
 8010692:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010696:	431d      	orrs	r5, r3
 8010698:	d001      	beq.n	801069e <floor+0x46>
 801069a:	4c2d      	ldr	r4, [pc, #180]	; (8010750 <floor+0xf8>)
 801069c:	2500      	movs	r5, #0
 801069e:	4621      	mov	r1, r4
 80106a0:	4628      	mov	r0, r5
 80106a2:	e025      	b.n	80106f0 <floor+0x98>
 80106a4:	4f2b      	ldr	r7, [pc, #172]	; (8010754 <floor+0xfc>)
 80106a6:	4137      	asrs	r7, r6
 80106a8:	ea01 0307 	and.w	r3, r1, r7
 80106ac:	4303      	orrs	r3, r0
 80106ae:	d01f      	beq.n	80106f0 <floor+0x98>
 80106b0:	a325      	add	r3, pc, #148	; (adr r3, 8010748 <floor+0xf0>)
 80106b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b6:	f7ef ff13 	bl	80004e0 <__adddf3>
 80106ba:	2200      	movs	r2, #0
 80106bc:	2300      	movs	r3, #0
 80106be:	f7f0 f943 	bl	8000948 <__aeabi_dcmpgt>
 80106c2:	2800      	cmp	r0, #0
 80106c4:	d0eb      	beq.n	801069e <floor+0x46>
 80106c6:	2c00      	cmp	r4, #0
 80106c8:	bfbe      	ittt	lt
 80106ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80106ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80106d2:	19a4      	addlt	r4, r4, r6
 80106d4:	ea24 0407 	bic.w	r4, r4, r7
 80106d8:	2500      	movs	r5, #0
 80106da:	e7e0      	b.n	801069e <floor+0x46>
 80106dc:	2e33      	cmp	r6, #51	; 0x33
 80106de:	dd0b      	ble.n	80106f8 <floor+0xa0>
 80106e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80106e4:	d104      	bne.n	80106f0 <floor+0x98>
 80106e6:	ee10 2a10 	vmov	r2, s0
 80106ea:	460b      	mov	r3, r1
 80106ec:	f7ef fef8 	bl	80004e0 <__adddf3>
 80106f0:	ec41 0b10 	vmov	d0, r0, r1
 80106f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80106fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010700:	fa23 f707 	lsr.w	r7, r3, r7
 8010704:	4207      	tst	r7, r0
 8010706:	d0f3      	beq.n	80106f0 <floor+0x98>
 8010708:	a30f      	add	r3, pc, #60	; (adr r3, 8010748 <floor+0xf0>)
 801070a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070e:	f7ef fee7 	bl	80004e0 <__adddf3>
 8010712:	2200      	movs	r2, #0
 8010714:	2300      	movs	r3, #0
 8010716:	f7f0 f917 	bl	8000948 <__aeabi_dcmpgt>
 801071a:	2800      	cmp	r0, #0
 801071c:	d0bf      	beq.n	801069e <floor+0x46>
 801071e:	2c00      	cmp	r4, #0
 8010720:	da02      	bge.n	8010728 <floor+0xd0>
 8010722:	2e14      	cmp	r6, #20
 8010724:	d103      	bne.n	801072e <floor+0xd6>
 8010726:	3401      	adds	r4, #1
 8010728:	ea25 0507 	bic.w	r5, r5, r7
 801072c:	e7b7      	b.n	801069e <floor+0x46>
 801072e:	2301      	movs	r3, #1
 8010730:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010734:	fa03 f606 	lsl.w	r6, r3, r6
 8010738:	4435      	add	r5, r6
 801073a:	4545      	cmp	r5, r8
 801073c:	bf38      	it	cc
 801073e:	18e4      	addcc	r4, r4, r3
 8010740:	e7f2      	b.n	8010728 <floor+0xd0>
 8010742:	2500      	movs	r5, #0
 8010744:	462c      	mov	r4, r5
 8010746:	e7aa      	b.n	801069e <floor+0x46>
 8010748:	8800759c 	.word	0x8800759c
 801074c:	7e37e43c 	.word	0x7e37e43c
 8010750:	bff00000 	.word	0xbff00000
 8010754:	000fffff 	.word	0x000fffff

08010758 <scalbn>:
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	ec55 4b10 	vmov	r4, r5, d0
 801075e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010762:	4606      	mov	r6, r0
 8010764:	462b      	mov	r3, r5
 8010766:	b99a      	cbnz	r2, 8010790 <scalbn+0x38>
 8010768:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801076c:	4323      	orrs	r3, r4
 801076e:	d036      	beq.n	80107de <scalbn+0x86>
 8010770:	4b39      	ldr	r3, [pc, #228]	; (8010858 <scalbn+0x100>)
 8010772:	4629      	mov	r1, r5
 8010774:	ee10 0a10 	vmov	r0, s0
 8010778:	2200      	movs	r2, #0
 801077a:	f7ef fd81 	bl	8000280 <__aeabi_dmul>
 801077e:	4b37      	ldr	r3, [pc, #220]	; (801085c <scalbn+0x104>)
 8010780:	429e      	cmp	r6, r3
 8010782:	4604      	mov	r4, r0
 8010784:	460d      	mov	r5, r1
 8010786:	da10      	bge.n	80107aa <scalbn+0x52>
 8010788:	a32b      	add	r3, pc, #172	; (adr r3, 8010838 <scalbn+0xe0>)
 801078a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078e:	e03a      	b.n	8010806 <scalbn+0xae>
 8010790:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010794:	428a      	cmp	r2, r1
 8010796:	d10c      	bne.n	80107b2 <scalbn+0x5a>
 8010798:	ee10 2a10 	vmov	r2, s0
 801079c:	4620      	mov	r0, r4
 801079e:	4629      	mov	r1, r5
 80107a0:	f7ef fe9e 	bl	80004e0 <__adddf3>
 80107a4:	4604      	mov	r4, r0
 80107a6:	460d      	mov	r5, r1
 80107a8:	e019      	b.n	80107de <scalbn+0x86>
 80107aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80107ae:	460b      	mov	r3, r1
 80107b0:	3a36      	subs	r2, #54	; 0x36
 80107b2:	4432      	add	r2, r6
 80107b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80107b8:	428a      	cmp	r2, r1
 80107ba:	dd08      	ble.n	80107ce <scalbn+0x76>
 80107bc:	2d00      	cmp	r5, #0
 80107be:	a120      	add	r1, pc, #128	; (adr r1, 8010840 <scalbn+0xe8>)
 80107c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107c4:	da1c      	bge.n	8010800 <scalbn+0xa8>
 80107c6:	a120      	add	r1, pc, #128	; (adr r1, 8010848 <scalbn+0xf0>)
 80107c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107cc:	e018      	b.n	8010800 <scalbn+0xa8>
 80107ce:	2a00      	cmp	r2, #0
 80107d0:	dd08      	ble.n	80107e4 <scalbn+0x8c>
 80107d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80107d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80107da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80107de:	ec45 4b10 	vmov	d0, r4, r5
 80107e2:	bd70      	pop	{r4, r5, r6, pc}
 80107e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80107e8:	da19      	bge.n	801081e <scalbn+0xc6>
 80107ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80107ee:	429e      	cmp	r6, r3
 80107f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80107f4:	dd0a      	ble.n	801080c <scalbn+0xb4>
 80107f6:	a112      	add	r1, pc, #72	; (adr r1, 8010840 <scalbn+0xe8>)
 80107f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1e2      	bne.n	80107c6 <scalbn+0x6e>
 8010800:	a30f      	add	r3, pc, #60	; (adr r3, 8010840 <scalbn+0xe8>)
 8010802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010806:	f7ef fd3b 	bl	8000280 <__aeabi_dmul>
 801080a:	e7cb      	b.n	80107a4 <scalbn+0x4c>
 801080c:	a10a      	add	r1, pc, #40	; (adr r1, 8010838 <scalbn+0xe0>)
 801080e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d0b8      	beq.n	8010788 <scalbn+0x30>
 8010816:	a10e      	add	r1, pc, #56	; (adr r1, 8010850 <scalbn+0xf8>)
 8010818:	e9d1 0100 	ldrd	r0, r1, [r1]
 801081c:	e7b4      	b.n	8010788 <scalbn+0x30>
 801081e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010822:	3236      	adds	r2, #54	; 0x36
 8010824:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010828:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801082c:	4620      	mov	r0, r4
 801082e:	4b0c      	ldr	r3, [pc, #48]	; (8010860 <scalbn+0x108>)
 8010830:	2200      	movs	r2, #0
 8010832:	e7e8      	b.n	8010806 <scalbn+0xae>
 8010834:	f3af 8000 	nop.w
 8010838:	c2f8f359 	.word	0xc2f8f359
 801083c:	01a56e1f 	.word	0x01a56e1f
 8010840:	8800759c 	.word	0x8800759c
 8010844:	7e37e43c 	.word	0x7e37e43c
 8010848:	8800759c 	.word	0x8800759c
 801084c:	fe37e43c 	.word	0xfe37e43c
 8010850:	c2f8f359 	.word	0xc2f8f359
 8010854:	81a56e1f 	.word	0x81a56e1f
 8010858:	43500000 	.word	0x43500000
 801085c:	ffff3cb0 	.word	0xffff3cb0
 8010860:	3c900000 	.word	0x3c900000

08010864 <_init>:
 8010864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010866:	bf00      	nop
 8010868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801086a:	bc08      	pop	{r3}
 801086c:	469e      	mov	lr, r3
 801086e:	4770      	bx	lr

08010870 <_fini>:
 8010870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010872:	bf00      	nop
 8010874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010876:	bc08      	pop	{r3}
 8010878:	469e      	mov	lr, r3
 801087a:	4770      	bx	lr
